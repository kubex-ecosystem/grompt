/// PROJECT_INFO ///
Project: src
Generated: 2025-09-08T20:46:25.189Z
Total Files: 94
Source: /srv/apps/LIFE/KUBEX/pulse-hub/src

/// main/java/hub/pulse/Main.java ///
package hub.pulse;

public class Main {
    public static void main(String[] args) {
        // Entry point vazio
    }
}

/// main/java/hub/pulse/async/processors/BackgroundTaskManager.java ///
package hub.pulse.async.processors;

import org.mockito.internal.util.concurrent.WeakConcurrentMap;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class BackgroundTaskManager {
    private final ConcurrentHashMap<String, Future<?>> tasks;
    private final ExecutorService executorService;

    public BackgroundTaskManager(ExecutorService executorService) {
        this.tasks = new ConcurrentHashMap<>();
        this.executorService = Executors.newCachedThreadPool();
    }

    public void addTask(String taskId, Runnable task) {
        Future<?> future = executorService.submit(task);
        tasks.put(taskId, future);
    }

    public void removeTask(String taskId) {
        Future<?> future = tasks.remove(taskId);
        if (future != null) {
            future.cancel(true);
        }
    }

    public void executeTask(String taskId) {
        Future<?> future = tasks.get(taskId);
        if (future != null) {
            executorService.submit(() -> {
                try {
                    future.get();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        }
    }

    public WeakConcurrentMap getTasks() {
        return null;
    }
}

/// main/java/hub/pulse/async/processors/BackgroundTaskManagerTest.java ///
package hub.pulse.async.processors;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class BackgroundTaskManagerTest {

    private BackgroundTaskManager taskManager;
    private ExecutorService executorService;

    @BeforeEach
    public void setUp() {
        executorService = mock(ExecutorService.class);
        taskManager = new BackgroundTaskManager(executorService);
    }

    @Test
    public void testAddTask() {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);

        taskManager.addTask("task1", task);

        assertTrue(taskManager.getTasks().containsKey("task1"));
        assertEquals(future, taskManager.getTasks().get("task1"));
    }

    @Test
    public void testRemoveTask() {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);

        taskManager.addTask("task1", task);
        taskManager.removeTask("task1");

        assertFalse(taskManager.getTasks().containsKey("task1"));
        verify(future).cancel(true);
    }

    @Test
    public void testExecuteTask() throws Exception {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);
        when(future.get()).thenReturn(null);

        taskManager.addTask("task1", task);
        taskManager.executeTask("task1");

        verify(executorService).submit(any(Runnable.class));
        verify(future).get();
    }

    @Test
    public void testHandleTaskException() throws Exception {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);
        when(future.get()).thenThrow(new ExecutionException(new RuntimeException("Test exception")));

        taskManager.addTask("task1", task);
        taskManager.executeTask("task1");

        verify(executorService).submit(any(Runnable.class));
        verify(future).get();
    }

    @Test
    public void testConcurrentTaskExecution() throws InterruptedException {
        Runnable task1 = mock(Runnable.class);
        Runnable task2 = mock(Runnable.class);
        Future<?> future1 = mock(Future.class);
        Future<?> future2 = mock(Future.class);
        when(executorService.submit(task1)).thenReturn(future1);
        when(executorService.submit(task2)).thenReturn(future2);

        taskManager.addTask("task1", task1);
        taskManager.addTask("task2", task2);

        long startTime = System.currentTimeMillis();
        taskManager.executeTask("task1");
        taskManager.executeTask("task2");
        long endTime = System.currentTimeMillis();

        verify(executorService, times(2)).submit(any(Runnable.class));
        assertTrue((endTime - startTime) < 1000); // Ensure tasks are executed in parallel
    }
}

/// main/java/hub/pulse/async/webhooks/WebhookServer.java ///
package hub.pulse.async.webhooks;

import spark.Service;

public class WebhookServer {
    public static void start() {
        Service http = Service.ignite().port(8085);
        http.post("/webhook", (req, res) -> {
            String payload = req.body();
            System.out.println("Received webhook: " + payload);
            return "OK";
        });
    }
}

/// main/java/hub/pulse/async/webhooks/WebhookServerTest.java ///
package hub.pulse.async.webhooks;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class WebhookServerTest {

    @BeforeEach
    public void setUp() {
        WebhookServer.start();
        RestAssured.port = 8085;
    }

    @Test
    public void testServerStartsCorrectly() {
        Response response = given().get("/webhook");
        assertEquals(404, response.getStatusCode());
    }

    @Test
    public void testHandleWebhookRequest() {
        String payload = "{\"key\":\"value\"}";
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleEmptyPayload() {
        Response response = given()
                .header("Content-Type", "application/json")
                .body("")
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleInvalidJsonPayload() {
        String payload = "invalid json";
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleLargePayload() {
        StringBuilder payloadBuilder = new StringBuilder();
        for (int i = 0; i < 10000; i++) {
            payloadBuilder.append("a");
        }
        String payload = payloadBuilder.toString();
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleConcurrentRequests() throws InterruptedException {
        Runnable task = () -> {
            String payload = "{\"key\":\"value\"}";
            Response response = given()
                    .header("Content-Type", "application/json")
                    .body(payload)
                    .post("/webhook");
            assertEquals(200, response.getStatusCode());
            assertEquals("OK", response.getBody().asString());
        };

        Thread thread1 = new Thread(task);
        Thread thread2 = new Thread(task);
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
    }

    @Test
    public void testHandleUnexpectedHttpMethods() {
        Response response = given().put("/webhook");
        assertEquals(404, response.getStatusCode());

        response = given().delete("/webhook");
        assertEquals(404, response.getStatusCode());

        response = given().get("/webhook");
        assertEquals(404, response.getStatusCode());
    }
}

/// main/java/hub/pulse/database/mongo/MongoDBListener.java ///
package hub.pulse.database.mongo;

import com.mongodb.client.MongoClient;

import javax.annotation.PostConstruct;
import javax.inject.Singleton;

@Singleton
public class MongoDBListener {
    private final MongoClient mongoClient;

    public MongoDBListener(MongoClient mongoClient) {
        this.mongoClient = mongoClient;
    }

    @PostConstruct
    public void init() {
        mongoClient.watch().forEach(change -> {
            System.out.println("DB Update: " + change);
            // LÃ³gica de acionamento de processos
        });
    }
}

/// main/java/hub/pulse/database/mongo/MongoDBListenerTest.java ///
package hub.pulse.database.mongo;

import com.mongodb.client.MongoChangeStreamCursor;
import com.mongodb.client.MongoClient;
import com.mongodb.client.model.changestream.ChangeStreamDocument;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.mockito.Mockito.*;

public class MongoDBListenerTest {

    private MongoClient mongoClient;
    private MongoDBListener mongoDBListener;

    @BeforeEach
    public void setUp() {
        mongoClient = mock(MongoClient.class);
        mongoDBListener = new MongoDBListener(mongoClient);
    }

    @Test
    public void testInit() {
        MongoChangeStreamCursor<ChangeStreamDocument<Document>> cursor = mock(MongoChangeStreamCursor.class);
        when(mongoClient.watch()).thenReturn(cursor);

        mongoDBListener.init();

        verify(mongoClient).watch();
    }

    @Test
    public void testChangeProcessing() {
        MongoChangeStreamCursor<ChangeStreamDocument<Document>> cursor = mock(MongoChangeStreamCursor.class);
        ChangeStreamDocument<Document> change = mock(ChangeStreamDocument.class);
        when(mongoClient.watch()).thenReturn(cursor);
        when(cursor.hasNext()).thenReturn(true, false);
        when(cursor.next()).thenReturn(change);

        mongoDBListener.init();

        verify(mongoClient).watch();
        verify(cursor).hasNext();
        verify(cursor).next();
    }

    @Test
    public void testExceptionHandling() {
        MongoChangeStreamCursor<ChangeStreamDocument<Document>> cursor = mock(MongoChangeStreamCursor.class);
        when(mongoClient.watch()).thenReturn(cursor);
        when(cursor.hasNext()).thenThrow(new RuntimeException("Test exception"));

        mongoDBListener.init();

        verify(mongoClient).watch();
        verify(cursor).hasNext();
    }
}

/// main/java/hub/pulse/database/sqlserver/SQLServerInterface.java ///
package hub.pulse.database.sqlserver;

import java.sql.*;

public class SQLServerInterface {
    private final String url;
    private final String user;
    private final String password;

    public SQLServerInterface(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    private Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    public ResultSet fetchData(String query) throws SQLException {
        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            return stmt.executeQuery();
        }
    }

    public int updateData(String query) throws SQLException {
        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            return stmt.executeUpdate();
        }
    }
}

/// main/java/hub/pulse/docs/async.processors.md ///
# async.processors Module Documentation

## Overview

The `async.processors` module provides classes and interfaces for managing background tasks in an asynchronous manner. The primary class in this module is `BackgroundTaskManager`.

## BackgroundTaskManager

The `BackgroundTaskManager` class is responsible for managing background tasks. It allows adding, removing, and executing tasks asynchronously.

### Code Examples

#### Adding a Task

```java
import hub.pulse.async.processors.BackgroundTaskManager;

BackgroundTaskManager taskManager = new BackgroundTaskManager();
taskManager.

addTask("task1",() ->{
        // Task logic here
        });
```

#### Removing a Task

```java
taskManager.removeTask("task1");
```

#### Executing a Task

```java
taskManager.executeTask("task1");
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Managing Background Tasks**: Use `BackgroundTaskManager` to manage background tasks that need to be executed asynchronously. For example, processing data in the background while the main application continues to run.

2. **Task Scheduling**: Schedule tasks to be executed at a later time or periodically using the `BackgroundTaskManager`.

### Best Practices

1. **Proper Task Management**: Ensure that tasks are properly managed and canceled when no longer needed to avoid resource leaks.

2. **Exception Handling**: Handle exceptions within tasks to prevent unexpected termination and ensure that the application remains stable.

3. **Thread Management**: Use appropriate thread management techniques to avoid excessive resource consumption and ensure optimal performance.

## Diagrams and Flowcharts

### BackgroundTaskManager Interaction

```mermaid
graph TD
    A[Main Application] -->|Adds task| B[BackgroundTaskManager]
    B -->|Executes task| C[Task Logic]
    B -->|Removes task| D[Task Removed]
```

/// main/java/hub/pulse/docs/async.webhooks.md ///
# async.webhooks Module Documentation

## Overview

The `async.webhooks` module provides classes and interfaces for handling webhooks in an asynchronous manner. The primary class in this module is `WebhookServer`.

## WebhookServer

The `WebhookServer` class is responsible for handling webhooks. It allows starting a server to receive and process webhook requests.

### Code Examples

#### Starting the Webhook Server

```java
WebhookServer.start();
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Handling Webhooks**: Use `WebhookServer` to start a server that listens for webhook requests and processes them asynchronously. For example, receiving notifications from external services and triggering corresponding actions in the application.

2. **Webhook Processing**: Implement custom logic to process the payload received in the webhook request. For example, updating the application state based on the webhook data.

### Best Practices

1. **Security**: Ensure that the webhook server is secured and only accepts requests from trusted sources. Implement authentication and validation mechanisms to prevent unauthorized access.

2. **Error Handling**: Handle errors gracefully within the webhook processing logic to ensure that the application remains stable and responsive.

3. **Scalability**: Design the webhook server to handle a high volume of requests efficiently. Use appropriate techniques such as load balancing and asynchronous processing to ensure scalability.

## Diagrams and Flowcharts

### WebhookServer Interaction

```mermaid
graph TD
    A[External Service] -->|Sends webhook| B[WebhookServer]
    B -->|Processes payload| C[Application Logic]
```

/// main/java/hub/pulse/docs/database.mongo.md ///
# database.mongo Module Documentation

## Overview

The `database.mongo` module provides classes and interfaces for interacting with MongoDB databases. The primary class in this module is `MongoDBListener`.

## MongoDBListener

The `MongoDBListener` class listens for changes in a MongoDB database and triggers processes accordingly.

### Code Examples

#### Initializing MongoDBListener

```java
import hub.pulse.database.mongo.MongoDBListener;

MongoClient mongoClient = ...; // Initialize MongoClient
MongoDBListener listener = new MongoDBListener(mongoClient);
listener.

init();
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Database Change Listener**: Use `MongoDBListener` to listen for changes in a MongoDB database and trigger corresponding processes. For example, updating the application state based on database changes.

2. **Real-time Data Processing**: Implement real-time data processing by listening for database changes and triggering processes immediately.

### Best Practices

1. **Proper Initialization**: Ensure that the MongoClient is properly initialized and closed to avoid resource leaks.

2. **Efficient Change Handling**: Handle database changes efficiently to avoid performance issues. Implement appropriate logic to process changes in a timely manner.

3. **Error Handling**: Handle errors gracefully within the change processing logic to ensure that the application remains stable and responsive.

## Diagrams and Flowcharts

### MongoDBListener Data Flow

```mermaid
graph TD
    A[MongoDB] -->|Database change| B[MongoDBListener]
    B -->|Triggers process| C[Process Logic]
```

/// main/java/hub/pulse/docs/database.sqlserver.md ///
# database.sqlserver Module Documentation

## Overview

The `database.sqlserver` module provides classes and interfaces for interacting with SQL Server databases. The primary class in this module is `SQLServerInterface`.

## SQLServerInterface

The `SQLServerInterface` class provides methods to interact with a SQL Server database. It allows fetching and updating data using SQL queries.

### Code Examples

#### Fetching Data

```java
import hub.pulse.database.sqlserver.SQLServerInterface;

SQLServerInterface sqlInterface = new SQLServerInterface("jdbc:sqlserver://localhost;databaseName=mydb", "user", "password");
ResultSet resultSet = sqlInterface.fetchData("SELECT * FROM my_table");
while(resultSet.

next()){
        // Process result set
        }
```

#### Updating Data

```java
import hub.pulse.database.sqlserver.SQLServerInterface;

SQLServerInterface sqlInterface = new SQLServerInterface("jdbc:sqlserver://localhost;databaseName=mydb", "user", "password");
int rowsAffected = sqlInterface.updateData("UPDATE my_table SET column1 = 'value' WHERE column2 = 'condition'");
System.out.

println("Rows affected: "+rowsAffected);
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Data Retrieval**: Use `SQLServerInterface` to fetch data from a SQL Server database for processing and analysis. For example, retrieving customer information for generating reports.

2. **Data Update**: Use `SQLServerInterface` to update data in a SQL Server database. For example, updating inventory levels based on sales transactions.

### Best Practices

1. **Connection Management**: Ensure that database connections are properly managed and closed to avoid resource leaks. Use try-with-resources statements to automatically close connections.

2. **SQL Injection Prevention**: Use prepared statements to prevent SQL injection attacks. Avoid concatenating user input directly into SQL queries.

3. **Error Handling**: Handle SQL exceptions properly to ensure robust database interactions. Log errors and provide meaningful error messages to users.

## Diagrams and Flowcharts

### SQLServerInterface Data Interaction

```mermaid
graph TD
    A[SQLServerInterface] -->|Fetch data| B[SQL Server]
    B -->|Returns result set| C[Application Logic]
    A -->|Update data| B
```

/// main/java/hub/pulse/docs/erp.dao.md ///
# ERP DAO Module

## Overview

The `erp.dao` module provides data access objects (DAOs) for interacting with the ERP system. It includes functionality for fetching and updating data in the ERP system.

## ItemNotaDAO

The `ItemNotaDAO` interface defines the methods for interacting with item notes in the ERP system.

### Code Examples

#### Fetching Data

```java
import hub.pulse.erp.model.DynamicVO;

ItemNotaDAO itemNotaDAO = ...; // Initialize ItemNotaDAO
BigDecimal id = new BigDecimal(1);
DynamicVO item = itemNotaDAO.findByPK(id);
```

#### Updating Data

```java
import hub.pulse.erp.model.DynamicVO;
import hub.pulse.erp.model.FluidVO;

DynamicVO item = ...; // Initialize DynamicVO
FluidVO fluidItem = itemNotaDAO.prepareToUpdate(item);
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Fetching Item Notes**: Use `ItemNotaDAO` to fetch item notes from the ERP system. For example, retrieving item details for a specific order.

2. **Updating Item Notes**: Use `ItemNotaDAO` to update item notes in the ERP system. For example, updating discount values for an item.

### Best Practices

1. **Error Handling**: Handle errors gracefully when interacting with the ERP system to ensure the application remains stable.

2. **Resource Management**: Ensure that resources such as database connections are properly managed and closed when no longer needed.

3. **Logging**: Implement logging to track interactions with the ERP system for debugging and monitoring purposes.

## Diagrams and Flowcharts

### ItemNotaDAO Interaction

```mermaid
graph TD
    A[Application] -->|Fetch data| B[ItemNotaDAO]
    B -->|Fetch data| C[ERP System]
    A -->|Update data| B
    B -->|Update data| C
```

/// main/java/hub/pulse/docs/erp.model.md ///
# ERP Model Module

## Overview

The `erp.model` module provides classes for representing data in the ERP system. It includes functionality for handling dynamic and fluid value objects (VOs).

## DynamicVO

The `DynamicVO` class represents a dynamic value object in the ERP system.

### Code Examples

#### Creating a DynamicVO

```java
import hub.pulse.erp.model.DynamicVO;

BigDecimal id = new BigDecimal(1);
BigDecimal percDesc = new BigDecimal(10);
BigDecimal vlrDesc = new BigDecimal(100);
DynamicVO dynamicVO = new DynamicVO(id, percDesc, vlrDesc);
```

#### Accessing Fields

```java
BigDecimal id = dynamicVO.getId();
BigDecimal percDesc = dynamicVO.getPercDesc();
BigDecimal vlrDesc = dynamicVO.getVlrDesc();
```

## FluidVO

The `FluidVO` class represents a fluid value object in the ERP system.

### Code Examples

#### Creating a FluidVO

```java
import hub.pulse.erp.model.FluidVO;

BigDecimal id = new BigDecimal(1);
BigDecimal percDesc = new BigDecimal(10);
BigDecimal vlrDesc = new BigDecimal(100);
FluidVO fluidVO = new FluidVO(id, percDesc, vlrDesc);
```

#### Accessing Fields

```java
BigDecimal id = fluidVO.getId();
BigDecimal percDesc = fluidVO.getPercDesc();
BigDecimal vlrDesc = fluidVO.getVlrDesc();
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Creating Value Objects**: Use `DynamicVO` and `FluidVO` to create value objects representing data in the ERP system. For example, creating value objects for item notes.

2. **Accessing Fields**: Use the getter methods in `DynamicVO` and `FluidVO` to access the fields of the value objects. For example, retrieving the discount percentage and value for an item.

### Best Practices

1. **Error Handling**: Handle errors gracefully when creating and accessing value objects to ensure the application remains stable.

2. **Data Validation**: Validate the data before creating value objects to ensure the integrity of the data in the ERP system.

3. **Logging**: Implement logging to track the creation and access of value objects for debugging and monitoring purposes.

## Diagrams and Flowcharts

### DynamicVO and FluidVO Interaction

```mermaid
graph TD
    A[Application] -->|Create| B[DynamicVO]
    A -->|Create| C[FluidVO]
    B -->|Access fields| D[Application Logic]
    C -->|Access fields| D
```

/// main/java/hub/pulse/docs/erp.service.md ///
# ERP Service Module

## Overview

The `erp.service` module provides services for interacting with the ERP system. It includes functionality for managing item notes and recalculating values.

## ItemNotaService

The `ItemNotaService` class provides methods for finding, updating, and recalculating item notes in the ERP system.

### Code Examples

#### Finding an Item

```java
import hub.pulse.erp.model.DynamicVO;
import hub.pulse.erp.service.ItemNotaService;

ItemNotaService itemNotaService = new ItemNotaService();
BigDecimal id = new BigDecimal(1);
DynamicVO item = itemNotaService.findItem(id);
```

#### Updating an Item

```java
import hub.pulse.erp.model.DynamicVO;

DynamicVO item = ...; // Initialize DynamicVO
        itemNotaService.

atualizarItem(item);
```

#### Recalculating Values

```java
import hub.pulse.erp.model.DynamicVO;

DynamicVO item = ...; // Initialize DynamicVO
String eventType = "UPDATE";
itemNotaService.

recalculaVlrUnit(item, eventType);
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Finding Item Notes**: Use `ItemNotaService` to find item notes in the ERP system. For example, retrieving item details for a specific order.

2. **Updating Item Notes**: Use `ItemNotaService` to update item notes in the ERP system. For example, updating discount values for an item.

3. **Recalculating Values**: Use `ItemNotaService` to recalculate values for item notes in the ERP system. For example, recalculating unit values based on discount percentages.

### Best Practices

1. **Error Handling**: Handle errors gracefully when interacting with the ERP system to ensure the application remains stable.

2. **Resource Management**: Ensure that resources such as database connections are properly managed and closed when no longer needed.

3. **Logging**: Implement logging to track interactions with the ERP system for debugging and monitoring purposes.

## Diagrams and Flowcharts

### ItemNotaService Interaction

```mermaid
graph TD
    A[Application] -->|Find item| B[ItemNotaService]
    B -->|Find item| C[ERP System]
    A -->|Update item| B
    B -->|Update item| C
    A -->|Recalculate values| B
    B -->|Recalculate values| C
```

/// main/java/hub/pulse/docs/erp.sync.md ///
# erp.sync Module Documentation

## Overview

The `erp.sync` module provides classes and interfaces for managing background tasks and handling webhooks in an ERP system. The primary classes in this module are `BackgroundTaskManager` and `WebhookServer`.

## BackgroundTaskManager

The `BackgroundTaskManager` class is responsible for managing background tasks. It allows adding, removing, and executing tasks asynchronously.

### Code Examples

#### Adding a Task

```java
import hub.pulse.async.processors.BackgroundTaskManager;

BackgroundTaskManager taskManager = new BackgroundTaskManager();
taskManager.

addTask("task1",() ->{
        // Task logic here
        });
```

#### Removing a Task

```java
taskManager.removeTask("task1");
```

#### Executing a Task

```java
taskManager.executeTask("task1");
```

## WebhookServer

The `WebhookServer` class is responsible for handling webhooks. It allows starting a server to receive and process webhook requests.

### Code Examples

#### Starting the Webhook Server

```java
WebhookServer.start();
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Managing Background Tasks**: Use `BackgroundTaskManager` to manage background tasks that need to be executed asynchronously. For example, processing data in the background while the main application continues to run.

2. **Task Scheduling**: Schedule tasks to be executed at a later time or periodically using the `BackgroundTaskManager`.

3. **Handling Webhooks**: Use `WebhookServer` to start a server that listens for webhook requests and processes them asynchronously. For example, receiving notifications from external services and triggering corresponding actions in the application.

4. **Webhook Processing**: Implement custom logic to process the payload received in the webhook request. For example, updating the application state based on the webhook data.

### Best Practices

1. **Proper Task Management**: Ensure that tasks are properly managed and canceled when no longer needed to avoid resource leaks.

2. **Exception Handling**: Handle exceptions within tasks to prevent unexpected termination and ensure that the application remains stable.

3. **Thread Management**: Use appropriate thread management techniques to avoid excessive resource consumption and ensure optimal performance.

4. **Security**: Ensure that the webhook server is secured and only accepts requests from trusted sources. Implement authentication and validation mechanisms to prevent unauthorized access.

5. **Error Handling**: Handle errors gracefully within the webhook processing logic to ensure that the application remains stable and responsive.

6. **Scalability**: Design the webhook server to handle a high volume of requests efficiently. Use appropriate techniques such as load balancing and asynchronous processing to ensure scalability.

## Diagrams and Flowcharts

### BackgroundTaskManager Interaction

```mermaid
graph TD
    A[Main Application] -->|Adds task| B[BackgroundTaskManager]
    B -->|Executes task| C[Task Logic]
    B -->|Removes task| D[Task Removed]
```

### WebhookServer Interaction

```mermaid
graph TD
    A[External Service] -->|Sends webhook| B[WebhookServer]
    B -->|Processes payload| C[Application Logic]
```

/// main/java/hub/pulse/docs/integration.erp.md ///
# Integration ERP Module

## Overview

The `integration.erp` module provides classes and interfaces to interact with ERP systems. It includes functionality for fetching and updating data in ERP systems.

## ERPClient

The `ERPClient` interface defines the methods for interacting with an ERP system.

### Code Examples

#### Fetching Data

```java
import hub.pulse.integration.erp.ERPClient;
import hub.pulse.integration.erp.SankhyaERPClient;

ERPClient erpClient = new SankhyaERPClient(new SankhyaAPI());
erpClient.

fetchData();
```

#### Updating Data

```java
erpClient.updateData();
```

## SankhyaERPClient

The `SankhyaERPClient` class implements the `ERPClient` interface and provides the logic for interacting with the Sankhya ERP system.

### Code Examples

#### Fetching Data

```java
import hub.pulse.integration.erp.SankhyaERPClient;

SankhyaERPClient sankhyaClient = new SankhyaERPClient(new SankhyaAPI());
sankhyaClient.

fetchData();
```

#### Updating Data

```java
sankhyaClient.updateData();
```

## Usage Scenarios and Best Practices

### Usage Scenarios

1. **Fetching Data from ERP**: Use `ERPClient` to fetch data from an ERP system. For example, retrieving inventory data from the ERP.

2. **Updating Data in ERP**: Use `ERPClient` to update data in an ERP system. For example, updating order status in the ERP.

### Best Practices

1. **Error Handling**: Handle errors gracefully when interacting with the ERP system to ensure the application remains stable.

2. **Resource Management**: Ensure that resources such as API clients are properly managed and closed when no longer needed.

3. **Logging**: Implement logging to track interactions with the ERP system for debugging and monitoring purposes.

## Diagrams and Flowcharts

### ERPClient Interaction

```mermaid
graph TD
    A[Application] -->|Fetch data| B[ERPClient]
    B -->|Fetch data| C[ERP System]
    A -->|Update data| B
    B -->|Update data| C
```

/// main/java/hub/pulse/docs/integration.fastchannel.md ///
# Integration FastChannel Module

## Overview

The `integration.fastchannel` module provides classes and interfaces to interact with the FastChannel API. It includes functionality for generating API clients, handling authentication, and managing various API endpoints such as stock, orders, and prices.

## ApiClientGenerator

The `ApiClientGenerator` class is responsible for generating interfaces and classes based on API requests and responses.

### Usage

```java
import hub.pulse.integration.fastchannel.api.ApiClientGenerator;

ApiClientGenerator generator = new ApiClientGenerator();
generator.

generateClients("path/to/Insomnia.json");
```

## ApiContract

The `ApiContract` interface defines clear contracts for each endpoint.

## AuthenticationManager

The `AuthenticationManager` class handles authentication and headers configuration for reusable sessions considering token expiration.

### Usage

```java
import hub.pulse.integration.fastchannel.auth.AuthenticationManager;

AuthenticationManager authManager = AuthenticationManager.getInstance();
String token = authManager.getToken();
```

## StockApi

The `StockApi` class implements the stock API's and its logic.

## OrderApi

The `OrderApi` class implements the order API's and its logic.

## PriceApi

The `PriceApi` class implements the price API's and its logic.

## Data Models

### Order

The `Order` class represents the data model for orders.

```java
public class Order {
    private int orderId;
    private String orderCode;
    private boolean isSynched;
    private String createdAt;
    private int currentStatusId;
    private String currentStatusDescription;

    // Getters and Setters
}
```

### Price

The `Price` class represents the data model for prices.

```java
public class Price {
    private String productId;
    private double price;
    private String currency;
    private String effectiveDate;

    // Getters and Setters
}
```

### Stock

The `Stock` class represents the data model for stock.

```java
public class Stock {
    private String productId;
    private int quantity;
    private String location;
    private String lastUpdated;

    // Getters and Setters
}
```

## Usage Scenarios and Best Practices

### ApiClientGenerator

Usage Scenario:
- Use `ApiClientGenerator` to generate API clients based on API requests and responses.

Best Practices:
- Ensure that the input file path is correct and accessible.
- Handle exceptions properly to ensure robust client generation.

### AuthenticationManager

Usage Scenario:
- Use `AuthenticationManager` to handle authentication and manage token expiration.

Best Practices:
- Ensure that the token is refreshed before it expires.
- Handle authentication errors gracefully to avoid disruptions.

### StockApi, OrderApi, and PriceApi

Usage Scenario:
- Use `StockApi`, `OrderApi`, and `PriceApi` to interact with the respective API endpoints.

Best Practices:
- Ensure that the API endpoints are correctly defined and accessible.
- Handle API responses and errors properly to ensure robust interactions.

## Diagrams and Flowcharts

### ApiClientGenerator Process

```mermaid
graph TD
    A[ApiClientGenerator] -->|Reads Insomnia file| B[Parse JSON]
    B -->|Generate Interface| C[Interface]
    B -->|Generate Class| D[Class]
```

### AuthenticationManager Token Handling

```mermaid
graph TD
    A[AuthenticationManager] -->|Get Token| B[Check Expiration]
    B -->|Expired| C[Refresh Token]
    B -->|Valid| D[Return Token]
```

### API Interaction Flow

```mermaid
graph TD
    A[Client] -->|Request| B[StockApi/OrderApi/PriceApi]
    B -->|Process Request| C[API Endpoint]
    C -->|Response| B
    B -->|Return Response| A
```

/// main/java/hub/pulse/erp/model/invoice/Budget.java ///
package hub.pulse.erp.model.invoice;

import java.io.Serial;
import java.io.Serializable;
import java.math.BigDecimal;

public class Budget implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "DescontosPromocionais";
    private static final String ENTITY_ALIAS = "DescontoPromocional";
    private static final String ENTITY_TABLE = "TGFDES";
    private static final String ENTITY_ID = "NUPROMOCAO"; // CODPROD

    private String budgetId;
    private String description;
    private BigDecimal amount;
    private String currency;

    // Default constructor
    public Budget(String budgetId, String description, BigDecimal amount, String currency) {
        this.budgetId = budgetId;
        this.description = description;
        this.amount = amount;
        this.currency = currency;
    }

    public String getBudgetId() {
        return budgetId;
    }
    public void setBudgetId(String budgetId) {
        this.budgetId = budgetId;
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }

    public BigDecimal getAmount() {
        return amount;
    }
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
}

/// main/java/hub/pulse/erp/model/invoice/Detail.java ///
package hub.pulse.erp.model.invoice;

import java.io.Serial;
import java.io.Serializable;

public class Detail implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "DescontosPromocionais";
    private static final String ENTITY_ALIAS = "DescontoPromocional";
    private static final String ENTITY_TABLE = "TGFDES";
    private static final String ENTITY_ID = "NUPROMOCAO"; // CODPROD

    private String detailId;
    private String description;
    private String productId;
    private int quantity;
    private final double unitPrice;

    // Default constructor
    public Detail(String detailId, String description, String productId, int quantity, double unitPrice) {
        this.detailId = detailId;
        this.description = description;
        this.productId = productId;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
    }

    public String getDetailId() {
        return detailId;
    }

    public void setDetailId(String detailId) {
        this.detailId = detailId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public double getTotalPrice() {
        return unitPrice * quantity;
    }

    public void setUnitPrice(double unitPrice) {
        // This field is final, so it cannot be set after initialization
        throw new UnsupportedOperationException("Unit price cannot be changed once set.");
    }

    public String getProductName() {
        // This method is not defined in the original code, but can be added if needed
        return "Product Name for " + productId; // Placeholder implementation
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}

/// main/java/hub/pulse/erp/model/invoice/Invoice.java ///
package hub.pulse.erp.model.invoice;

import java.io.Serial;
import java.io.Serializable;

public class Invoice implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "DescontosPromocionais";
    private static final String ENTITY_ALIAS = "DescontoPromocional";
    private static final String ENTITY_TABLE = "TGFDES";
    private static final String ENTITY_ID = "NUPROMOCAO"; // CODPROD

    private String invoiceId;
    private String customerId;
    private String invoiceDate;
    private final double totalAmount;

    // Default constructor
    public Invoice(String invoiceId, String customerId, String invoiceDate, double totalAmount) {
        this.invoiceId = invoiceId;
        this.customerId = customerId;
        this.invoiceDate = invoiceDate;
        this.totalAmount = totalAmount;
    }

    public String getInvoiceId() {
        return invoiceId;
    }

    public void setInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getInvoiceDate() {
        return invoiceDate;
    }

    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    public double getTotalAmount() {
        return totalAmount;
    }
}

/// main/java/hub/pulse/erp/model/invoice/Status.java ///
package hub.pulse.erp.model.invoice;

import java.io.Serial;
import java.io.Serializable;
import java.util.HashMap;

public class Status implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "DescontosPromocionais";
    private static final String ENTITY_ALIAS = "DescontoPromocional";
    private static final String ENTITY_TABLE = "TGFDES";
    private static final String ENTITY_ID = "NUPROMOCAO"; // CODPROD

    private String statusId;
    private String description;
    private HashMap<String, Object> additionalProperties;

    // Default constructor
    public Status(String statusId, String description) {
        this.statusId = statusId;
        this.description = description;
        this.additionalProperties = new HashMap<>();
    }

    public String getStatusId() {
        return statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public HashMap<String, Object> getAdditionalProperties() {
        return additionalProperties;
    }

    public void setAdditionalProperties(HashMap<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
    }

    public void addAdditionalProperty(String key, Object value) {
        this.additionalProperties.put(key, value);
    }

    public Object getAdditionalProperty(String key) {
        return this.additionalProperties.get(key);
    }

    public void removeAdditionalProperty(String key) {
        this.additionalProperties.remove(key);
    }

    // Additional methods can be added as needed
    public String getStatusName() {
        return "Status Name for " + statusId; // Placeholder implementation
    }

    public String getStatusCode() {
        return "Status Code for " + statusId; // Placeholder implementation
    }

    public String getStatusDescription() {
        return "Status Description for " + statusId; // Placeholder implementation
    }

    public void updateStatus(String newDescription) {
        this.description = newDescription; // Update the status description
    }

    public boolean isActive() {
        // Placeholder implementation for checking if the status is active
        return !statusId.isEmpty() && !description.isEmpty();
    }

    public boolean isValid() {
        // Placeholder implementation for validating the status
        return statusId != null && !statusId.isEmpty() && description != null && !description.isEmpty();
    }

    public void clearAdditionalProperties() {
        this.additionalProperties.clear(); // Clear all additional properties
    }

    // Override toString, equals, and hashCode methods for better representation and comparison
    @Override
    public String toString() {
        return "Status{" +
                "statusId='" + statusId + '\'' +
                ", description='" + description + '\'' +
                ", additionalProperties=" + additionalProperties +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Status)) return false;

        Status status = (Status) o;

        if (!statusId.equals(status.statusId)) return false;
        if (!description.equals(status.description)) return false;
        return additionalProperties.equals(status.additionalProperties);
    }

    @Override
    public int hashCode() {
        int result = statusId.hashCode();
        result = 31 * result + description.hashCode();
        result = 31 * result + additionalProperties.hashCode();
        return result;
    }
}


/// main/java/hub/pulse/erp/model/price/BatchPrice.java ///
package hub.pulse.erp.model.price;

import java.io.Serial;
import java.io.Serializable;

public class BatchPrice implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "DescontosPromocionais";
    private static final String ENTITY_ALIAS = "DescontoPromocional";
    private static final String ENTITY_TABLE = "TGFDES";
    private static final String ENTITY_ID = "NUPROMOCAO"; // CODPROD

    private String batchId;
    private String productId;
    private double price;
    private String currency;

    public BatchPrice(String batchId, String productId, double price, String currency) {
        this.batchId = batchId;
        this.productId = productId;
        this.price = price;
        this.currency = currency;
    }

    public String getBatchId() {
        return batchId;
    }

    public void setBatchId(String batchId) {
        this.batchId = batchId;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }
}

/// main/java/hub/pulse/erp/model/price/GeneralPrice.java ///
package hub.pulse.erp.model.price;

import br.com.sankhya.jape.vo.DynamicVO;
import hub.pulse.integration.fastchannel.model.Price;

import java.io.Serial;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;

import static br.com.sankhya.modelcore.comercial.ComercialUtils.PrecoTabela;
import static br.com.sankhya.modelcore.comercial.ComercialUtils.obtemPreco;

public class GeneralPrice implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "PrecoProduto";
    private static final String ENTITY_ALIAS = "PrecoProduto";
    private static final String ENTITY_TABLE = "TGFEXC";
    private static final String ENTITY_ID = "CODPROD"; // Assuming CODPROD is the identifier for the price

    private final DynamicVO productPriceVO;
    private final BigDecimal codProd;
    private final BigDecimal productId;

    public GeneralPrice(DynamicVO productPriceVO, BigDecimal productId, BigDecimal codProd) {
        this.productPriceVO = productPriceVO;
        this.productId = productId;
        this.codProd = codProd;
    }

    public Price toFastChannelPrice() throws Exception {
        PrecoTabela precoUnitario = obtemPreco(
                new BigDecimal(26), // CodEmp (PadrÃ£o definido como 26 - Diretriz de Daniel Mendes)
                BigDecimal.ZERO, // CodParc (PreÃ§o indiferente de cliente)
                BigDecimal.ZERO, // CodVend (PreÃ§o indiferente de vendedor ao ser enviado para o FastChannel)
                BigDecimal.ZERO, // CodTipOper (PreÃ§o indiferente de tipo de operaÃ§Ã£o ao ser enviado para o FastChannel)
                this.codProd, // codProd
                BigDecimal.ZERO, // CodLocal (PreÃ§o indiferente de local ao ser enviado para o FastChannel)
                new Timestamp(System.currentTimeMillis()), // Data atual
                "", // ControleEstoque (NÃ£o Ã© utilizado ControleEstoque pela Bellube)
                "", // TipMov (PreÃ§o indiferente de tipo de movimento ao ser enviado para o FastChannel)
                "" // cifFo (PreÃ§o indiferente de CIF/FO ao ser enviado para o FastChannel)
        );
        if (precoUnitario.getValorVenda() == null) {
            throw new Exception("PreÃ§o nÃ£o encontrado para o produto: " + this.codProd);
        }

        Price price = new Price();
        price.setProductId(this.productId.toString());
        price.setPriceTableId(this.productPriceVO.asBigDecimal("CODTAB"));
        price.setListPrice(precoUnitario.getValorVenda());
        price.setSalePrice(precoUnitario.getValorVenda());

        return price;
    }
}



/// main/java/hub/pulse/erp/model/product/Register.java ///
package hub.pulse.erp.model.product;

import java.io.Serial;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashMap;

public class Register implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "ProdutoCadastro";
    private static final String ENTITY_ALIAS = "Produto";

    private static final String ENTITY_TABLE = "TGFPRO";
    private static final String ENTITY_ID = "CODPROD";

    private String productId;
    private BigDecimal productDefinitionId;
    private String productName;
    private String brandId;
    private String brandName;
    private HashMap<String, Object> metadata;

    public Register(
            BigDecimal productDefinitionId,
            String productId,
            String productName,
            String brandId,
            String brandName
    ) {
        this.productDefinitionId = productDefinitionId;
        this.productId = productId;
        this.productName = productName;
        this.brandId = brandId;
        this.brandName = brandName;

        this.metadata = new HashMap<>();
    }

    public String getProductId() {return productId;}
    public void setProductId(String productId) {this.productId = productId;}
    public BigDecimal getProductDefinitionId() {return productDefinitionId;}
    public void setProductDefinitionId(BigDecimal productDefinitionId) {this.productDefinitionId = productDefinitionId;}
    public String getProductName() {return productName;}
    public void setProductName(String productName) {this.productName = productName;}
    public String getBrandId() {return brandId;}
    public void setBrandId(String brandId) {this.brandId = brandId;}
    public String getBrandName() { return this.brandName; }
    public void setBrandName(String brandName) { this.brandName = brandName; }

    public HashMap<String, Object> getMetadata() {return metadata;}
    public Object getMetadata(String key) {return metadata.get(key);}
    public void setMetadata(HashMap<String, Object> metadata) {this.metadata = metadata;}
}

/// main/java/hub/pulse/erp/model/product/Stock.java ///
package hub.pulse.erp.model.product;

import java.io.Serial;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashMap;

public class Stock implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;

    // Constants for entity metadata
    private static final String ENTITY_NAME = "ProdutoEstoque";
    private static final String ENTITY_ALIAS = "ProdutoEstoque";
    private static final String ENTITY_TABLE = "TGFEST";
    private static final String ENTITY_ID = "CODPROD";

    private String productId;

    private BigDecimal resellerId;
    private String resellerName;

    private BigDecimal storageId;
    private String storageFederalRegistry;
    private String storageName;

    private BigDecimal quantity;
    private BigDecimal minimumQuantity;

    private int handlingTime;
    private int externalStockHandlingTime;
    private boolean isAvailable;
    private boolean isSelected;
    private boolean isExternalStockEnabled;

    private HashMap<String, Object> metadata;

    public Stock(
            String productId,
            BigDecimal resellerId,
            String resellerName,
            BigDecimal storageId,
            String storageFederalRegistry,
            String storageName
    ) {
        this.productId = productId;
        this.resellerId = resellerId;
        this.resellerName = resellerName;
        this.storageId = storageId;
        this.storageFederalRegistry = storageFederalRegistry;
        this.storageName = storageName;

        this.quantity = BigDecimal.ZERO;
        this.minimumQuantity = BigDecimal.ZERO;
        this.handlingTime = 0;
        this.externalStockHandlingTime = 0;
        this.isAvailable = false;
        this.isSelected = false;
        this.isExternalStockEnabled = false;

        this.metadata = new HashMap<>();
    }

    public String getProductId() {return productId;}
    public void setProductId(String productId) {this.productId = productId;}
    public BigDecimal getResellerId() {return resellerId;}
    public void setResellerId(BigDecimal resellerId) {this.resellerId = resellerId;}
    public String getResellerName() {return resellerName;}
    public void setResellerName(String resellerName) {this.resellerName = resellerName;}
    public BigDecimal getStorageId() {return storageId;}
    public void setStorageId(BigDecimal storageId) {this.storageId = storageId;}
    public String getStorageFederalRegistry() {return storageFederalRegistry;}
    public void setStorageFederalRegistry(String storageFederalRegistry) {this.storageFederalRegistry = storageFederalRegistry;}
    public String getStorageName() {return storageName;}
    public void setStorageName(String storageName) {this.storageName = storageName;}
    public BigDecimal getQuantity() {return quantity;}
    public void setQuantity(BigDecimal quantity) {this.quantity = quantity;}
    public BigDecimal getMinimumQuantity() {return minimumQuantity;}
    public void setMinimumQuantity(BigDecimal minimumQuantity) {this.minimumQuantity = minimumQuantity;}
    public int getHandlingTime() {return handlingTime;}
    public void setHandlingTime(int handlingTime) {this.handlingTime = handlingTime;}
    public int getExternalStockHandlingTime() {return externalStockHandlingTime;}
    public void setExternalStockHandlingTime(int externalStockHandlingTime) {this.externalStockHandlingTime = externalStockHandlingTime;}
    public boolean isAvailable() {return isAvailable;}
    public void setAvailable(boolean available) {isAvailable = available;}
    public boolean isSelected() {return isSelected;}
    public void setSelected(boolean selected) {isSelected = selected;}
    public boolean isExternalStockEnabled() {return isExternalStockEnabled;}
    public void setExternalStockEnabled(boolean externalStockEnabled) {
        isExternalStockEnabled = externalStockEnabled;
    }

    public HashMap<String, Object> getMetadata() {return metadata;}
    public Object getMetadata(String key) {return metadata.get(key);}
    public void setMetadata(HashMap<String, Object> metadata) {this.metadata = metadata;}

}

/// main/java/hub/pulse/erp/service/InvoiceItemService.java ///
package hub.pulse.erp.service;

import br.com.sankhya.jape.wrapper.JapeFactory;
import br.com.sankhya.jape.wrapper.JapeWrapper;
import br.com.sankhya.jape.wrapper.fluid.FluidUpdateVO;
import hub.pulse.erp.model.DynamicVO;

import java.math.BigDecimal;

public class InvoiceItemService {
    private final JapeWrapper iteDAO = JapeFactory.dao("ItemNota");

    public DynamicVO findItem(BigDecimal id) throws Exception {
        return (DynamicVO) iteDAO.findByPK(new Object[]{id});
    }

    public void atualizarItem(DynamicVO iteVO) throws Exception {
        FluidUpdateVO update = iteDAO.prepareToUpdate((br.com.sankhya.jape.vo.DynamicVO) iteVO);
        update.set("PERCDESC", iteVO.asBigDecimalOrZero("PERCDESC"));
        update.set("VLRDESC", iteVO.asBigDecimalOrZero("VLRDESC"));
        update.update();
    }

    public void recalculaVlrUnit(DynamicVO iteVO, String eventType) throws Exception {
        JapeWrapper cabDAO = JapeFactory.dao("CabecalhoNota");
        JapeWrapper proDAO = JapeFactory.dao("Produto");
        JapeWrapper iteDAO = JapeFactory.dao("ItemNota");
        DynamicVO notaVO = (DynamicVO) cabDAO.findByPK(new Object[]{iteVO.asBigDecimal("NUNOTA")});

        FluidUpdateVO _preRecalc = iteDAO.prepareToUpdate((br.com.sankhya.jape.vo.DynamicVO) iteVO);
        _preRecalc.set("PERCDESC", iteVO.asBigDecimalOrZero("PERCDESC"));
        _preRecalc.set("VLRDESC", iteVO.asBigDecimalOrZero("VLRDESC"));
        _preRecalc.update();
    }
}

/// main/java/hub/pulse/erp/service/PriceService.java ///
package hub.pulse.erp.service;

import br.com.sankhya.jape.dao.EntityPrimaryKey;
import br.com.sankhya.jape.vo.DynamicVO;
import br.com.sankhya.jape.wrapper.JapeFactory;
import br.com.sankhya.jape.wrapper.JapeWrapper;
import hub.pulse.integration.fastchannel.config.PriceConfig;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.service.FastChannelPriceService;
import hub.pulse.shared.DynamicData;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

// This class provides methods to consume the "TabelaPreco" entity in the Sankhya ERP system,
// allowing for operations such as finding an item by its primary key, looking up price entries,
// and potentially updating or managing price entries in the future.
// This class will be used in the context of handling price-related operations within the ERP system, syncing
// with any other services or components that require access to pricing data.
public class PriceService {
    private final JapeWrapper iteDAO = JapeFactory.dao("TabelaPreco");

    /**
     * Finds a price entry by its primary key.
     *
     * @param pk The primary key of the price entry.
     * @return The DynamicVO representing the price entry.
     * @throws Exception If an error occurs while fetching the price entry.
     */
    private DynamicVO findPriceEntityRef(EntityPrimaryKey pk) throws Exception {
        return iteDAO.findByPK(pk);
    }

    /**
     * Finds all price entries for a given price table.
     *
     * @param codTab The code of the price table.
     * @return A collection of DynamicVO representing the price entries.
     * @throws Exception If an error occurs while fetching the price entries.
     */
    public Collection<DynamicVO> findAllPrices(BigDecimal codTab) throws Exception {
        return iteDAO.find("CODTAB = ?", new Object[]{codTab});
    }

    /**
     * Finds a price entry by its product code and price table code.
     *
     * @param codProd The code of the product.
     * @param codTab  The code of the price table.
     * @return A DynamicVO representing the price entry, or null if not found.
     * @throws Exception If an error occurs while fetching the price entry.
     */
    public DynamicVO findPriceByProductAndTable(BigDecimal codProd, BigDecimal codTab) throws Exception {
        if (codProd == null || codProd.compareTo(BigDecimal.ZERO) <= 0) {
            System.out.println("Pulse Hub - ERPPriceService: Invalid CODPROD provided, returning null.");
            return null; // Return null if CODPROD is invalid
        }
        if (codTab == null || codTab.compareTo(BigDecimal.ZERO) <= 0) {
            System.out.println("Pulse Hub - ERPPriceService: Invalid CODTAB provided, returning null.");
            return null; // Return null if CODTAB is invalid
        }
        List<DynamicVO> prices = iteDAO.find("CODPROD = ? AND CODTAB = ?", new Object[]{codProd, codTab});
        if (prices.isEmpty()) {
            System.out.println("Pulse Hub - ERPPriceService: No price found for CODPROD: " + codProd + " and CODTAB: " + codTab);
            return null; // Return null if no price is found
        }
        return prices.get(0); // Return the first price entry found
    }

    /**
     * Fetches price data from the ERP and returns it as a list of DynamicData objects.
     * In a real implementation, this would query the database using JapeWrapper.
     * For now, it returns mock data based on REVERIE.md.
     *
     * @return A list of DynamicData objects representing prices.
     */
    public List<DynamicData> getPricesFromERP(BigDecimal codTab, BigDecimal codProd) throws Exception {
      List<DynamicData> prices = new ArrayList<>();
      JapeWrapper priceDAO = JapeFactory.dao("TabelaPreco");
      if (codTab == null || codTab.compareTo(BigDecimal.ZERO) <= 0) {
          System.out.println("Pulse Hub - ERPPriceService: Invalid CODTAB provided, returning empty price list.");
          return prices; // Return empty list if CODTAB is invalid
      }
      if (codProd == null || codProd.compareTo(BigDecimal.ZERO) <= 0) {
          System.out.println("Pulse Hub - ERPPriceService: Invalid CODPROD provided, returning empty price list.");
          return prices; // Return empty list if CODPROD is invalid
      }
      prices = priceDAO.find("CODTAB = ? AND CODPROD = ?", new Object[]{codTab, codProd});
      if (prices.isEmpty()) {
          System.out.println("Pulse Hub - ERPPriceService: No prices found for CODTAB: " + codTab + " and CODPROD: " + codProd);
          return prices;
      }
      return prices;
    }

    /**
     * Updates a price entry in the ERP system.
     *
     * @param vo The DynamicVO representing the price entry to update.
     * @throws Exception If an error occurs while updating the price entry.
     */
    public void notifyUpdated(DynamicVO vo) throws Exception {
        PriceConfig priceConfig = new PriceConfig();
        FastChannelPriceService fastChannelPriceService = new FastChannelPriceService(priceConfig);

        // Validate the price table ID and product ID
        if (vo.getProperty("CODTAB") == null || vo.asBigDecimalOrZero("CODPROD").equals(BigDecimal.ZERO)) {
            throw new Exception("CODTAB and CODPROD are required for creating a price entry.");
        }

        // Log the update for debugging
        System.out.println("Updating price entry for Product ID: " + vo.asBigDecimal("CODPROD"));

        // Update the price entry using FastChannelPriceService
        try {
            fastChannelPriceService.updatePrice(vo);
        } catch (Exception e) {
            throw new Exception("Failed to update price entry: " + e.getMessage(), e);
        }
    }

    /**
     * Deletes a price entry from the ERP system.
     *
     * @param vo The DynamicVO representing the price entry to delete.
     * @throws Exception If an error occurs while deleting the price entry.
     */
    public void notifyRemoved(DynamicVO vo) throws Exception {
        PriceConfig priceConfig = new PriceConfig();
        FastChannelPriceService fastChannelPriceService = new FastChannelPriceService(priceConfig);

        // Validate the price table ID and product ID
        if (vo.getProperty("CODTAB") == null || vo.asBigDecimalOrZero("CODPROD").equals(BigDecimal.ZERO)) {
            throw new Exception("CODTAB and CODPROD are required for deleting a price entry.");
        }

        // Log the deletion for debugging
        System.out.println("Deleting price entry for Product ID: " + vo.asBigDecimal("CODPROD"));

        // Delete the price entry using FastChannelPriceService
        try {
            fastChannelPriceService.deletePrice(vo.asBigDecimal("CODPROD").toString(), vo.asInt("CODTAB"));
        } catch (Exception e) {
            throw new Exception("Failed to delete price entry: " + e.getMessage(), e);
        }
    }

    /**
     * Creates a new price entry in the ERP system.
     *
     * @param vo The DynamicVO representing the price entry to create.
     * @throws Exception If an error occurs while creating the price entry.
     */
    public void notifyCreated(DynamicVO vo) throws Exception {
        PriceConfig priceConfig = new PriceConfig();
        FastChannelPriceService fastChannelPriceService = new FastChannelPriceService(priceConfig);

        // Validate the price table ID and product ID
        if (vo.getProperty("CODTAB") == null || vo.asBigDecimalOrZero("CODPROD").equals(BigDecimal.ZERO)) {
            throw new Exception("CODTAB and CODPROD are required for creating a price entry.");
        }

        // Log the deletion for debugging
        System.out.println("Deleting price entry for Product ID: " + vo.asBigDecimal("CODPROD"));

        // Create the price entry using FastChannelPriceService
        try {
            fastChannelPriceService.createPrice(vo);
        } catch (Exception e) {
            throw new Exception("Failed to create price entry: " + e.getMessage(), e);
        }
    }

  }

/// main/java/hub/pulse/erp/service/ProductStockService.java ///
package hub.pulse.erp.service;

import java.math.BigDecimal;

public class ProductStockService {
  /**
   * Updates the stock level for a specific product.
   *
   * @param productId The ID of the product to update.
   * @param quantity  The new stock quantity.
   * @throws Exception If an error occurs while updating the stock level.
   */
  public void updateStockLevel(BigDecimal productId, String storageId, String controlId, BigDecimal quantity) throws Exception {
    // Validate inputs
    if (productId == null || storageId == null || quantity == null || quantity.compareTo(BigDecimal.ZERO) < 0) {
      System.out.println("Invalid input parameters for updating stock level.");
      return;
    }

    try {
      JapeWrapper stockDao = JapeFactory.dao("Estoque");
      DynamicVo stockVo = stockDao.find("CODPROD = ? AND CODLOCAL = ? AND CONTROLE = ?", new Object[]{productId, storageId, controlId}).get(0);
      if (stockVo == null) {
        System.out.println("No stock entry found for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return;
      }
    } catch (Exception e) {
      System.out.println("Error retrieving stock entry: " + e.getMessage());
      e.printStackTrace();
      return;
    }

    try {
      BigDecimal stockQuantity = stockVo.asBigDecimalOrZero("ESTOQUE");
      BigDecimal reservedQuantity = stockVo.asBigDecimalOrZero("RESERVADO");
      BigDecimal balance = stockQuantity.subtract(reservedQuantity);

      if (balance.compareTo(BigDecimal.ZERO) < 0) {
        System.out.println("Insufficient stock for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return;
      }

      FluidVo stockUpdateVo = stockDao.prepareToUpdate(stockVo);
      BigDecimal newStockQuantity = stockQuantity.add(BigDecimal.valueOf(quantity));
      stockUpdateVo.set("RESERVADO", newStockQuantity);
      stockUpdateVo.update();

      stockDao.update();
      System.out.println("Stock level updated successfully for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
      System.out.println("New reserved stock level: " + newStockQuantity.toString());
    } catch (Exception e) {
      System.out.println("Error updating stock level: " + e.getMessage());
      e.printStackTrace();
    }
  }

  /**
   * Retrieves the current stock level for a specific product.
   *
   * @param productId The ID of the product to retrieve stock level for.
   * @return The current stock quantity.
   * @throws Exception If an error occurs while retrieving the stock level.
   */
  public BigDecimal getStockLevel(String productId, String storageId, String controlId) throws Exception {
    // Validate inputs
    if (productId == null || storageId == null) {
      System.out.println("Product ID and Storage ID must not be null.");
      return BigDecimal.ZERO;
    }

    try {
      JapeWrapper stockDao = JapeFactory.dao("Estoque");
      DynamicVo stockVo = stockDao.find("CODPROD = ? AND CODLOCAL = ? AND CONTROLE = ?", new Object[]{productId, storageId, controlId}).get(0);
      if (stockVo == null) {
        System.out.println("No stock entry found for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return BigDecimal.ZERO;
      }
      return stockVo.asBigDecimalOrZero("ESTOQUE");
    } catch (Exception e) {
      System.out.println("Error retrieving stock level: " + e.getMessage());
      e.printStackTrace();
      return BigDecimal.ZERO;
    }
  }

  /**
   * Retrieves the stock level for a specific product.
   *
   * @param productId The ID of the product to retrieve stock level for.
   * @return The current stock quantity.
   * @throws Exception If an error occurs while retrieving the stock level.
   */
  public BigDecimal getStockReserved(String productId, String storageId, String controlId) throws Exception {
    // Validate inputs
    if (productId == null || storageId == null){
      System.out.println("Product ID and Storage ID must not be null.");
      return BigDecimal.ZERO;
    }

    try {
      JapeWrapper stockDao = JapeFactory.dao("Estoque");
      DynamicVo stockVo = stockDao.find("CODPROD = ? AND CODLOCAL = ? AND CONTROLE = ?", new Object[]{productId, storageId, controlId}).get(0);
      if (stockVo == null) {
        System.out.println("No stock entry found for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return BigDecimal.ZERO;
      }

      return stockVo.asBigDecimalOrZero("RESERVADO");
    } catch (Exception e) {
      System.out.println("Error retrieving stock reserved level: " + e.getMessage());
      e.printStackTrace();
      return BigDecimal.ZERO;
    }
  }

    /**
   * Retrieves the stock level for a specific product.
   *
   * @param productId The ID of the product to retrieve stock level for.
   * @return The current stock quantity.
   * @throws Exception If an error occurs while retrieving the stock level.
   */
  public BigDecimal getStockBalance(String productId, String storageId, String controlId) throws Exception {
    BigDecimal stock = getStockLevel(productId, storageId, controlId);
    BigDecimal reserved = getStockReserved(productId, storageId, controlId);
    return stock.subtract(reserved);
  }

  /**
   * Checks if a product is in stock.
   *
   * @param productId The ID of the product to check.
   * @return True if the product is in stock, false otherwise.
   * @throws Exception If an error occurs while checking stock status.
   */
  public boolean isProductInStock(String productId, String storageId, String controlId) throws Exception {
    BigDecimal stockLevel = getStockBalance(productId, storageId, controlId);
    return stockLevel.compareTo(BigDecimal.ZERO) > 0;
  }

  /**
   * Adjusts the stock level for a product based on a transaction.
   *
   * @param productId The ID of the product to adjust stock for.
   * @param adjustment The quantity to adjust (can be positive or negative).
   * @throws Exception If an error occurs while adjusting the stock level.
   */
  public void adjustStockLevel(String productId, String storageId, String controlId, BigDecimal adjustment) throws Exception {
    BigDecimal reserved = getStockReserved(productId, storageId, controlId);

    if (adjustment.compareTo(BigDecimal.ZERO) < 0 && reserved.add(adjustment).compareTo(BigDecimal.ZERO) < 0) {
      System.out.println("Adjustment cannot result in negative reserved stock for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
      return;
    }

    JapeWrapper stockDao = JapeFactory.dao("Estoque");

    try {
      DynamicVo stockVo = stockDao.find("CODPROD = ? AND CODLOCAL = ? AND CONTROLE = ?", new Object[]{productId, storageId, controlId}).get(0);

      if (stockVo == null) {
        System.out.println("No stock entry found for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return;
      }
      if (stockVo.asBigDecimalOrZero("ESTOQUE").compareTo(BigDecimal.ZERO) <= 0) {
        System.out.println("Stock is empty for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
        return;
      }
    } catch (Exception e) {
      System.out.println("Error retrieving stock entry: " + e.getMessage());
      e.printStackTrace();
      return;
    }

    try {
      FluidVo stockUpdateVo = stockDao.prepareToUpdate(stockVo);
      BigDecimal currentReserved = stockVo.asBigDecimalOrZero("RESERVADO");
      BigDecimal newReserved = currentReserved.add(BigDecimal.valueOf(adjustment));

      stockUpdateVo.set("RESERVADO", newReserved);

      stockUpdateVo.update();

      System.out.println("Stock level adjusted successfully for product ID: " + productId + ", storage ID: " + storageId + ", control ID: " + controlId);
      System.out.println("New reserved stock level: " + newReserved.toString());
    } catch (Exception e) {
      System.out.println("Error adjusting stock level: " + e.getMessage());
      e.printStackTrace();
    }
  }
}


/// main/java/hub/pulse/erp/service/actions/BudgetHeaderAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class BudgetHeaderAction implements AcaoRotinaJava {
    /**
     * Default constructor for the BudgetAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public BudgetHeaderAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the budget action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        // Retrieve the records from the action context
        Registro[] registros = contextoAcao.getLinhas();

        // Iterate through each record and process it
        for (Registro registro : registros) {
            // Check if the required fields are present
            if (registro.getCampo("CODFILIAL") != null &&
                registro.getCampo("NUMORC") != null &&
                registro.getCampo("VLRORC") != null) {

                System.out.println("Processing budget action for: " + registro);

                // Here you can add your logic to handle the budget action
                // For example, updating the budget details in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/BudgetItemAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class BudgetItemAction implements AcaoRotinaJava {
    /**
     * Default constructor for the BudgetAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public BudgetItemAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the budget action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        // Retrieve the records from the action context
        Registro[] registros = contextoAcao.getLinhas();

        // Iterate through each record and process it
        for (Registro registro : registros) {
            // Check if the required fields are present
            if (registro.getCampo("CODFILIAL") != null &&
                registro.getCampo("NUMORC") != null &&
                registro.getCampo("VLRORC") != null) {

                System.out.println("Processing budget action for: " + registro);

                // Here you can add your logic to handle the budget action
                // For example, updating the budget details in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/InvoiceHeaderAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class InvoiceHeaderAction implements AcaoRotinaJava {
    /**
     * Default constructor for the InvoiceAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public InvoiceHeaderAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the invoice action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        Registro[] registers = contextoAcao.getLinhas();
        for (Registro registro : registers) {
            if (registro.getCampo("CODFILIAL") != null &&
                registro.getCampo("NUMNOTA") != null &&
                registro.getCampo("VLRNOTA") != null) {

                System.out.println("Processing invoice action for: " + registro);

                // Here you can add your logic to handle the invoice action
                // For example, updating the invoice details in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/InvoiceItemAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class InvoiceItemAction implements AcaoRotinaJava {
    /**
     * Default constructor for the InvoiceAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public InvoiceItemAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the invoice action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        Registro[] registers = contextoAcao.getLinhas();
        for (Registro registro : registers) {
            if (registro.getCampo("CODFILIAL") != null &&
                registro.getCampo("NUMNOTA") != null &&
                registro.getCampo("VLRNOTA") != null) {

                System.out.println("Processing invoice action for: " + registro);

                // Here you can add your logic to handle the invoice action
                // For example, updating the invoice details in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/ProductBatchPriceAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class ProductBatchPriceAction implements AcaoRotinaJava {
    /**
     * Default constructor for the UnitPriceAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public ProductBatchPriceAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the unit price action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        Registro[] registers = contextoAcao.getLinhas();
        for (Registro registro : registers) {
            if (registro.getCampo("CODTAB") != null &&
                registro.getCampo("VLRUNIT") != null &&
                registro.getCampo("CODPROD") != null) {

                System.out.println("Processing unit price action for: " + registro);

                // Here you can add your logic to handle the unit price action
                // For example, updating the unit price in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/ProductStockAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class ProductStockAction implements AcaoRotinaJava {
    /**
     * Default constructor for the ProductStockAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public ProductStockAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the unit price action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        Registro[] registers = contextoAcao.getLinhas();
        for (Registro registro : registers) {
            if (registro.getCampo("CODPROD") != null &&
                registro.getCampo("QTDE") != null &&
                registro.getCampo("CODFILIAL") != null) {

                System.out.println("Processing product stock action for: " + registro);

                // Here you can add your logic to handle the product stock action
                // For example, updating the stock quantity in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/actions/ProductUnitPriceAction.java ///
package hub.pulse.erp.service.actions;

import br.com.sankhya.extensions.actionbutton.AcaoRotinaJava;
import br.com.sankhya.extensions.actionbutton.ContextoAcao;
import br.com.sankhya.extensions.actionbutton.Registro;

public class ProductUnitPriceAction implements AcaoRotinaJava {
    /**
     * Default constructor for the UnitPriceAction class.
     * This constructor initializes the action without any specific parameters.
     */
    public ProductUnitPriceAction() {}

    /**
     * This method is called when the action is triggered.
     * It processes the unit price action based on the provided context.
     *
     * @param contextoAcao The context of the action containing the necessary data.
     * @throws Exception If an error occurs during processing.
     */
    @Override
    public void doAction(ContextoAcao contextoAcao) throws Exception {
        Registro[] registers = contextoAcao.getLinhas();
        for (Registro registro : registers) {
            if (registro.getCampo("CODTAB") != null &&
                registro.getCampo("VLRUNIT") != null &&
                registro.getCampo("CODPROD") != null) {

                System.out.println("Processing unit price action for: " + registro);

                // Here you can add your logic to handle the unit price action
                // For example, updating the unit price in the database

            } else {
                System.out.println("Required fields are not present, skipping processing for: " + registro);
            }
        }
    }
}

/// main/java/hub/pulse/erp/service/events/InvoiceHeaderEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class InvoiceHeaderEventHandler implements EventoProgramavelJava {

    public InvoiceHeaderEventHandler() {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeCommit(TransactionContext transactionContext) throws Exception {}
}

/// main/java/hub/pulse/erp/service/events/InvoiceItemEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class InvoiceItemEventHandler implements EventoProgramavelJava {
    /**
     * Default constructor.
     */
    public InvoiceItemEventHandler() {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {}

    public void beforeCommit(TransactionContext transactionContext) throws Exception {}
}


/// main/java/hub/pulse/erp/service/events/PriceEntryEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;
import br.com.sankhya.jape.vo.DynamicVO;
import hub.pulse.erp.service.PriceService;

public class PriceEntryEventHandler implements EventoProgramavelJava {
    /**
     * Default constructor.
     */
    public PriceEntryEventHandler() {}

    @Override
    public void beforeCommit(TransactionContext transactionContext) throws Exception {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        if (
            persistenceEvent.getModifingFields().containsKey("CODTAB") &&
            persistenceEvent.getModifingFields().containsKey("VLRUNIT") &&
            persistenceEvent.getModifingFields().containsKey("CODPROD")
        ) {

            System.out.println("Processing price entry event...");
            DynamicVO vo = (DynamicVO) persistenceEvent.getVo();

            PriceService priceService = new PriceService();
            priceService.notifyCreated(vo);

            System.out.println("Price entry processed successfully: " + vo);

        } else {
            System.out.println("Required fields are not present, skipping processing.");
            return; // If required fields are not present, skip processing
        }

        persistenceEvent.setConsumed(true); // Mark the event as consumed
    }

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        if (
            persistenceEvent.getModifingFields().containsKey("CODTAB") &&
            persistenceEvent.getModifingFields().containsKey("VLRUNIT") &&
            persistenceEvent.getModifingFields().containsKey("CODPROD")
        ) {

            System.out.println("Processing price update event...");
            DynamicVO vo = (DynamicVO) persistenceEvent.getVo();

            PriceService priceService = new PriceService();
            priceService.notifyUpdated(vo);

            System.out.println("Price update processed successfully: " + vo);

        } else {
            System.out.println("Required fields are not present, skipping processing.");
            return; // If required fields are not present, skip processing
        }

        persistenceEvent.setConsumed(true); // Mark the event as consumed
    }

    @Override
    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        if (
          persistenceEvent.getModifingFields().containsKey("CODTAB") || 
          persistenceEvent.getModifingFields().containsKey("CODPROD")
        ) {
            System.out.println("Required fields are not present, skipping processing.");
            return; // If required fields are not present, skip processing
        }

        System.out.println("Processing price deletion event...");
        DynamicVO vo = (DynamicVO) persistenceEvent.getVo();
        
        PriceService priceService = new PriceService();
        priceService.notifyRemoved(vo);

        System.out.println("Price deletion processed successfully: " + vo);

        persistenceEvent.setConsumed(true); // Mark the event as consumed
    }
}

/// main/java/hub/pulse/erp/service/events/PriceTabEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class PriceTabEventHandler implements EventoProgramavelJava {
    /**
     * Default constructor.
     */

    public PriceTabEventHandler() {}

    @Override
    public void beforeCommit(TransactionContext transactionContext) throws Exception {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        // Get the list of modifying products from the event
        if (persistenceEvent.getModifingFields().containsKey("CODTAB") &&
            persistenceEvent.getModifingFields().containsKey("NUTAB")) {
            BigDecimal codTab = new BigDecimal(persistenceEvent.getModifingFields().get("CODTAB"));
            BigDecimal nutab = new BigDecimal(persistenceEvent.getModifingFields().get("NUTAB"));
            JapeWrapper priceDao = JapeFactory.dao("TabelaPreco");
            Collection<DynamicVO> priceEntries = priceDao.find("NUTAB = ?", new Object[]{ nutab });
            if (priceEntries.isEmpty()) {
              System.out.println("No price entries found for NUTAB: " + nutab);
            } else {
              PriceService priceService = new PriceService();
              for (DynamicVO priceEntry : priceEntries) {
                try {
                    // Validate the price entry
                    if (priceEntry.getBigDecimal("VLRUNIT") == null || priceEntry.getBigDecimal("VLRUNIT").compareTo(BigDecimal.ZERO) <= 0) {
                        System.out.println("Invalid VLRUNIT for price entry: " + priceEntry);
                        continue; // Skip invalid entries
                    }
                } catch (Exception e) {
                    System.out.println("Error validating price entry: " + e.getMessage());
                    continue; // Skip this entry if there's an error
                }
                try {
                    // Notify the PriceService about the new price entry
                    priceService.notifyCreated(priceEntry);
                } catch (Exception e) {
                    System.out.println("Error processing price entry: " + e.getMessage());
                    continue; // Skip this entry if there's an error
                }
              }
            }
        } else {
            System.out.println("Required fields are not present, skipping processing.");
            return; // If required fields are not present, skip processing
        }
        // Mark the event as consumed
        persistenceEvent.setConsumed(true);
    }

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        if (persistenceEvent.getModifingFields().containsKey("NUTAB")) {
            BigDecimal nutab = new BigDecimal(persistenceEvent.getModifingFields().get("NUTAB"));
            JapeWrapper priceDao = JapeFactory.dao("TabelaPreco");
            Collection<DynamicVO> priceEntries = priceDao.find("NUTAB = ?", new Object[]{ nutab });
            if (priceEntries.isEmpty()) {
                System.out.println("No price entries found for NUTAB: " + nutab);
            } else {
                PriceService priceService = new PriceService();
                for (DynamicVO priceEntry : priceEntries) {
                    try {
                        // Validate the price entry
                        if (priceEntry.getBigDecimal("VLRUNIT") == null || priceEntry.getBigDecimal("VLRUNIT").compareTo(BigDecimal.ZERO) <= 0) {
                            System.out.println("Invalid VLRUNIT for price entry: " + priceEntry);
                            continue; // Skip invalid entries
                        }
                    } catch (Exception e) {
                        System.out.println("Error validating price entry: " + e.getMessage());
                        continue; // Skip this entry if there's an error
                    }
                    try {
                        // Notify the PriceService about the new price entry
                        priceService.notifyCreated(priceEntry);
                    } catch (Exception e) {
                        System.out.println("Error processing price entry: " + e.getMessage());
                        continue; // Skip this entry if there's an error
                    }
                }
            }
        }
    }

    @Override
    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        if (persistenceEvent.getModifingFields().containsKey("NUTAB")) {
            BigDecimal nutab = new BigDecimal(persistenceEvent.getModifingFields().get("NUTAB"));
            JapeWrapper priceDao = JapeFactory.dao("TabelaPreco");
            Collection<DynamicVO> priceEntries = priceDao.find("NUTAB = ?", new Object[]{ nutab });
            if (priceEntries.isEmpty()) {
                System.out.println("No price entries found for NUTAB: " + nutab);
            } else {
                PriceService priceService = new PriceService();
                for (DynamicVO priceEntry : priceEntries) {
                    try {
                        // Notify the PriceService about the deleted price entry
                        priceService.notifyRemoved(priceEntry);
                    } catch (Exception e) {
                        System.out.println("Error processing deleted price entry: " + e.getMessage());
                        continue; // Skip this entry if there's an error
                    }
                }
            }
        }
        // Mark the event as consumed
        persistenceEvent.setConsumed(true);
    }
}


/// main/java/hub/pulse/erp/service/events/RevenueEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class RevenueEventHandler implements EventoProgramavelJava {

    public RevenueEventHandler() {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeCommit(TransactionContext transactionContext) throws Exception {}
}

/// main/java/hub/pulse/erp/service/events/StockEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class StockEventHandler implements EventoProgramavelJava {
    /**
     * Default constructor.
     */
    public StockEventHandler() {}

    @Override
    public void beforeCommit(TransactionContext transactionContext) throws Exception {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        // Here you can add logic to handle after insert events if needed
        System.out.println("Processing after insert event for Stock...");

        // Mark the event as consumed
        persistenceEvent.setConsumed(true);
    }

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        // Here you can add logic to handle after update events if needed
        System.out.println("Processing after update event for Stock...");

        // Mark the event as consumed
        persistenceEvent.setConsumed(true);
    }

    @Override
    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {
        if (persistenceEvent.isConsumed()) {
            System.out.println("Event already consumed, skipping processing.");
            return; // If the event has already been consumed, skip processing
        }

        // Here you can add logic to handle after delete events if needed
        System.out.println("Processing after delete event for Stock...");

        // Mark the event as consumed
        persistenceEvent.setConsumed(true);
    }
}


/// main/java/hub/pulse/erp/service/events/SyncEventHandler.java ///
package hub.pulse.erp.service.events;

import br.com.sankhya.extensions.eventoprogramavel.EventoProgramavelJava;
import br.com.sankhya.jape.event.PersistenceEvent;
import br.com.sankhya.jape.event.TransactionContext;

public class SyncEventHandler implements EventoProgramavelJava {
    /**
     * Default constructor.
     */
    public SyncEventHandler() {}

    @Override
    public void beforeInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void beforeDelete(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterInsert(PersistenceEvent persistenceEvent) throws Exception {}

    @Override
    public void afterUpdate(PersistenceEvent persistenceEvent) throws Exception {}

    public void afterDelete(PersistenceEvent persistenceEvent) throws Exception {}

    public void beforeCommit(TransactionContext transactionContext) throws Exception {}
}


/// main/java/hub/pulse/erp/sync/BackgroundTaskManager.java ///
package hub.pulse.erp.sync;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class BackgroundTaskManager {
    private final ConcurrentHashMap<String, Future<?>> tasks;
    private final ExecutorService executorService;

    public BackgroundTaskManager() {
        this.tasks = new ConcurrentHashMap<>();
        this.executorService = Executors.newCachedThreadPool();
    }

    public void addTask(String taskId, Runnable task) {
        Future<?> future = executorService.submit(task);
        tasks.put(taskId, future);
    }

    public void removeTask(String taskId) {
        Future<?> future = tasks.remove(taskId);
        if (future != null) {
            future.cancel(true);
        }
    }

    public void executeTask(String taskId) {
        Future<?> future = tasks.get(taskId);
        if (future != null) {
            executorService.submit(() -> {
                try {
                    future.get();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        }
    }
}

/// main/java/hub/pulse/erp/sync/BackgroundTaskManagerTest.java ///
package hub.pulse.erp.sync;

import hub.pulse.async.processors.BackgroundTaskManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class BackgroundTaskManagerTest {

    private hub.pulse.async.processors.BackgroundTaskManager taskManager;
    private ExecutorService executorService;

    @BeforeEach
    public void setUp() {
        executorService = mock(ExecutorService.class);
        taskManager = new BackgroundTaskManager(executorService);
    }

    @Test
    public void testAddTask() {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);

        taskManager.addTask("task1", task);

        assertTrue(taskManager.getTasks().containsKey("task1"));
        assertEquals(future, taskManager.getTasks().get("task1"));
    }

    @Test
    public void testRemoveTask() {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);

        taskManager.addTask("task1", task);
        taskManager.removeTask("task1");

        assertFalse(taskManager.getTasks().containsKey("task1"));
        verify(future).cancel(true);
    }

    @Test
    public void testExecuteTask() throws Exception {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);
        when(future.get()).thenReturn(null);

        taskManager.addTask("task1", task);
        taskManager.executeTask("task1");

        verify(executorService).submit(any(Runnable.class));
        verify(future).get();
    }

    @Test
    public void testHandleTaskException() throws Exception {
        Runnable task = mock(Runnable.class);
        Future<?> future = mock(Future.class);
        when(executorService.submit(task)).thenReturn(future);
        when(future.get()).thenThrow(new ExecutionException(new RuntimeException("Test exception")));

        taskManager.addTask("task1", task);
        taskManager.executeTask("task1");

        verify(executorService).submit(any(Runnable.class));
        verify(future).get();
    }

    @Test
    public void testConcurrentTaskExecution() throws InterruptedException {
        Runnable task1 = mock(Runnable.class);
        Runnable task2 = mock(Runnable.class);
        Future<?> future1 = mock(Future.class);
        Future<?> future2 = mock(Future.class);
        when(executorService.submit(task1)).thenReturn(future1);
        when(executorService.submit(task2)).thenReturn(future2);

        taskManager.addTask("task1", task1);
        taskManager.addTask("task2", task2);

        long startTime = System.currentTimeMillis();
        taskManager.executeTask("task1");
        taskManager.executeTask("task2");
        long endTime = System.currentTimeMillis();

        verify(executorService, times(2)).submit(any(Runnable.class));
        assertTrue((endTime - startTime) < 1000); // Ensure tasks are executed in parallel
    }
}

/// main/java/hub/pulse/erp/sync/WebhookServer.java ///
package hub.pulse.erp.sync;

import spark.Service;

public class WebhookServer {
    public static void start() {
        Service http = Service.ignite().port(8085);
        http.post("/webhook", (req, res) -> {
            String payload = req.body();
            System.out.println("Received webhook: " + payload);
            return "OK";
        });
    }
}

/// main/java/hub/pulse/erp/sync/WebhookServerTest.java ///
package hub.pulse.erp.sync;

import hub.pulse.async.webhooks.WebhookServer;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class WebhookServerTest {

    @BeforeEach
    public void setUp() {
        WebhookServer.start();
        RestAssured.port = 8085;
    }

    @Test
    public void testServerStartsCorrectly() {
        Response response = given().get("/webhook");
        assertEquals(404, response.getStatusCode());
    }

    @Test
    public void testHandleWebhookRequest() {
        String payload = "{\"key\":\"value\"}";
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleEmptyPayload() {
        Response response = given()
                .header("Content-Type", "application/json")
                .body("")
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleInvalidJsonPayload() {
        String payload = "invalid json";
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleLargePayload() {
        StringBuilder payloadBuilder = new StringBuilder();
        for (int i = 0; i < 10000; i++) {
            payloadBuilder.append("a");
        }
        String payload = payloadBuilder.toString();
        Response response = given()
                .header("Content-Type", "application/json")
                .body(payload)
                .post("/webhook");
        assertEquals(200, response.getStatusCode());
        assertEquals("OK", response.getBody().asString());
    }

    @Test
    public void testHandleConcurrentRequests() throws InterruptedException {
        Runnable task = () -> {
            String payload = "{\"key\":\"value\"}";
            Response response = given()
                    .header("Content-Type", "application/json")
                    .body(payload)
                    .post("/webhook");
            assertEquals(200, response.getStatusCode());
            assertEquals("OK", response.getBody().asString());
        };

        Thread thread1 = new Thread(task);
        Thread thread2 = new Thread(task);
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
    }

    @Test
    public void testHandleUnexpectedHttpMethods() {
        Response response = given().put("/webhook");
        assertEquals(404, response.getStatusCode());

        response = given().delete("/webhook");
        assertEquals(404, response.getStatusCode());

        response = given().get("/webhook");
        assertEquals(404, response.getStatusCode());
    }
}

/// main/java/hub/pulse/integration/erp/ERPClient.java ///
package hub.pulse.integration.erp;

public interface ERPClient {
    void fetchData();
    void updateData();
}

/// main/java/hub/pulse/integration/erp/SankhyaERPClient.java ///
package hub.pulse.integration.erp;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sankhya.api.SankhyaAPI;
import sankhya.api.SankhyaException;

public class SankhyaERPClient implements ERPClient {
    private static final Logger logger = LoggerFactory.getLogger(SankhyaERPClient.class);
    private final SankhyaAPI sankhyaAPI;

    public SankhyaERPClient(SankhyaAPI sankhyaAPI) {
        this.sankhyaAPI = sankhyaAPI;
    }

    @Override
    public void fetchData() {
        try {
            // Implement the logic to fetch data from Sankhya ERP
            logger.info("Fetching data from Sankhya ERP");
            // Example: sankhyaAPI.fetchData();
        } catch (SankhyaException e) {
            logger.error("Error fetching data from Sankhya ERP", e);
        }
    }

    @Override
    public void updateData() {
        try {
            // Implement the logic to update data in Sankhya ERP
            logger.info("Updating data in Sankhya ERP");
            // Example: sankhyaAPI.updateData();
        } catch (SankhyaException e) {
            logger.error("Error updating data in Sankhya ERP", e);
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/FastChannelClient.java ///
package hub.pulse.integration.fastchannel;

public interface FastChannelClient {
    void fetchOrders();
    void processWebhookResponse(String payload);
    void fetchStock();
    void fetchPrices();
    void createOrder();
    void updateOrder();
    void updateStock();
    void updatePrices();
    void loginAuth();
}

/// main/java/hub/pulse/integration/fastchannel/api/ApiClientGenerator.java ///
package hub.pulse.integration.fastchannel.api;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class ApiClientGenerator {

    public void generateClients(String insomniaExportFilePath) throws IOException {
        String content = new String(Files.readAllBytes(Paths.get(insomniaExportFilePath)));
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(content);

        List<JsonNode> resources = rootNode.get("resources").findValues("_type");
        Map<String, List<JsonNode>> groupedResources = resources.stream()
                .collect(Collectors.groupingBy(node -> node.get("parentId").asText()));

        for (Map.Entry<String, List<JsonNode>> entry : groupedResources.entrySet()) {
            String parentId = entry.getKey();
            List<JsonNode> nodes = entry.getValue();

            // Generate interface
            String interfaceName = "Api" + parentId + "Client";
            generateInterface(interfaceName, nodes);

            // Generate implementation class
            String className = "Api" + parentId + "ClientImpl";
            generateClass(className, interfaceName, nodes);
        }
    }

    private void generateInterface(String interfaceName, List<JsonNode> nodes) {
        // Logic to generate interface based on nodes
    }

    private void generateClass(String className, String interfaceName, List<JsonNode> nodes) {
        // Logic to generate class based on nodes
    }

    public static void main(String[] args) {
        ApiClientGenerator generator = new ApiClientGenerator();
        try {
            generator.generateClients("path/to/Insomnia.json");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/ApiClientGeneratorTest.java ///
package hub.pulse.integration.fastchannel.api;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class ApiClientGeneratorTest {

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private JsonNode rootNode;

    @InjectMocks
    private ApiClientGenerator apiClientGenerator;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGenerateClients() throws IOException {
        String insomniaExportFilePath = "path/to/Insomnia.json";
        String content = new String(Files.readAllBytes(Paths.get(insomniaExportFilePath)));

        when(objectMapper.readTree(content)).thenReturn(rootNode);

        apiClientGenerator.generateClients(insomniaExportFilePath);

        verify(objectMapper, times(1)).readTree(content);
    }

    @Test
    public void testGenerateClientsExceptionHandling() throws IOException {
        String insomniaExportFilePath = "path/to/Insomnia.json";
        String content = new String(Files.readAllBytes(Paths.get(insomniaExportFilePath)));

        when(objectMapper.readTree(content)).thenThrow(new IOException("Test Exception"));

        try {
            apiClientGenerator.generateClients(insomniaExportFilePath);
        } catch (IOException e) {
            assertEquals("Test Exception", e.getMessage());
        }

        verify(objectMapper, times(1)).readTree(content);
    }

    @Test
    public void testGenerateInterface() {
        List<JsonNode> nodes = mock(List.class);
        apiClientGenerator.generateInterface("TestInterface", nodes);
        // Add assertions to verify the generated interface
    }

    @Test
    public void testGenerateClass() {
        List<JsonNode> nodes = mock(List.class);
        apiClientGenerator.generateClass("TestClass", "TestInterface", nodes);
        // Add assertions to verify the generated class
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/ApiContract.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;

import java.util.List;

public interface ApiContract {

    // Authentication endpoints
    String LOGIN_AUTH = "https://login.microsoftonline.com/fastchannel.com/oauth2/v2.0/token";

    // Stock endpoints
    String STOCK_BASE_URL = "https://api.commerce.fastchannel.com/stock-management/v1";
    String GET_STOCK = STOCK_BASE_URL + "/stock";
    String UPDATE_STOCK = STOCK_BASE_URL + "/stock"; // PUT para um produto especÃ­fico: /stock/{ProductId}

    // Order endpoints
    String ORDER_BASE_URL = "https://api.commerce.fastchannel.com/order-management/v1";
    String GET_ORDERS = ORDER_BASE_URL + "/orders";
    String CREATE_ORDER = ORDER_BASE_URL + "/orders"; // POST para criar
    String UPDATE_ORDER = ORDER_BASE_URL + "/orders"; // PUT para um pedido especÃ­fico: /orders/{OrderId}

    // Price endpoints
    String PRICE_BASE_URL = "https://api.commerce.fastchannel.com/price-management/v1";
    String GET_PRICES = PRICE_BASE_URL + "/prices";
    String GET_PRODUCT_PRICES = PRICE_BASE_URL + "/prices/{ProductId}"; // Substituir {ProductId} pelo ID real
    String SET_PRODUCT_PRICE = PRICE_BASE_URL + "/prices/{ProductId}"; // PUT, substituir {ProductId} pelo ID real
    String PRICE_BATCHES = PRICE_BASE_URL + "/prices/{ProductId}/batches"; // Substituir {ProductId} pelo ID real
    String PRICE_BATCH = PRICE_BASE_URL + "/prices/{ProductId}/batches/{BatchId}"; // Substituir {ProductId} e {BatchId}
    String FILTER_PRICE_BATCH = PRICE_BASE_URL + "/prices/{ProductId}/batches/filter/{Quantity}"; // Substituir {ProductId} e {Quantity}

    // Define methods for each endpoint

    void loginAuth();
    void getStock();
    void updateStock();
    void getOrders();
    void createOrder();
    void updateOrder();
    ApiResponse<List<Price>> getPrices();
    void updatePrices();

    ApiResponse<List<Price>> getProductPrices(String productId);
    ApiResponse<List<Price>> getPriceBatches(String productId);
    ApiResponse<Price> getPriceBatch(String productId, int batchId);
    ApiResponse<List<Price>> filterPriceBatches(String productId, int quantity);

    void updatePrice(String productId, Price price); // Method para atualizar preÃ§o por ID do produto
    void setProductPrice(String productId, Price price);
    void setPriceBatch(String productId, Price price);

    void createPrice(String productId, Price price); // Method para criar preÃ§o por ID do produto
    void deletePrice(String productId, int priceTableId); // Method para deletar preÃ§o por ID do produto e tabela de preÃ§os
    void createPriceBatch(String productId, Price price); // Method para criar lote de preÃ§os
    void updatePriceBatch(String productId, Price price); // Method para atualizar lote de preÃ§os
    void deletePriceBatch(String productId, int batchId); // Method para deletar lote de preÃ§os

    void createOrderInvoice(int orderId, Price price); // Method para criar fatura de pedido, se necessÃ¡rio
    void updateOrderInvoice(int orderId, Price price); // Method para atualizar fatura de pedido, se necessÃ¡rio
    void deleteOrderInvoice(int orderId); // Method para deletar fatura de pedido, se necessÃ¡rio

    void handlePriceError(String errorMessage); // Method para lidar com erros de preÃ§o
    void handleOrderError(String errorMessage); // Method para lidar com erros de pedido
    void handleStockError(String errorMessage); // Method para lidar com erros de estoque

    void handleAuthenticationError(String errorMessage); // Method para lidar com erros de autenticaÃ§Ã£o
    void handleApiResponseError(ApiResponse<?> response); // Method para lidar com erros de resposta da API
    void handleApiResponseSuccess(ApiResponse<?> response); // Method para lidar com respostas de sucesso da API
    void handleApiResponseWarning(ApiResponse<?> response); // Method para lidar com avisos de resposta da API
    void handleApiResponseInfo(ApiResponse<?> response); // Method para lidar com informaÃ§Ãµes de resposta da API
    void handleApiResponseDebug(ApiResponse<?> response); // Method para lidar com depuraÃ§Ã£o de resposta da API
    void handleApiResponseTrace(ApiResponse<?> response); // Method para lidar com rastreamento de resposta da API
    void handleApiResponseFatal(ApiResponse<?> response); // Method para lidar com respostas fatais da API
    void handleApiResponseUnknown(ApiResponse<?> response); // Method para lidar com respostas desconhecidas da API
    void handleApiResponseNotFound(ApiResponse<?> response); // Method para lidar com respostas nÃ£o encontradas da API
    void handleApiResponseUnauthorized(ApiResponse<?> response); // Method para lidar com respostas nÃ£o autorizadas da API
    void handleApiResponseForbidden(ApiResponse<?> response); // Method para lidar com respostas proibidas da API
    void handleApiResponseBadRequest(ApiResponse<?> response); // Method para lidar com respostas de solicitaÃ§Ã£o ruim da API
    void handleApiResponseInternalServerError(ApiResponse<?> response); // Method para lidar com erros internos do servidor da API

}

/// main/java/hub/pulse/integration/fastchannel/api/ConfigurationProperties.java ///
package hub.pulse.integration.fastchannel.api;

public @interface ConfigurationProperties {
    String prefix();
}

/// main/java/hub/pulse/integration/fastchannel/api/CreditApi.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.auth.AuthenticationManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.*;

public class CreditApi {
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    private static final String CREDIT_BASE_URL = "https://api.commerce.fastchannel.com/credit-management/v1";

    public CreditApi() {
        this.httpClient = HttpClient.newBuilder()
                .version(HttpClient.Version.HTTP_2)
                .connectTimeout(Duration.ofSeconds(10))
                .build();
        this.objectMapper = new ObjectMapper();
    }

    public String listCreditLimits(Map<String, Object> filters) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            StringBuilder queryParams = new StringBuilder("?");
            for (Map.Entry<String, Object> entry : filters.entrySet()) {
                if (entry.getValue() != null) {
                    queryParams.append(entry.getKey()).append("=").append(entry.getValue().toString()).append("&");
                }
            }
            String params = queryParams.toString();
            if (params.endsWith("&")) params = params.substring(0, params.length() - 1);
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(CREDIT_BASE_URL + "/limits" + params))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.err.println("Failed to list credit limits: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error listing credit limits: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    public String getCreditLimit(String customerDocument, Map<String, Object> filters) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            StringBuilder url = new StringBuilder(CREDIT_BASE_URL + "/limits/" + customerDocument);
            if (!filters.isEmpty()) {
                url.append("?");
                for (Map.Entry<String, Object> entry : filters.entrySet()) {
                    if (entry.getValue() != null) {
                        url.append(entry.getKey()).append("=").append(entry.getValue().toString()).append("&");
                    }
                }
                if (url.toString().endsWith("&")) url.setLength(url.length() - 1);
            }
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(url.toString()))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.err.println("Failed to get credit limit: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting credit limit: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    public boolean saveCreditLimit(String creditLimitPayloadJson) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .POST(HttpRequest.BodyPublishers.ofString(creditLimitPayloadJson))
                    .uri(URI.create(CREDIT_BASE_URL + "/limits"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error saving credit limit: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public boolean deleteCreditLimit(String customerDocument) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .DELETE()
                    .uri(URI.create(CREDIT_BASE_URL + "/limits/" + customerDocument))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error deleting credit limit: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/CreditApiTest.java ///
package hub.pulse.integration.fastchannel.api;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class CreditApiTest {
    private CreditApi creditApi;

    @BeforeEach
    void setUp() {
        creditApi = Mockito.spy(new CreditApi());
    }

    @Test
    void testListCreditLimits() {
        doReturn("result").when(creditApi).listCreditLimits(anyMap());
        assertEquals("result", creditApi.listCreditLimits(java.util.Map.of()));
    }

    @Test
    void testGetCreditLimit() {
        doReturn("result").when(creditApi).getCreditLimit(anyString(), anyMap());
        assertEquals("result", creditApi.getCreditLimit("12345678901", java.util.Map.of()));
    }

    @Test
    void testSaveCreditLimit() {
        doReturn(true).when(creditApi).saveCreditLimit(anyString());
        assertTrue(creditApi.saveCreditLimit("{\"CustomerDocument\":\"123\"}"));
    }

    @Test
    void testDeleteCreditLimit() {
        doReturn(true).when(creditApi).deleteCreditLimit(anyString());
        assertTrue(creditApi.deleteCreditLimit("12345678901"));
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/FastChannelPriceIntegration.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.service.FastChannelPriceService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FastChannelPriceIntegration {
    private final FastChannelPriceService priceService;
    private final PriceApi priceApi;

    public FastChannelPriceIntegration(FastChannelPriceService fastChannelPriceService, PriceApi priceApi) {
        this.priceService = fastChannelPriceService;
        this.priceApi = priceApi;
    }

    public void syncPricesFromFastChannel() {
        // LÃ³gica para buscar preÃ§os da API do FastChannel
        ApiResponse<List<Price>> apiResponse = priceService.getPrices();

        if (apiResponse != null && apiResponse.isSuccess()) {
            apiResponse.getPayload().forEach(priceService::createPrice);
        }
    }

    public void updatePriceOnFastChannel(Price price) {
        priceService.setProductPrice(price.getProductId(), convertToApiPrice(price));
    }

    private Price convertToApiPrice(Price price) {
        // LÃ³gica de conversÃ£o
        return price;  // Simplified for now
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/OrderApi.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.auth.AuthenticationManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import hub.pulse.integration.fastchannel.FastChannelClient;
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Order;
import hub.pulse.integration.fastchannel.model.OrderInvoice;
import hub.pulse.integration.fastchannel.model.Price;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class OrderApi implements ApiContract, FastChannelClient {
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;

    public OrderApi() {
        this.httpClient = HttpClient.newBuilder()
                .version(HttpClient.Version.HTTP_2)
                .connectTimeout(Duration.ofSeconds(10))
                .build();
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public void getOrders() {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(GET_ORDERS))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                // Parse the response and return the orders
                // This will depend on your specific response format
                System.out.println("Orders retrieved successfully: " + response.body());
            } else {
                System.err.println("Failed to retrieve orders: " + response.statusCode() + " - " + response.body());
            }
        } catch (Exception e) {
            System.err.println("Error getting orders: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Get orders with filtering parameters
     *
     * @param isSynched Filter by sync status
     * @param createdAfter Filter by creation date
     * @param currentStatusIds Filter by status IDs
     * @param pageNumber Page number for pagination
     * @param pageSize Items per page
     * @return List of Order objects
     */
    public List<Order> getOrders(Boolean isSynched, String createdAfter, List<Integer> currentStatusIds,
                                Integer pageNumber, Integer pageSize) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            // Build query parameters
            StringBuilder queryParams = new StringBuilder("?");
            if (isSynched != null) {
                queryParams.append("IsSynched=").append(isSynched).append("&");
            }
            if (createdAfter != null) {
                queryParams.append("CreatedAfter=").append(createdAfter).append("&");
            }
            if (currentStatusIds != null && !currentStatusIds.isEmpty()) {
                queryParams.append("CurrentStatusIds=").append(String.join(",",
                        currentStatusIds.stream().map(String::valueOf).toArray(String[]::new))).append("&");
            }
            if (pageNumber != null) {
                queryParams.append("PageNumber=").append(pageNumber).append("&");
            }
            if (pageSize != null) {
                queryParams.append("PageSize=").append(pageSize);
            }

            // Remove trailing & if present
            String params = queryParams.toString();
            if (params.endsWith("&")) {
                params = params.substring(0, params.length() - 1);
            }

            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(GET_ORDERS + params))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                // Parse the JSON response into Order objects
                // This is a simplified example - you'll need to adjust based on actual response format
                return objectMapper.readValue(response.body(),
                        objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
            } else {
                System.err.println("Failed to retrieve orders: " + response.statusCode() + " - " + response.body());
                return new ArrayList<>();
            }
        } catch (Exception e) {
            System.err.println("Error getting orders: " + e.getMessage());
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    @Override
    public void createOrder() {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            // You would need to create the order JSON here
            String orderJson = "{ \"example\": \"order data\" }";

            HttpRequest request = HttpRequest.newBuilder()
                    .POST(HttpRequest.BodyPublishers.ofString(orderJson))
                    .uri(URI.create(CREATE_ORDER))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                System.out.println("Order created successfully: " + response.body());
            } else {
                System.err.println("Failed to create order: " + response.statusCode() + " - " + response.body());
            }
        } catch (Exception e) {
            System.err.println("Error creating order: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Create a new order with the specified data
     *
     * @param order The order data to create
     * @return true if successful, false otherwise
     */
    public boolean createOrder(Order order) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            // Convert order object to JSON
            String orderJson = objectMapper.writeValueAsString(order);

            HttpRequest request = HttpRequest.newBuilder()
                    .POST(HttpRequest.BodyPublishers.ofString(orderJson))
                    .uri(URI.create(CREATE_ORDER))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error creating order: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public void updateOrder() {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            // You would need to create the update order JSON here
            String updateOrderJson = "{ \"example\": \"update order data\" }";

            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(updateOrderJson))
                    .uri(URI.create(UPDATE_ORDER))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                System.out.println("Order updated successfully: " + response.body());
            } else {
                System.err.println("Failed to update order: " + response.statusCode() + " - " + response.body());
            }
        } catch (Exception e) {
            System.err.println("Error updating order: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Update an existing order
     *
     * @param orderId The ID of the order to update
     * @param order The updated order data
     * @return true if successful, false otherwise
     */
    public boolean updateOrder(int orderId, Order order) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            // Convert order object to JSON
            String orderJson = objectMapper.writeValueAsString(order);

            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(orderJson))
                    .uri(URI.create(UPDATE_ORDER + "/" + orderId))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error updating order: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Get order invoice details
     *
     * @param orderId The ID of the order
     * @param invoiceNumber The invoice number
     * @return The invoice details or null if not found
     */
    public OrderInvoice getOrderInvoice(int orderId, String invoiceNumber) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/invoices/" + invoiceNumber))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), OrderInvoice.class);
            } else {
                System.err.println("Failed to get invoice: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting invoice: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Delete an order invoice
     *
     * @param orderId The ID of the order
     * @param invoiceNumber The invoice number to delete
     * @return true if successful, false otherwise
     */
    public boolean deleteOrderInvoice(int orderId, String invoiceNumber) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();

            HttpRequest request = HttpRequest.newBuilder()
                    .DELETE()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/invoices/" + invoiceNumber))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error deleting invoice: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Get order details by OrderId
     */
    public Order getOrderDetails(int orderId) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), Order.class);
            } else {
                System.err.println("Failed to get order details: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting order details: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Get current status of an order
     */
    public String getOrderCurrentStatus(int orderId) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/status"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.err.println("Failed to get order status: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting order status: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Set current status of an order
     */
    public boolean setOrderCurrentStatus(int orderId, String statusPayloadJson) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(statusPayloadJson))
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/status"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error setting order status: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Delete current status of an order
     */
    public boolean deleteOrderCurrentStatus(int orderId) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .DELETE()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/status"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error deleting order status: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Get order sync status
     */
    public String getOrderSyncStatus(int orderId) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/sync"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.err.println("Failed to get order sync status: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting order sync status: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Set order sync status
     */
    public boolean setOrderSyncStatus(int orderId, String syncPayloadJson) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(syncPayloadJson))
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/sync"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error setting order sync status: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Get order tracking info
     */
    public String getOrderTracking(int orderId, String trackingCode) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/tracking/" + trackingCode))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.err.println("Failed to get order tracking: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting order tracking: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Set order tracking info
     */
    public boolean setOrderTracking(int orderId, String trackingPayloadJson) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(trackingPayloadJson))
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/tracking"))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error setting order tracking: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Delete order tracking info
     */
    public boolean deleteOrderTracking(int orderId, String trackingCode) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .DELETE()
                    .uri(URI.create(ORDER_BASE_URL + "/orders/" + orderId + "/tracking/" + trackingCode))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error deleting order tracking: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    // Other methods from ApiContract
    @Override
    public void loginAuth() {
        // This should be implemented in AuthenticationManager
        System.out.println("Login authentication should be handled by AuthenticationManager");
    }

    @Override
    public void getStock() {
        // This should be implemented in StockApi
        System.out.println("getStock should be implemented in StockApi");
    }

    @Override
    public ApiResponse<List<Price>> getPrices() {
        // This should be implemented in PriceApi
        System.out.println("getPrices should be implemented in PriceApi");
        return null;
    }

    // Methods from FastChannelClient
    @Override
    public void fetchOrders() {
        getOrders();
    }

    @Override
    public void processWebhookResponse(String payload) {
        try {
            // Parse the webhook payload and process it
            System.out.println("Processing webhook response: " + payload);
            // You would typically parse the JSON and update your database or trigger other actions
        } catch (Exception e) {
            System.err.println("Error processing webhook response: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public void fetchStock() {
        // Delegate to StockApi
        System.out.println("fetchStock should be implemented in StockApi");
    }

    @Override
    public void fetchPrices() {
        // Delegate to PriceApi
        System.out.println("fetchPrices should be implemented in PriceApi");
    }

    @Override
    public void updateStock() {
        // Delegate to StockApi
        System.out.println("updateStock should be implemented in StockApi");
    }

    @Override
    public void updatePrices() {
        // Delegate to PriceApi
        System.out.println("updatePrices should be implemented in PriceApi");
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/OrderApiTest.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.Order;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class OrderApiTest {
    private OrderApi orderApi;

    @BeforeEach
    void setUp() {
        orderApi = Mockito.spy(new OrderApi());
    }

    @Test
    void testGetOrdersReturnsList() {
        doReturn(List.of(new Order())).when(orderApi).getOrders(any(), any(), any(), any(), any());
        List<Order> orders = orderApi.getOrders(null, null, null, 1, 10);
        assertNotNull(orders);
        assertFalse(orders.isEmpty());
    }

    @Test
    void testGetOrderDetailsReturnsOrder() {
        Order order = new Order();
        doReturn(order).when(orderApi).getOrderDetails(anyInt());
        assertNotNull(orderApi.getOrderDetails(123));
    }

    @Test
    void testSetOrderCurrentStatus() {
        doReturn(true).when(orderApi).setOrderCurrentStatus(anyInt(), anyString());
        assertTrue(orderApi.setOrderCurrentStatus(123, "{\"CurrentStatusId\":2}"));
    }

    @Test
    void testGetOrderTracking() {
        doReturn("tracking").when(orderApi).getOrderTracking(anyInt(), anyString());
        assertEquals("tracking", orderApi.getOrderTracking(123, "TRACK1"));
    }

    @Test
    void testCreateOrderInvoice() {
        // Supondo que exista o mÃ©todo createOrderInvoice
        // doReturn(true).when(orderApi).createOrderInvoice(anyInt(), any(OrderInvoice.class));
        // assertTrue(orderApi.createOrderInvoice(123, new OrderInvoice()));
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/PriceApi.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.config.PriceConfig;
import hub.pulse.integration.fastchannel.exception.InvalidPriceException;
import hub.pulse.integration.fastchannel.exception.PriceNotFoundException;
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.model.PriceBatch;
import hub.pulse.integration.fastchannel.service.FastChannelPriceService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/prices")
public class PriceApi {
    private static final Logger logger = LoggerFactory.getLogger(PriceApi.class);
    private final FastChannelPriceService fastChannelPriceService;
    private final PriceConfig priceConfig;

    public PriceApi(FastChannelPriceService fastChannelPriceService, PriceConfig priceConfig) {
        this.fastChannelPriceService = fastChannelPriceService;
        this.priceConfig = priceConfig;
    }

    @GetMapping
    public ResponseEntity<ApiResponse<List<Price>>> getPrices(
            @RequestParam(required = false) List<String> productIds,
            @RequestParam(required = false) List<Integer> priceTableIds,
            @RequestParam(required = false) Integer pageNumber,
            @RequestParam(required = false) Integer pageSize) {
        ApiResponse<List<Price>> response = fastChannelPriceService.getPrices(productIds, priceTableIds, pageNumber, pageSize);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{productId}")
    public ResponseEntity<ApiResponse<List<Price>>> getProductPrices(@PathVariable String productId) {
        ApiResponse<List<Price>> response = fastChannelPriceService.getProductPrices(productId);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{productId}/batches")
    public ResponseEntity<ApiResponse<List<PriceBatch>>> getProductPriceBatches(
            @PathVariable String productId,
            @RequestParam(required = false) Integer priceTableId,
            @RequestParam(required = false) Boolean status,
            @RequestParam(required = false) Integer quantity) {
        ApiResponse<List<PriceBatch>> response = fastChannelPriceService.getProductPriceBatches(productId, priceTableId, status, quantity);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{productId}/batches/{batchId}")
    public ResponseEntity<ApiResponse<PriceBatch>> getProductPriceBatch(
            @PathVariable String productId,
            @PathVariable int batchId) {
        ApiResponse<PriceBatch> response = fastChannelPriceService.getProductPriceBatch(productId, batchId);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/{productId}/batches")
    public ResponseEntity<ApiResponse<Void>> createProductPriceBatch(
            @PathVariable String productId,
            @RequestBody @Validated PriceBatch batch) {
        ApiResponse<Void> response = fastChannelPriceService.createProductPriceBatch(productId, batch);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PutMapping("/{productId}/batches/{batchId}")
    public ResponseEntity<ApiResponse<Void>> updateProductPriceBatch(
            @PathVariable String productId,
            @PathVariable int batchId,
            @RequestBody @Validated PriceBatch batch) {
        ApiResponse<Void> response = fastChannelPriceService.updateProductPriceBatch(productId, batchId, batch);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/{productId}/batches/{batchId}")
    public ResponseEntity<ApiResponse<Void>> deleteProductPriceBatch(
            @PathVariable String productId,
            @PathVariable int batchId) {
        ApiResponse<Void> response = fastChannelPriceService.deleteProductPriceBatch(productId, batchId);
        return ResponseEntity.ok(response);
    }

    public void setMaxRetries(int i) {
        // Method para definir o nÃºmero mÃ¡ximo de tentativas, se necessÃ¡rio
        // Pode ser usado para configurar a lÃ³gica de retry em chamadas de API
        priceConfig.setMaxRetries(i);
    }

    @PostMapping("/{productId}/prices")
    public ResponseEntity<ApiResponse<Void>> setProductPrice(
            @PathVariable String productId,
            @RequestBody @Validated Price price) {
        ApiResponse<Void> response = fastChannelPriceService.setProductPrice(productId, price);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/{productId}/prices")
    public ResponseEntity<ApiResponse<Void>> deleteProductPrice(
            @PathVariable String productId,
            @RequestParam Integer priceTableId) {
        ApiResponse<Void> response = fastChannelPriceService.deleteProductPrice(productId, priceTableId);
        return ResponseEntity.ok(response);
    }
}

// Handler global para exceÃ§Ãµes
@RestControllerAdvice
class PriceApiExceptionHandler {
    @ExceptionHandler(hub.pulse.integration.fastchannel.exception.PriceNotFoundException.class)
    public ResponseEntity<ApiResponse<Void>> handleNotFound(PriceNotFoundException ex) {
        ApiResponse<Void> response = new ApiResponse<>(false, ex.getMessage(), null);
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }

    @ExceptionHandler(hub.pulse.integration.fastchannel.exception.InvalidPriceException.class)
    public ResponseEntity<ApiResponse<Void>> handleInvalid(InvalidPriceException ex) {
        ApiResponse<Void> response = new ApiResponse<>(false, ex.getMessage(), null);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Void>> handleGeneric(Exception ex) {
        ApiResponse<Void> response = new ApiResponse<>(false, "Erro interno inesperado", null);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/PriceApiIntegrationTest.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class PriceApiIntegrationTest {
    static PriceApi priceApi;

    @BeforeAll
    static void setup() {
        // Se necessÃ¡rio, ajuste para passar um PriceConfig real
        priceApi = new PriceApi(null, null);
        priceApi.setMaxRetries(1);
    }

    @Test
    void testGetPrices() {
        ApiResponse<List<Price>> response = priceApi.getPrices(
                null, // productIds
                null, // priceTableIds
                1,    // pageNumber
                10    // pageSize
        ).getBody();
        assertNotNull(response, "A resposta nÃ£o pode ser nula");
        assertTrue(response.isSuccess(), "A resposta deve ser sucesso");
        assertNotNull(response.getPayload(), "O payload nÃ£o pode ser nulo");
        System.out.println("Total de preÃ§os retornados: " + response.getPayload().size());
    }

    @Test
    void testGetProductPrices() {
        // Substitua por um SKU real existente na sua base FastChannel
        String productId = "SKU_DE_TESTE";
        ApiResponse<List<Price>> response = priceApi.getProductPrices(productId).getBody();
        assertNotNull(response, "A resposta nÃ£o pode ser nula");
        assertTrue(response.isSuccess(), "A resposta deve ser sucesso");
        System.out.println("PreÃ§os do produto: " + productId + " => " + response.getPayload());
    }

    @Test
    void testSetProductPrice() {
        // Substitua por um SKU real existente na sua base FastChannel
        String productId = "SKU_DE_TESTE";
        Price price = new Price();
        price.setProductId(productId);
        price.setPriceTableId(BigDecimal.ONE); // Ajuste conforme sua tabela
        price.setListPrice(new BigDecimal(1000)); // R$ 10,00 em centavos
        price.setSalePrice(new BigDecimal(900));  // R$ 9,00 em centavos
        ApiResponse<Void> response = priceApi.setProductPrice(
                productId,
                price
        ).getBody();
        assertNotNull(response, "A resposta nÃ£o pode ser nula");
        assertTrue(response.isSuccess(), "A atualizaÃ§Ã£o de preÃ§o deve ser sucesso");
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/PriceApiTest.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.model.PriceBatch;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PriceApiTest {
    private PriceApi priceApi;

    @BeforeEach
    void setUp() {
        // Mock PriceConfig ou use um stub real se necessÃ¡rio
        priceApi = Mockito.spy(new PriceApi(null));
        priceApi.setMaxRetries(1); // Para evitar loops longos em testes
    }

    @Test
    void testGetPricesReturnsSuccess() {
        // Simula resposta da API
        doReturn(new ApiResponse<List<Price>>() {{
            setSuccess(true);
            setPayload(Collections.singletonList(new Price()));
        }}).when(priceApi).getPrices();

        ApiResponse<List<Price>> response = priceApi.getPrices();
        assertNotNull(response);
        assertTrue(response.isSuccess());
        assertNotNull(response.getPayload());
    }

    @Test
    void testSetProductPriceHandlesSuccess() {
        Price price = new Price();
        price.setProductId("SKU123");
        doReturn(new ApiResponse<Void>() {{
            setSuccess(true);
        }}).when(priceApi).setProductPrice(eq("SKU123"), any(Price.class));

        ApiResponse<Void> resp = priceApi.setProductPrice("SKU123", price);
        assertNotNull(resp);
        assertTrue(resp.isSuccess());
    }

    @Test
    void testFindByProductAndPriceTableReturnsCorrectPrice() {
        Price price = new Price();
        price.setProductId("SKU123");
        price.setPriceTableId(1);
        doReturn(new ApiResponse<List<Price>>() {{
            setSuccess(true);
            setPayload(Arrays.asList(price));
        }}).when(priceApi).getProductPrices("SKU123");

        assertTrue(priceApi.findByProductAndPriceTable("SKU123", 1).isPresent());
    }

    @Test
    void testFindByProductIdReturnsList() {
        Price price = new Price();
        price.setProductId("SKU123");
        doReturn(new ApiResponse<List<Price>>() {{
            setSuccess(true);
            setPayload(Arrays.asList(price));
        }}).when(priceApi).getProductPrices("SKU123");

        List<Price> prices = priceApi.findByProductId("SKU123");
        assertFalse(prices.isEmpty());
    }

    @Test
    void testGetProductPriceBatchesReturnsList() {
        doReturn(new ApiResponse<List<PriceBatch>>() {{
            setSuccess(true);
            setPayload(Collections.singletonList(new PriceBatch()));
        }}).when(priceApi).getProductPriceBatches(eq("SKU123"), any(), any(), any());

        ApiResponse<List<PriceBatch>> resp = priceApi.getProductPriceBatches("SKU123", 1, true, null);
        assertNotNull(resp);
        assertTrue(resp.isSuccess());
        assertFalse(resp.getPayload().isEmpty());
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/PriceServiceTest.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.config.PriceConfig;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.repository.PriceRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.mockito.Mockito.*;

class PriceServiceTest {
    private PriceService priceService;
    private PriceRepository priceRepository;
    private PriceConfig priceConfig;

    @BeforeEach
    void setUp() {
        priceRepository = mock(PriceRepository.class);
        priceConfig = mock(PriceConfig.class);
        when(priceConfig.getDefaultPriceTableId()).thenReturn(1);
        priceService = new PriceService(priceRepository, priceConfig);
    }

    @Test
    void testCreatePriceSetsDefaultTableId() {
        Price price = new Price();
        price.setListPrice(1000);
        when(priceRepository.save(any(Price.class))).thenReturn(price);
        Price created = priceService.createPrice(price);
        assertEquals(1, created.getPriceTableId());
    }

    @Test
    void testUpdatePriceValidatesAndUpdates() {
        Price price = new Price();
        price.setListPrice(1000);
        when(priceRepository.update(any(Price.class))).thenReturn(price);
        Price updated = priceService.updatePrice(price);
        assertEquals(1000, updated.getListPrice());
    }

    @Test
    void testGetPricesByProductReturnsList() {
        Price price = new Price();
        price.setProductId("SKU123");
        when(priceRepository.findByProductId("SKU123")).thenReturn(Collections.singletonList(price));
        assertFalse(priceService.getPricesByProduct("SKU123").isEmpty());
    }

    @Test
    void testGetPriceForProductReturnsCorrect() {
        Price price = new Price();
        price.setProductId("SKU123");
        price.setPriceTableId(1);
        when(priceRepository.findByProductAndPriceTable("SKU123", 1)).thenReturn(java.util.Optional.of(price));
        Price found = priceService.getPriceForProduct("SKU123", null);
        assertEquals("SKU123", found.getProductId());
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/RetryableHttpClient.java ///
package hub.pulse.integration.fastchannel.api;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.function.Supplier;

public class RetryableHttpClient {
    private static final Logger logger = LoggerFactory.getLogger(RetryableHttpClient.class);

    public <T> T executeWithRetry(Supplier<T> action, int maxRetries) {
        int attempt = 0;
        while (true) {
            try {
                return action.get();
            } catch (Exception e) {
                attempt++;
                logger.warn("Attempt {} failed: {}", attempt, e.getMessage());
                if (attempt >= maxRetries) {
                    logger.error("Max retries reached. Giving up.", e);
                    throw e;
                }
                try {
                    Thread.sleep(1000L * attempt); // Exponential backoff
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Retry interrupted", ie);
                }
            }
        }
    }
}


/// main/java/hub/pulse/integration/fastchannel/api/StockApi.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.auth.AuthenticationManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import hub.pulse.integration.fastchannel.model.Stock;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.*;

public class StockApi {
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    private static final String STOCK_BASE_URL = "https://api.commerce.fastchannel.com/stock-management/v1";

    public StockApi() {
        this.httpClient = HttpClient.newBuilder()
                .version(HttpClient.Version.HTTP_2)
                .connectTimeout(Duration.ofSeconds(10))
                .build();
        this.objectMapper = new ObjectMapper();
    }

    public List<Stock> listProductStock(Integer storageId, List<Integer> storageIds, String productId, List<String> productIds, String searchText, Integer pageNumber, Integer pageSize) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            StringBuilder queryParams = new StringBuilder("?");
            if (storageId != null) queryParams.append("StorageId=").append(storageId).append("&");
            if (storageIds != null && !storageIds.isEmpty()) queryParams.append("StorageIds=").append(String.join(",", storageIds.stream().map(String::valueOf).toArray(String[]::new))).append("&");
            if (productId != null) queryParams.append("ProductId=").append(productId).append("&");
            if (productIds != null && !productIds.isEmpty()) queryParams.append("ProductIds=").append(String.join(",", productIds)).append("&");
            if (searchText != null) queryParams.append("SearchText=").append(searchText).append("&");
            if (pageNumber != null) queryParams.append("PageNumber=").append(pageNumber).append("&");
            if (pageSize != null) queryParams.append("PageSize=").append(pageSize);
            String params = queryParams.toString();
            if (params.endsWith("&")) params = params.substring(0, params.length() - 1);
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(STOCK_BASE_URL + "/stock" + params))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return Arrays.asList(objectMapper.readValue(response.body(), Stock[].class));
            } else {
                System.err.println("Failed to list stock: " + response.statusCode() + " - " + response.body());
                return Collections.emptyList();
            }
        } catch (Exception e) {
            System.err.println("Error listing stock: " + e.getMessage());
            e.printStackTrace();
            return Collections.emptyList();
        }
    }

    public Stock getProductStock(String productId, Integer storageId) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            StringBuilder url = new StringBuilder(STOCK_BASE_URL + "/stock/" + productId);
            if (storageId != null) url.append("?StorageId=").append(storageId);
            HttpRequest request = HttpRequest.newBuilder()
                    .GET()
                    .uri(URI.create(url.toString()))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), Stock.class);
            } else {
                System.err.println("Failed to get product stock: " + response.statusCode() + " - " + response.body());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error getting product stock: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    public boolean setProductStock(String productId, String stockPayloadJson) {
        try {
            Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
            HttpRequest request = HttpRequest.newBuilder()
                    .PUT(HttpRequest.BodyPublishers.ofString(stockPayloadJson))
                    .uri(URI.create(STOCK_BASE_URL + "/stock/" + productId))
                    .header("Authorization", headers.get("Authorization"))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            System.err.println("Error setting product stock: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/api/StockApiTest.java ///
package hub.pulse.integration.fastchannel.api;

import hub.pulse.integration.fastchannel.model.Stock;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StockApiTest {
    private StockApi stockApi;

    @BeforeEach
    void setUp() {
        stockApi = Mockito.spy(new StockApi());
    }

    @Test
    void testListProductStockReturnsList() {
        doReturn(List.of(new Stock())).when(stockApi).listProductStock(any(), any(), any(), any(), any(), any(), any());
        List<Stock> stocks = stockApi.listProductStock(null, null, null, null, null, 1, 10);
        assertNotNull(stocks);
        assertFalse(stocks.isEmpty());
    }

    @Test
    void testGetProductStockReturnsStock() {
        Stock stock = new Stock();
        doReturn(stock).when(stockApi).getProductStock(anyString(), any());
        assertNotNull(stockApi.getProductStock("SKU123", null));
    }

    @Test
    void testSetProductStock() {
        doReturn(true).when(stockApi).setProductStock(anyString(), anyString());
        assertTrue(stockApi.setProductStock("SKU123", "{\"Quantity\":100}"));
    }
}

/// main/java/hub/pulse/integration/fastchannel/auth/AuthenticationManager.java ///
package hub.pulse.integration.fastchannel.auth;

import org.json.JSONObject;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.locks.ReentrantLock;

public class AuthenticationManager {
    private static AuthenticationManager instance;
    private String token;
    private Date tokenExpiration;
    private final ReentrantLock lock = new ReentrantLock();

    // ParÃ¢metros fixos de produÃ§Ã£o (pode externalizar para config/env se desejar)
    private static final String TOKEN_URL = "https://login.microsoftonline.com/c584af66-29c1-4075-b358-8194a131f42f/oauth2/v2.0/token";
    private static final String CLIENT_ID = "476c61c9-400d-4425-ad8f-ae7fcb169210";
    private static final String CLIENT_SECRET = "66G7PjkU45u_..3O8_~~h4Gzpvr~IqTLbn";
    private static final String SCOPE = "api://efc01b40-db71-45fd-b196-93fdbc61fd0b/.default";
    private static final String GRANT_TYPE = "client_credentials";

    private AuthenticationManager() {}

    public static AuthenticationManager getInstance() {
        if (instance == null) {
            synchronized (AuthenticationManager.class) {
                if (instance == null) {
                    instance = new AuthenticationManager();
                }
            }
        }
        return instance;
    }

    public String getToken() {
        lock.lock();
        try {
            if (isTokenExpired()) {
                refreshToken();
            }
            return token;
        } finally {
            lock.unlock();
        }
    }

    private boolean isTokenExpired() {
        return token == null || tokenExpiration == null || new Date().after(tokenExpiration);
    }

    private void refreshToken() {
        try {
            String body = "grant_type=" + GRANT_TYPE +
                    "&client_id=" + CLIENT_ID +
                    "&client_secret=" + CLIENT_SECRET +
                    "&scope=" + SCOPE;
            URL url = new URL(TOKEN_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.setDoOutput(true);
            try (OutputStream os = conn.getOutputStream()) {
                os.write(body.getBytes(StandardCharsets.UTF_8));
            }
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                String response;
                try (Scanner scanner = new Scanner(conn.getInputStream(), StandardCharsets.UTF_8)) {
                    response = scanner.useDelimiter("\\A").next();
                }
                JSONObject json = new JSONObject(response);
                this.token = json.getString("access_token");
                int expiresIn = json.getInt("expires_in");
                this.tokenExpiration = new Date(System.currentTimeMillis() + (expiresIn - 60) * 1000L); // 1 min de margem
            } else {
                throw new RuntimeException("Failed to get token: HTTP " + responseCode);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error refreshing token", e);
        }
    }

    public void setToken(String token, Date tokenExpiration) {
        lock.lock();
        try {
            this.token = token;
            this.tokenExpiration = tokenExpiration;
        } finally {
            lock.unlock();
        }
    }

    public Map<String, String> getHeaders() {
        Map<String, String> headers = new HashMap<>();
        headers.put("Authorization", "Bearer " + getToken());
        headers.put("Accept", "application/json");
        return headers;
    }
}

/// main/java/hub/pulse/integration/fastchannel/auth/AuthenticationManagerIntegrationTest.java ///
package hub.pulse.integration.fastchannel.auth;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AuthenticationManagerIntegrationTest {
    @Test
    void testRealTokenAcquisition() {
        AuthenticationManager authManager = AuthenticationManager.getInstance();
        String token = authManager.getToken();
        assertNotNull(token);
        assertTrue(token.length() > 100); // Token JWT Ã© grande
        System.out.println("Token obtido: " + token.substring(0, 40) + "...");
    }
}

/// main/java/hub/pulse/integration/fastchannel/auth/AuthenticationManagerTest.java ///
package hub.pulse.integration.fastchannel.auth;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class AuthenticationManagerTest {
    private AuthenticationManager authManager;

    @BeforeEach
    void setUp() {
        authManager = AuthenticationManager.getInstance();
    }

    @Test
    void testSetAndGetToken() {
        String token = "test-token";
        Date expiration = new Date(System.currentTimeMillis() + 60000); // 1 min no futuro
        authManager.setToken(token, expiration);
        assertEquals(token, authManager.getToken());
    }

    @Test
    void testTokenExpirationTriggersRefresh() {
        String token = "expired-token";
        Date expiration = new Date(System.currentTimeMillis() - 60000); // 1 min no passado
        authManager.setToken(token, expiration);
        // Como refreshToken() nÃ£o implementa lÃ³gica real, getToken() retorna null
        assertNull(authManager.getToken());
    }

    @Test
    void testGetHeadersIncludesAuthorization() {
        String token = "header-token";
        Date expiration = new Date(System.currentTimeMillis() + 60000);
        authManager.setToken(token, expiration);
        assertTrue(authManager.getHeaders().get("Authorization").contains(token));
    }
}

/// main/java/hub/pulse/integration/fastchannel/client/PriceApiClient.java ///
package hub.pulse.integration.fastchannel.client;

import hub.pulse.integration.erp.SankhyaERPClient;
import hub.pulse.integration.fastchannel.api.PriceApi;
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.model.PriceBatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * Client class to interact with FastChannel PriceApi
 * This class serves as a bridge between Sankhya ERP and FastChannel API
 */
public class PriceApiClient {
    private static final Logger logger = LoggerFactory.getLogger(PriceApiClient.class);
    private final PriceApi priceApi;
    private final SankhyaERPClient sankhyaClient;

    public PriceApiClient(PriceApi priceApi, SankhyaERPClient sankhyaClient) {
        this.priceApi = priceApi;
        this.sankhyaClient = sankhyaClient;
    }

    /**
     * Sync product prices from Sankhya to FastChannel
     * 
     * @param productIds List of product IDs to sync
     * @return Number of products successfully synced
     */
    public int syncPricesFromERP(List<String> productIds) {
        logger.info("Starting price sync from Sankhya to FastChannel for {} products", productIds.size());
        int successCount = 0;
        
        try {
            for (String productId : productIds) {
                try {
                    Price price = fetchPriceFromSankhya(productId);
                    if (price != null) {
                        ApiResponse<Void> response = priceApi.setProductPrice(productId, price);
                        if (response != null && response.isSuccess()) {
                            successCount++;
                            logger.info("Successfully updated price for product {}", productId);
                        } else {
                            logger.error("Failed to update price for product {}: {}", productId, response != null ? response.getHttpStatusCode() : "null response");
                        }
                    } else {
                        logger.warn("No price found in Sankhya for product {}", productId);
                    }
                } catch (Exception e) {
                    logger.error("Error syncing price for product {}: {}", productId, e.getMessage());
                }
            }
            logger.info("Completed price sync. {}/{} products successfully synced", successCount, productIds.size());
            return successCount;
        } catch (Exception e) {
            logger.error("Error during price sync: {}", e.getMessage());
            return successCount;
        }
    }
    
    /**
     * Sync product prices from FastChannel to Sankhya
     * 
     * @param productIds List of product IDs to sync
     * @return Number of products successfully synced
     */
    public int syncPricesToERP(List<String> productIds) {
        logger.info("Starting price sync from FastChannel to Sankhya for {} products", productIds.size());
        int successCount = 0;
        try {
            for (String productId : productIds) {
                try {
                    ApiResponse<List<Price>> response = priceApi.getProductPrices(productId);
                    List<Price> prices = (response != null && response.isSuccess()) ? response.getPayload() : null;
                    if (prices != null && !prices.isEmpty()) {
                        boolean updated = updatePricesInSankhya(productId, prices);
                        if (updated) {
                            successCount++;
                            logger.info("Successfully updated prices in Sankhya for product {}", productId);
                        } else {
                            logger.error("Failed to update prices in Sankhya for product {}", productId);
                        }
                    } else {
                        logger.warn("No prices found in FastChannel for product {}", productId);
                    }
                } catch (Exception e) {
                    logger.error("Error syncing prices for product {}: {}", productId, e.getMessage());
                }
            }
            logger.info("Completed price sync to Sankhya. {}/{} products successfully synced", successCount, productIds.size());
            return successCount;
        } catch (Exception e) {
            logger.error("Error during price sync to Sankhya: {}", e.getMessage());
            return successCount;
        }
    }
    
    /**
     * This method would fetch price data from Sankhya ERP
     * Implement the actual logic to fetch from Sankhya
     */
    private Price fetchPriceFromSankhya(String productId) {
        // This is a placeholder - implement actual fetching logic
        logger.info("Fetching price from Sankhya for product {}", productId);
        
        try {
            // Example implementation - replace with actual Sankhya API call
            // sankhyaClient.fetchData() would be used here
            
            // Simulating data for example purposes
            Price price = new Price();
            price.setId(productId);
            price.setPriceTableId(1); // Default price table ID
            price.setListPrice(1000); // R$ 10,00 in centavos
            price.setSalePrice(900);  // R$ 9,00 in centavos
            
            return price;
        } catch (Exception e) {
            logger.error("Error fetching price from Sankhya: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * This method would update prices in Sankhya ERP
     * Implement the actual logic to update in Sankhya
     */
    private boolean updatePricesInSankhya(String productId, List<Price> prices) {
        // This is a placeholder - implement actual updating logic
        logger.info("Updating {} prices in Sankhya for product {}", prices.size(), productId);
        
        try {
            // Example implementation - replace with actual Sankhya API call
            // sankhyaClient.updateData() would be used here
            
            // For each price in the list, update in Sankhya
            for (Price price : prices) {
                logger.info("Updating price in Sankhya: {}", price);
                // Implement actual update logic
            }
            
            return true;
        } catch (Exception e) {
            logger.error("Error updating prices in Sankhya: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * Get a price batch from FastChannel based on product ID and quantity
     * 
     * @param productId The product ID
     * @param quantity The quantity
     * @param priceTableId The price table ID
     * @return The matching price batch or null if not found
     */
    public PriceBatch getPriceBatchForQuantity(String productId, int quantity, int priceTableId) {
        try {
            ApiResponse<PriceBatch> response = priceApi.filterProductPriceBatch(productId, quantity, priceTableId);
            return (response != null && response.isSuccess()) ? response.getPayload() : null;
        } catch (Exception e) {
            logger.error("Error getting price batch for product {} and quantity {}: {}", productId, quantity, e.getMessage());
            return null;
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/config/PriceConfig.java ///
package hub.pulse.integration.fastchannel.config;

import org.springframework.context.annotation.Configuration;

import java.math.BigDecimal;

@Configuration
public class PriceConfig {
    private BigDecimal defaultPriceTableId;
    private boolean promotionalPricesEnabled;
    private int maxRetries;
    private String getPricesUrl;

    public BigDecimal getDefaultPriceTableId() {
        return defaultPriceTableId;
    }

    public void setDefaultPriceTableId(BigDecimal defaultPriceTableId) {
        this.defaultPriceTableId = defaultPriceTableId;
    }

    public boolean isPromotionalPricesEnabled() {
        return promotionalPricesEnabled;
    }

    public void setPromotionalPricesEnabled(boolean promotionalPricesEnabled) {
        this.promotionalPricesEnabled = promotionalPricesEnabled;
    }

    public int getMaxRetries() {
        return maxRetries;
    }

    public void setMaxRetries(int maxRetries) {
        this.maxRetries = maxRetries;
    }

    public String getGetPricesUrl() {
        return getPricesUrl;
    }

    public void setGetPricesUrl(String getPricesUrl) {
        this.getPricesUrl = getPricesUrl;
    }
}

/// main/java/hub/pulse/integration/fastchannel/docs/credit/spec_oapi-3.0.1.json ///
{
    "openapi": "3.0.1",
    "info": {
        "title": "API de CrÃ©ditos",
        "description": "API para gestÃ£o dos limites de crÃ©dito para os clientes das lojas virtuais B2B da plataforma Fast Channel.",
        "version": "v1"
    },
    "servers": [
        {
            "url": "https://api.commerce.fastchannel.com/credit-management/v1"
        }
    ],
    "paths": {
        "/limits": {
            "get": {
                "summary": "ListCreditLimits",
                "description": "Retorna a lista de regras de limites de crÃ©dito cadastradas para os clientes da loja virtual.",
                "operationId": "listcreditlimits",
                "parameters": [
                    {
                        "name": "SellerId",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "SellerIds",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "array[int]"
                        }
                    },
                    {
                        "name": "RuleIds",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "array[long]"
                        }
                    },
                    {
                        "name": "CustomerKeywords",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CustomerDocument",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CustomerType",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "enum"
                        }
                    },
                    {
                        "name": "StatusType",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "enum"
                        }
                    },
                    {
                        "name": "SortingDisabled",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    {
                        "name": "PageNumber",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageSize\". Valor inteiro igual ou maior que um, o qual define o \"nÃºmero da pÃ¡gina\" que deverÃ¡ ser retornado dos resultados.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageNumber\". Valor inteiro igual ou maior que um, o qual define a quantidade de registros retornados \"por pÃ¡gina\".",
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de regras de limites de crÃ©dito cadastradas para os clientes da loja virtual, opcionalmente filtrados por um ou mais parÃ¢metros de pesquisa.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "post": {
                "summary": "SaveCreditLimit",
                "description": "Solicita a gravaÃ§Ã£o das informaÃ§Ãµes de uma ou mais regras de limites de crÃ©dito na plataforma. A gravaÃ§Ã£o dos dados ocorre de forma assÃ­ncrona, e pode levar alguns instantes atÃ© que seus dados possam ser consultados e estejam efetivamente disponÃ­veis na plataforma.",
                "operationId": "savecreditlimit",
                "responses": {
                    "200": {
                        "description": "Retorno de sucesso da solicitaÃ§Ã£o de gravaÃ§Ã£o das regras de limite de crÃ©dito."
                    }
                }
            }
        },
        "/limits/{CustomerDocument}": {
            "get": {
                "summary": "GetCreditLimit",
                "description": "Retorna os detalhes da regra de limite de crÃ©dito vinculada a um determinado CPF ou CNPJ, de acordo com o documento informado na requisiÃ§Ã£o.",
                "operationId": "getcreditlimit",
                "parameters": [
                    {
                        "name": "CustomerDocument",
                        "in": "path",
                        "description": "CPF ou CNPJ do cliente a que se refere a regra de limite de crÃ©dito, sem nenhuma pontuaÃ§Ã£o, mas incluindo quaisquer zeros Ã  esquerda. CPFs com 11 dÃ­gitos, e CNPJs com 14 dÃ­gitos, sempre. ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "RuleId",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "long"
                        }
                    },
                    {
                        "name": "SellerId",
                        "in": "query",
                        "description": "Opcional.",
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detalhes da regra de limite de crÃ©dito vinculada a um determinado CPF ou CNPJ.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "DeleteCreditLimit",
                "description": "Solicita a exclusÃ£o de uma regra de limite de crÃ©dito existente para um determinado CPF ou CNPJ. As informaÃ§Ãµes existentes da regra de limite de crÃ©dito a ser removida serÃ£o retornados como resposta Ã  solicitaÃ§Ã£o. A exclusÃ£o ocorre de forma assÃ­ncrona, e pode levar alguns instantes atÃ© ser efetivada. Qualquer solicitaÃ§Ã£o duplicada para exclusÃ£o de uma mesma regra nÃ£o causa efeitos colaterais negativos na plataforma.",
                "operationId": "deletecreditlimit",
                "parameters": [
                    {
                        "name": "CustomerDocument",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retorno de sucesso da solicitaÃ§Ã£o de exclusÃ£o da regra de limite de crÃ©dito, contendo as informaÃ§Ãµes detalhadas da regra que serÃ¡ excluÃ­da.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "Subscription-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}

/// main/java/hub/pulse/integration/fastchannel/docs/credit.md ///
# DocumentaÃ§Ã£o de IntegraÃ§Ã£o - Credit (FastChannel)

## Exemplos de Uso

### Listar limites de crÃ©dito

```java
import hub.pulse.integration.fastchannel.api.CreditApi;

CreditApi creditApi = new CreditApi();
String result = creditApi.listCreditLimits(Map.of("PageNumber", 1, "PageSize", 20));
```

### Consultar limite de crÃ©dito de um cliente
```java
String result = creditApi.getCreditLimit("12345678901", Map.of());
```

### Salvar limite de crÃ©dito
```java
String payload = "{\"CustomerDocument\":\"12345678901\",\"Limit\":10000}";
boolean ok = creditApi.saveCreditLimit(payload);
```

### Excluir limite de crÃ©dito
```java
boolean ok = creditApi.deleteCreditLimit("12345678901");
```

/// main/java/hub/pulse/integration/fastchannel/docs/order.md ///
# DocumentaÃ§Ã£o de IntegraÃ§Ã£o - Orders (FastChannel)

## Exemplos de Uso

### Listar pedidos

```java
import hub.pulse.integration.fastchannel.api.OrderApi;
import hub.pulse.integration.fastchannel.model.Order;

OrderApi orderApi = new OrderApi();
List<Order> orders = orderApi.getOrders(null, null, null, 1, 20);
```

### Buscar detalhes de um pedido

```java
import hub.pulse.integration.fastchannel.model.Order;

Order order = orderApi.getOrderDetails(12345);
```

### Atualizar status de um pedido
```java
String statusPayload = "{\"CurrentStatusId\": 2}";
boolean ok = orderApi.setOrderCurrentStatus(12345, statusPayload);
```

### Consultar rastreamento
```java
String tracking = orderApi.getOrderTracking(12345, "TRACK123");
```

### Adicionar nota fiscal

```java
import hub.pulse.integration.fastchannel.model.OrderInvoice;

OrderInvoice invoice = new OrderInvoice();
// ...preencher campos...
boolean ok = orderApi.createOrderInvoice(12345, invoice);
```

---
Consulte os testes unitÃ¡rios para mais exemplos de uso prÃ¡tico.

/// main/java/hub/pulse/integration/fastchannel/docs/orders/spec_oapi-3.0.1.json ///
{
    "openapi": "3.0.1",
    "info": {
        "title": "API de Pedidos",
        "description": "API para gestÃ£o dos pedidos das lojas virtuais B2B da plataforma Fast Channel.",
        "version": "v1"
    },
    "servers": [
        {
            "url": "https://api.commerce.fastchannel.com/order-management/v1"
        }
    ],
    "paths": {
        "/orders": {
            "get": {
                "tags": [
                    "SincronizaÃ§Ã£o de Pedidos"
                ],
                "summary": "ListOrders",
                "description": "Retorna a lista (array) de pedidos existentes na sua Conta Fastchannel. Por padrÃ£o, apenas os pedidos que tenham sido gerados nas Ãºltimas 24 horas serÃ£o retornados. Para modificar a listagem retornada, combine os diversos parÃ¢metros de filtro da operaÃ§Ã£o.",
                "operationId": "listorders",
                "parameters": [
                    {
                        "name": "IsSynched",
                        "in": "query",
                        "description": "SituaÃ§Ã£o de sincronizaÃ§Ã£o atual dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "false",
                                "true"
                            ],
                            "type": "Boolean",
                            "default": "false"
                        }
                    },
                    {
                        "name": "CreatedAfter",
                        "in": "query",
                        "description": "Data/Hora mÃ­nima de abertura/criaÃ§Ã£o dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "2016-01-31T01:29:35.000"
                            ],
                            "type": "Datetime",
                            "default": "2016-01-31T01:29:35.000"
                        }
                    },
                    {
                        "name": "CurrentStatusIds",
                        "in": "query",
                        "description": "Lista de identificadores dos status em que devem estar os pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "200,201"
                            ],
                            "type": "Array[number]"
                        }
                    },
                    {
                        "name": "OrderIds",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1234,5678,9012"
                            ],
                            "type": "Array[number]"
                        }
                    },
                    {
                        "name": "OrderCodes",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "XYZ123,XYZ567,XYZ890"
                            ],
                            "type": "Array[string]"
                        }
                    },
                    {
                        "name": "CustomerIds",
                        "in": "query",
                        "description": "\nLista de identificadores Ãºnicos de clientes para ser utilizada como filtro dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1,2,3,4"
                            ],
                            "type": "Array[number]"
                        }
                    },
                    {
                        "name": "StorageIds",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos de CD's (Lojas/DepÃ³sitos/Filiais) para ser utilizada como filtro dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1,2,3,4"
                            ],
                            "type": "Array[number]",
                            "default": "1,2,3,4"
                        }
                    },
                    {
                        "name": "ResellerIds",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos de revendas para ser utilizada como filtro dos pedidos que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1,2,3,4"
                            ],
                            "type": "Array[number]"
                        }
                    },
                    {
                        "name": "IgnoreCreationDate",
                        "in": "query",
                        "description": "Permite que a data de abertura/criaÃ§Ã£o possa ser ignorada durante a execuÃ§Ã£o dos filtros dos pedidos que deverÃ£o ser retornados (sÃ³ Ã© considerado quando utilizado em conjunto com um dos seguintes parÃ¢metros: 'CurrentStatusIds', 'OrderIds', 'OrderCodes', 'CustomerIds', 'StorageIds' ou 'ResellerIds').",
                        "schema": {
                            "enum": [
                                "false",
                                "true"
                            ],
                            "type": "Boolean",
                            "default": "false"
                        }
                    },
                    {
                        "name": "PageNumber",
                        "in": "query",
                        "description": "Permite a aplicaÃ§Ã£o de paginaÃ§Ã£o nos resultados que deverÃ£o ser retornados, definindo o nÃºmero da pÃ¡gina de resultados desejada (deve ser utilizado em conjunto com o parÃ¢metro 'PageSize').",
                        "schema": {
                            "enum": [
                                "0",
                                "1"
                            ],
                            "type": "Number",
                            "default": "0"
                        }
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Permite a aplicaÃ§Ã£o de paginaÃ§Ã£o nos resultados que deverÃ£o ser retornados, definindo o limite mÃ¡ximo de registros por pÃ¡gina a serem retornados (deve ser utilizado em conjunto com o parÃ¢metro 'PageNumber').",
                        "schema": {
                            "enum": [
                                "0",
                                "10"
                            ],
                            "type": "Number",
                            "default": "0"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resposta de sucesso da listagem de pedidos, porÃ©m com alguns pedidos encontrados para os filtros informados.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Listagem_de_Pedidos_-_Com_Conte_do"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "TotalRecords": 6,
                                    "TotalPages": 1,
                                    "RequestParams": {
                                        "CreatedAfter": "/Date(1585507119990)/",
                                        "ResellerIds": [
                                            1
                                        ]
                                    },
                                    "Payload": [
                                        {
                                            "OrderId": 483,
                                            "OrderCode": "S863816913",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600922405460)/",
                                            "CurrentStatusId": 200,
                                            "CurrentStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 286,
                                            "CustomerName": "Karl Heinz Brehme",
                                            "CustomerDocument": "19008627000117",
                                            "CustomerType": "J",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (Ã  vista)",
                                            "OrderTotal": 330.3
                                        },
                                        {
                                            "OrderId": 481,
                                            "OrderCode": "S571805521",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600461872177)/",
                                            "CurrentStatusId": 200,
                                            "CurrentStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 285,
                                            "CustomerName": "ANDERSON SILVA DE MIRANDA",
                                            "CustomerDocument": "42353346111",
                                            "CustomerType": "F",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (7x c/ juros)",
                                            "OrderTotal": 137.55
                                        },
                                        {
                                            "OrderId": 480,
                                            "OrderCode": "S786053650",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600459299560)/",
                                            "CurrentStatusId": 200,
                                            "CurrentStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 285,
                                            "CustomerName": "ANDERSON SILVA DE MIRANDA",
                                            "CustomerDocument": "42353346111",
                                            "CustomerType": "F",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (6x c/ juros)",
                                            "OrderTotal": 135.66
                                        },
                                        {
                                            "OrderId": 479,
                                            "OrderCode": "S854474129",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600458441190)/",
                                            "CurrentStatusId": 100,
                                            "CurrentStatusDescription": "Pedido recebido, em anÃ¡lise",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 285,
                                            "CustomerName": "ANDERSON SILVA DE MIRANDA",
                                            "CustomerDocument": "42353346111",
                                            "CustomerType": "F",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (6x c/ juros)",
                                            "OrderTotal": 135.66
                                        },
                                        {
                                            "OrderId": 477,
                                            "OrderCode": "S287583107",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600458318200)/",
                                            "CurrentStatusId": 100,
                                            "CurrentStatusDescription": "Pedido recebido, em anÃ¡lise",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 285,
                                            "CustomerName": "ANDERSON SILVA DE MIRANDA",
                                            "CustomerDocument": "42353346111",
                                            "CustomerType": "F",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (6x c/ juros)",
                                            "OrderTotal": 135.66
                                        },
                                        {
                                            "OrderId": 476,
                                            "OrderCode": "S394339416",
                                            "IsSynched": false,
                                            "CreatedAt": "/Date(1600458226187)/",
                                            "CurrentStatusId": 100,
                                            "CurrentStatusDescription": "Pedido recebido, em anÃ¡lise",
                                            "CurrentStatusTypeId": 5,
                                            "CurrentStatusTypeDescription": "Pedido Recebido",
                                            "CustomerId": 285,
                                            "CustomerName": "ANDERSON SILVA DE MIRANDA",
                                            "CustomerDocument": "42353346111",
                                            "CustomerType": "F",
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "StorageCityId": "3550308",
                                            "StorageCityName": "SÃ£o Paulo",
                                            "StorageStateId": "SP",
                                            "ResellerId": 1,
                                            "ResellerName": "ConfecÃ§Ã£o Teste A",
                                            "PaymentOption": "VISA (6x c/ juros)",
                                            "OrderTotal": 135.66
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}": {
            "get": {
                "tags": [
                    "SincronizaÃ§Ã£o de Pedidos"
                ],
                "summary": "GetOrderDetails",
                "description": "Retorna as informaÃ§Ãµes detalhadas de um determinado pedido da Loja Virtual.",
                "operationId": "getorderdetails",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": ""
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "InformaÃ§Ãµes detalhadas de todos os aspectos de um determinado pedido da loja virtual.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 476,
                                        "IncludeItemDetails": true,
                                        "IncludeCustomerData": true,
                                        "IncludeWithdrawalData": true,
                                        "IncludeStatusHistory": true,
                                        "IncludePaymentHistory": true,
                                        "IncludeTrackingData": true,
                                        "IncludeRiskAnalysisHistory": true,
                                        "IncludeInvoiceData": true,
                                        "IncludeDiscountCoupon": true,
                                        "IncludeAuditingHistory": true,
                                        "IncludeDistributionCenterData": true
                                    },
                                    "Payload": {
                                        "OrderId": 476,
                                        "OrderType": "Standard",
                                        "OrderCode": "S394339416",
                                        "CreatedAt": "/Date(1600458226187)/",
                                        "IsSynched": false,
                                        "SalesUserId": 0,
                                        "ResellerId": 1,
                                        "SourceIpAddress": "::1",
                                        "BuyerRemarks": "",
                                        "HasScheduledWithdrawal": false,
                                        "TotalDeliveryDays": 6,
                                        "DeliveryDateLimit": "/Date(1600976626187)/",
                                        "ShippingMethodId": 2,
                                        "ShippingMethodName": "Sedex",
                                        "ShippingDiscountId": 0,
                                        "ShippingDiscountName": "",
                                        "ShippingDiscountType": 0,
                                        "ShippingDiscountAmount": 0,
                                        "ProductCost": 10000,
                                        "ProductDiscount": 0,
                                        "ProductDiscountQuota": 0,
                                        "ProductDiscountCoupon": 0,
                                        "ProductDiscountManual": 0,
                                        "ProductDiscountPayment": 0,
                                        "ProductDiscountAssociation": 0,
                                        "ShippingCost": 2250,
                                        "ShippingDiscount": 0,
                                        "ShippingDiscountCoupon": 0,
                                        "ShippingDiscountManual": 0,
                                        "PaymentInstallmentCost": 1316,
                                        "SubtotalProducts": 10000,
                                        "SubtotalShipping": 2250,
                                        "IpiBaseValue": 0,
                                        "IpiTotalCost": 0,
                                        "IcmsBaseValue": 0,
                                        "IcmsTotalCost": 0,
                                        "IcmsStBaseValue": 0,
                                        "IcmsStTotalCost": 0,
                                        "TotalOrderValue": 13566,
                                        "CurrentStatus": {
                                            "OrderId": 476,
                                            "OrderStatusId": 100,
                                            "OrderStatusHistoryId": 2518,
                                            "Removed": false,
                                            "CreatedAt": "/Date(1600458226887)/",
                                            "ResponsibleUserId": 1,
                                            "ResponsibleUserName": "Sistema (WebStore)",
                                            "OrderStatusName": "Pendente",
                                            "OrderStatusDescription": "Pedido recebido, em anÃ¡lise",
                                            "IsActive": true,
                                            "Priority": 1,
                                            "PreviousOrderStatusIds": "",
                                            "ManagerStatusTypeId": 1,
                                            "ManagerStatusTypeName": "Pendente",
                                            "ManagerStatusTypePriority": 1,
                                            "CustomerStatusTypeId": 5,
                                            "CustomerStatusTypeName": "Pedido Recebido",
                                            "CustomerStatusTypePriority": 1,
                                            "IsRemovable": false,
                                            "PossibleNextStatuses": [
                                                {
                                                    "OrderStatusId": 101,
                                                    "OrderStatusName": "Pendente",
                                                    "OrderStatusDescription": "Pedido pendente, aguardando documentos",
                                                    "ManagerStatusTypeId": 1,
                                                    "CustomerStatusTypeId": 5,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100"
                                                },
                                                {
                                                    "OrderStatusId": 102,
                                                    "OrderStatusName": "Pendente (aprovado pela anÃ¡lise de risco)",
                                                    "OrderStatusDescription": "Pedido pendente, aguardando confirmaÃ§Ã£o de pagamento",
                                                    "ManagerStatusTypeId": 1,
                                                    "CustomerStatusTypeId": 5,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101"
                                                },
                                                {
                                                    "OrderStatusId": 200,
                                                    "OrderStatusName": "Pendente (Aguardando confirmaÃ§Ã£o de pagamento)",
                                                    "OrderStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                                    "ManagerStatusTypeId": 1,
                                                    "CustomerStatusTypeId": 5,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101"
                                                },
                                                {
                                                    "OrderStatusId": 401,
                                                    "OrderStatusName": "Cancelado",
                                                    "OrderStatusDescription": "Pedido cancelado pela operadora de cartÃ£o de crÃ©dito",
                                                    "ManagerStatusTypeId": 2,
                                                    "CustomerStatusTypeId": 2,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101,200"
                                                },
                                                {
                                                    "OrderStatusId": 402,
                                                    "OrderStatusName": "Cancelado",
                                                    "OrderStatusDescription": "Pedido cancelado por anÃ¡lise",
                                                    "ManagerStatusTypeId": 2,
                                                    "CustomerStatusTypeId": 2,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101,200"
                                                },
                                                {
                                                    "OrderStatusId": 403,
                                                    "OrderStatusName": "Cancelado",
                                                    "OrderStatusDescription": "Pedido cancelado pelo cliente",
                                                    "ManagerStatusTypeId": 2,
                                                    "CustomerStatusTypeId": 2,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101,102,200,201,300,303"
                                                },
                                                {
                                                    "OrderStatusId": 404,
                                                    "OrderStatusName": "Cancelado",
                                                    "OrderStatusDescription": "Pedido cancelado por motivos diversos",
                                                    "ManagerStatusTypeId": 2,
                                                    "CustomerStatusTypeId": 2,
                                                    "IsActive": true,
                                                    "Priority": 1,
                                                    "PreviousStatusIds": "100,101,102,200,201,300,303"
                                                }
                                            ]
                                        },
                                        "Customer": {
                                            "OrderId": 476,
                                            "CustomerId": 285,
                                            "CustomerTypeFlag": "F",
                                            "CustomerTypeName": "Pessoa FÃ­sica",
                                            "CurrentProfileId": 1,
                                            "CurrentStatusId": 2,
                                            "CurrentStatusDescription": "Cadastro Aprovado",
                                            "EmailAddress": "anderson@fastchannel.com",
                                            "FullName": "ANDERSON SILVA DE MIRANDA",
                                            "PersonFederalRegistry": "09342771769",
                                            "PersonDocument": "550540623",
                                            "CreatedAt": "/Date(1600454840387)/",
                                            "LastLoginAt": "/Date(1600458082463)/",
                                            "Birthdate": "/Date(381808800000)/",
                                            "GenderName": "(nÃ£o informado)",
                                            "IsMailingEnabled": false,
                                            "IsBlacklisted": false,
                                            "Addresses": [
                                                {
                                                    "IdCity": "3550308",
                                                    "IdState": "SP",
                                                    "IdAddressType": 1,
                                                    "DsAddress": "Avenida General Ataliba Leonel",
                                                    "DsNumber": "123",
                                                    "DsDistrict": "Santana",
                                                    "NuZip": "02033000",
                                                    "DsCity": "SÃ£o Paulo",
                                                    "NuPhoneDDD": "11",
                                                    "NuPhone": "999999999",
                                                    "NuMobilePhoneDDD": "11",
                                                    "NuMobilePhone": "999999999",
                                                    "NuPhone2": "",
                                                    "IdCompany": 0,
                                                    "OrderId": 476,
                                                    "OrderAddressTypeId": 2,
                                                    "OrderAddressTypeName": "InformaÃ§Ãµes de Entrega",
                                                    "CustomerAddressId": 311,
                                                    "CustomerId": 285,
                                                    "CreatedAt": "/Date(1600454840577)/",
                                                    "Destination": "CobranÃ§a",
                                                    "DeliveryTo": "ANDERSON SILVA DE MIRANDA",
                                                    "Address": {
                                                        "StreetTypeId": 1,
                                                        "StreetName": "Avenida General Ataliba Leonel",
                                                        "StreetNumber": "123",
                                                        "Neighborhood": "Santana",
                                                        "ZipCode": "02033000",
                                                        "CityId": "3550308",
                                                        "CityName": "SÃ£o Paulo",
                                                        "StateId": "SP"
                                                    },
                                                    "PhoneNumbers": [
                                                        {
                                                            "PhoneType": "Home",
                                                            "RegionCode": "11",
                                                            "LocalNumber": "999999999"
                                                        },
                                                        {
                                                            "PhoneType": "Mobile",
                                                            "RegionCode": "11",
                                                            "LocalNumber": "999999999"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "IdCity": "3550308",
                                                    "IdState": "SP",
                                                    "IdAddressType": 1,
                                                    "DsAddress": "Avenida General Ataliba Leonel",
                                                    "DsNumber": "123",
                                                    "DsDistrict": "Santana",
                                                    "NuZip": "02033000",
                                                    "DsCity": "SÃ£o Paulo",
                                                    "NuPhoneDDD": "11",
                                                    "NuPhone": "999999999",
                                                    "NuMobilePhoneDDD": "11",
                                                    "NuMobilePhone": "999999999",
                                                    "NuPhone2": "",
                                                    "IdCompany": 0,
                                                    "OrderId": 476,
                                                    "OrderAddressTypeId": 3,
                                                    "OrderAddressTypeName": "InformaÃ§Ãµes de CobranÃ§a",
                                                    "CustomerAddressId": 311,
                                                    "CustomerId": 285,
                                                    "CreatedAt": "/Date(1600454840577)/",
                                                    "Destination": "CobranÃ§a",
                                                    "DeliveryTo": "ANDERSON SILVA DE MIRANDA",
                                                    "Address": {
                                                        "StreetTypeId": 1,
                                                        "StreetName": "Avenida General Ataliba Leonel",
                                                        "StreetNumber": "123",
                                                        "Neighborhood": "Santana",
                                                        "ZipCode": "02033000",
                                                        "CityId": "3550308",
                                                        "CityName": "SÃ£o Paulo",
                                                        "StateId": "SP"
                                                    },
                                                    "PhoneNumbers": [
                                                        {
                                                            "PhoneType": "Home",
                                                            "RegionCode": "11",
                                                            "LocalNumber": "999999999"
                                                        },
                                                        {
                                                            "PhoneType": "Mobile",
                                                            "RegionCode": "11",
                                                            "LocalNumber": "999999999"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "PaymentData": {
                                            "IdCity": "3550308",
                                            "IdState": "SP",
                                            "IdAddressType": 1,
                                            "DsAddress": "Avenida General Ataliba Leonel",
                                            "DsNumber": "123",
                                            "DsDistrict": "Santana",
                                            "NuZip": "02033000",
                                            "DsCity": "SÃ£o Paulo",
                                            "NuPhoneDDD": "11",
                                            "NuPhone": "999999999",
                                            "NuMobilePhoneDDD": "11",
                                            "NuMobilePhone": "999999999",
                                            "NuPhone2": "",
                                            "IdCompany": 0,
                                            "OrderId": 476,
                                            "OrderAddressTypeId": 3,
                                            "OrderAddressTypeName": "InformaÃ§Ãµes de CobranÃ§a",
                                            "CustomerAddressId": 311,
                                            "CustomerId": 285,
                                            "CreatedAt": "/Date(1600454840577)/",
                                            "Destination": "CobranÃ§a",
                                            "DeliveryTo": "ANDERSON SILVA DE MIRANDA",
                                            "Address": {
                                                "StreetTypeId": 1,
                                                "StreetName": "Avenida General Ataliba Leonel",
                                                "StreetNumber": "123",
                                                "Neighborhood": "Santana",
                                                "ZipCode": "02033000",
                                                "CityId": "3550308",
                                                "CityName": "SÃ£o Paulo",
                                                "StateId": "SP"
                                            },
                                            "PhoneNumbers": [
                                                {
                                                    "PhoneType": "Home",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                },
                                                {
                                                    "PhoneType": "Mobile",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                }
                                            ]
                                        },
                                        "BillingData": {
                                            "IdCity": "3550308",
                                            "IdState": "SP",
                                            "IdAddressType": 1,
                                            "DsAddress": "Avenida General Ataliba Leonel",
                                            "DsNumber": "123",
                                            "DsDistrict": "Santana",
                                            "NuZip": "02033000",
                                            "DsCity": "SÃ£o Paulo",
                                            "NuPhoneDDD": "11",
                                            "NuPhone": "999999999",
                                            "NuMobilePhoneDDD": "11",
                                            "NuMobilePhone": "999999999",
                                            "NuPhone2": "",
                                            "IdCompany": 0,
                                            "OrderId": 476,
                                            "OrderAddressTypeId": 3,
                                            "OrderAddressTypeName": "InformaÃ§Ãµes de CobranÃ§a",
                                            "CustomerAddressId": 311,
                                            "CustomerId": 285,
                                            "CreatedAt": "/Date(1600454840577)/",
                                            "Destination": "CobranÃ§a",
                                            "DeliveryTo": "ANDERSON SILVA DE MIRANDA",
                                            "Address": {
                                                "StreetTypeId": 1,
                                                "StreetName": "Avenida General Ataliba Leonel",
                                                "StreetNumber": "123",
                                                "Neighborhood": "Santana",
                                                "ZipCode": "02033000",
                                                "CityId": "3550308",
                                                "CityName": "SÃ£o Paulo",
                                                "StateId": "SP"
                                            },
                                            "PhoneNumbers": [
                                                {
                                                    "PhoneType": "Home",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                },
                                                {
                                                    "PhoneType": "Mobile",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                }
                                            ]
                                        },
                                        "ShippingData": {
                                            "IdCity": "3550308",
                                            "IdState": "SP",
                                            "IdAddressType": 1,
                                            "DsAddress": "Avenida General Ataliba Leonel",
                                            "DsNumber": "123",
                                            "DsDistrict": "Santana",
                                            "NuZip": "02033000",
                                            "DsCity": "SÃ£o Paulo",
                                            "NuPhoneDDD": "11",
                                            "NuPhone": "999999999",
                                            "NuMobilePhoneDDD": "11",
                                            "NuMobilePhone": "999999999",
                                            "NuPhone2": "",
                                            "IdCompany": 0,
                                            "OrderId": 476,
                                            "OrderAddressTypeId": 2,
                                            "OrderAddressTypeName": "InformaÃ§Ãµes de Entrega",
                                            "CustomerAddressId": 311,
                                            "CustomerId": 285,
                                            "CreatedAt": "/Date(1600454840577)/",
                                            "Destination": "CobranÃ§a",
                                            "DeliveryTo": "ANDERSON SILVA DE MIRANDA",
                                            "Address": {
                                                "StreetTypeId": 1,
                                                "StreetName": "Avenida General Ataliba Leonel",
                                                "StreetNumber": "123",
                                                "Neighborhood": "Santana",
                                                "ZipCode": "02033000",
                                                "CityId": "3550308",
                                                "CityName": "SÃ£o Paulo",
                                                "StateId": "SP"
                                            },
                                            "PhoneNumbers": [
                                                {
                                                    "PhoneType": "Home",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                },
                                                {
                                                    "PhoneType": "Mobile",
                                                    "RegionCode": "11",
                                                    "LocalNumber": "999999999"
                                                }
                                            ]
                                        },
                                        "CurrentPaymentDetails": {
                                            "OrderId": 476,
                                            "OrderPaymentStatusId": 1,
                                            "OrderPaymentStatusText": "Aguardando confirmaÃ§Ã£o de pagamento",
                                            "PaymentMethodId": 6,
                                            "PaymentMethodTypeId": 2,
                                            "PaymentMethodTypeName": "CartÃ£o de CrÃ©dito",
                                            "PaymentMethodName": "VISA",
                                            "PaymentMethodImageFilename": "visa-48px.png",
                                            "BillingDays": "",
                                            "PaymentProviderCode": "payment.braspag.rest",
                                            "CreditCardBrand": "Visa",
                                            "CreditCardNumber": "cV0CKWpyCN+vK8yllJbOJ21HzirHlFAb",
                                            "CreditCardComp": "Hs+tunZTOjk=",
                                            "CreditCardMonthExpiration": "4",
                                            "CreditCardYearExpiration": "2024",
                                            "CreditCardOwnerName": "TESTE FAST CHANNEL",
                                            "CreditCardOwnerFederalRegistry": "093.427.717-69",
                                            "Parcels": 6,
                                            "ParcelValue": 2261,
                                            "InterestRate": 299,
                                            "InstallmentCost": 1316,
                                            "TransactionDate": "/Date(1600458226440)/",
                                            "BankValidation": "",
                                            "PaymentExpirationDays": 0,
                                            "RiskAnalysisExecutionType": 0,
                                            "DiscountPolicyId": 0,
                                            "DiscountPolicyName": "",
                                            "DiscountAmountValue": 0,
                                            "DiscountAmountTypeFlag": 0,
                                            "HasPaymentTransactions": false,
                                            "TransactionsHistory": []
                                        },
                                        "OriginChannel": {
                                            "OrderId": 476,
                                            "SaleChannelId": 1,
                                            "CustomerProfileId": 1,
                                            "CatalogId": 1,
                                            "PriceTableId": 1,
                                            "SaleChannelName": "PadrÃ£o",
                                            "CustomerProfileName": "PadrÃ£o",
                                            "CatalogName": "PadrÃ£o",
                                            "PriceTableName": "PadrÃ£o",
                                            "CustomerProfileTypeId": 1,
                                            "CurrentSaleTypeId": 3,
                                            "IsBackorderAllowed": false,
                                            "IsTaxationRequired": false
                                        },
                                        "SourceStorage": {
                                            "OrderId": 476,
                                            "StorageId": 1,
                                            "StorageName": "Loja ConfecÃ§Ã£o A",
                                            "IsActive": true,
                                            "IsDefault": true,
                                            "OrderingNumber": 0,
                                            "MinDaysForWithdrawal": 5,
                                            "MaxDaysForWithdrawal": 20,
                                            "MaxItemsPerDelivery": 0,
                                            "SellsVirtualProducts": false,
                                            "CreatedAt": "/Date(1457492400000)/",
                                            "FederalRegistry": "18615342000181",
                                            "StateRegistry": "ISENTO",
                                            "MainAddress": {
                                                "StreetTypeId": 1,
                                                "StreetName": "Rua JÃºlio Ribeiro",
                                                "StreetNumber": "13",
                                                "Neighborhood": "BrÃ¡s",
                                                "ZipCode": "03010030",
                                                "CityId": "3550308",
                                                "CityName": "SÃ£o Paulo",
                                                "StateId": "SP"
                                            }
                                        },
                                        "Items": [
                                            {
                                                "OrderId": 476,
                                                "ProductId": "TESTE-CONFECCAO-A-G",
                                                "ParentId": "",
                                                "ProductName": "Produto de Teste - ConfecÃ§Ã£o A - Grande",
                                                "Quantity": 1,
                                                "ListPrice": 0,
                                                "SalePrice": 10000,
                                                "ShippingCost": 2250,
                                                "AssociationDiscount": 0,
                                                "ManualDiscount": 0,
                                                "CatalogDiscount": 0,
                                                "QuotaDiscount": 0,
                                                "CouponDiscount": 0,
                                                "PaymentDiscount": 0,
                                                "InstallmentCost": 1316,
                                                "IpiPercentage": 0,
                                                "IpiBaseValue": 0,
                                                "IpiCost": 0,
                                                "IcmsPercentage": 0,
                                                "IcmsBaseValue": 0,
                                                "IcmsCost": 0,
                                                "IcmsStPercentage": 0,
                                                "IcmsStBaseValue": 0,
                                                "IcmsStCost": 0,
                                                "SubtotalUnit": 10000,
                                                "SubtotalItem": 10000,
                                                "TotalProductCost": 10000,
                                                "MonogramText": "",
                                                "GiftPackPrice": 0,
                                                "CategoryId": 4155,
                                                "TypeId": 3,
                                                "BrandId": 2,
                                                "LineId": 1,
                                                "DefinitionId": 1,
                                                "CatalogId": 1,
                                                "PriceTableId": 0,
                                                "DeliveryDays": 0,
                                                "DiscountPolicyId": 0,
                                                "DiscountPolicyName": "",
                                                "DiscountAmountValue": 0,
                                                "DiscountAmountTypeFlag": 0,
                                                "IsSynched": false
                                            }
                                        ],
                                        "StatusHistory": [
                                            {
                                                "OrderId": 476,
                                                "OrderStatusId": 100,
                                                "OrderStatusHistoryId": 2518,
                                                "Removed": false,
                                                "CreatedAt": "/Date(1600458226887)/",
                                                "ResponsibleUserId": 1,
                                                "ResponsibleUserName": "Sistema (WebStore)",
                                                "OrderStatusName": "Pendente",
                                                "OrderStatusDescription": "Pedido recebido, em anÃ¡lise",
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousOrderStatusIds": "",
                                                "ManagerStatusTypeId": 1,
                                                "ManagerStatusTypeName": "Pendente",
                                                "ManagerStatusTypePriority": 1,
                                                "CustomerStatusTypeId": 5,
                                                "CustomerStatusTypeName": "Pedido Recebido",
                                                "CustomerStatusTypePriority": 1,
                                                "IsRemovable": false,
                                                "PossibleNextStatuses": [
                                                    {
                                                        "OrderStatusId": 101,
                                                        "OrderStatusName": "Pendente",
                                                        "OrderStatusDescription": "Pedido pendente, aguardando documentos",
                                                        "ManagerStatusTypeId": 1,
                                                        "CustomerStatusTypeId": 5,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100"
                                                    },
                                                    {
                                                        "OrderStatusId": 102,
                                                        "OrderStatusName": "Pendente (aprovado pela anÃ¡lise de risco)",
                                                        "OrderStatusDescription": "Pedido pendente, aguardando confirmaÃ§Ã£o de pagamento",
                                                        "ManagerStatusTypeId": 1,
                                                        "CustomerStatusTypeId": 5,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101"
                                                    },
                                                    {
                                                        "OrderStatusId": 200,
                                                        "OrderStatusName": "Pendente (Aguardando confirmaÃ§Ã£o de pagamento)",
                                                        "OrderStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                                        "ManagerStatusTypeId": 1,
                                                        "CustomerStatusTypeId": 5,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101"
                                                    },
                                                    {
                                                        "OrderStatusId": 401,
                                                        "OrderStatusName": "Cancelado",
                                                        "OrderStatusDescription": "Pedido cancelado pela operadora de cartÃ£o de crÃ©dito",
                                                        "ManagerStatusTypeId": 2,
                                                        "CustomerStatusTypeId": 2,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101,200"
                                                    },
                                                    {
                                                        "OrderStatusId": 402,
                                                        "OrderStatusName": "Cancelado",
                                                        "OrderStatusDescription": "Pedido cancelado por anÃ¡lise",
                                                        "ManagerStatusTypeId": 2,
                                                        "CustomerStatusTypeId": 2,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101,200"
                                                    },
                                                    {
                                                        "OrderStatusId": 403,
                                                        "OrderStatusName": "Cancelado",
                                                        "OrderStatusDescription": "Pedido cancelado pelo cliente",
                                                        "ManagerStatusTypeId": 2,
                                                        "CustomerStatusTypeId": 2,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101,102,200,201,300,303"
                                                    },
                                                    {
                                                        "OrderStatusId": 404,
                                                        "OrderStatusName": "Cancelado",
                                                        "OrderStatusDescription": "Pedido cancelado por motivos diversos",
                                                        "ManagerStatusTypeId": 2,
                                                        "CustomerStatusTypeId": 2,
                                                        "IsActive": true,
                                                        "Priority": 1,
                                                        "PreviousStatusIds": "100,101,102,200,201,300,303"
                                                    }
                                                ]
                                            }
                                        ],
                                        "PaymentDetailsHistory": [
                                            {
                                                "OrderId": 476,
                                                "OrderPaymentStatusId": 1,
                                                "OrderPaymentStatusText": "Aguardando confirmaÃ§Ã£o de pagamento",
                                                "PaymentMethodId": 6,
                                                "PaymentMethodTypeId": 2,
                                                "PaymentMethodTypeName": "CartÃ£o de CrÃ©dito",
                                                "PaymentMethodName": "VISA",
                                                "PaymentMethodImageFilename": "visa-48px.png",
                                                "BillingDays": "",
                                                "PaymentProviderCode": "payment.braspag.rest",
                                                "CreditCardBrand": "Visa",
                                                "CreditCardNumber": "cV0CKWpyCN+vK8yllJbOJ21HzirHlFAb",
                                                "CreditCardComp": "Hs+tunZTOjk=",
                                                "CreditCardMonthExpiration": "4",
                                                "CreditCardYearExpiration": "2024",
                                                "CreditCardOwnerName": "TESTE FAST CHANNEL",
                                                "CreditCardOwnerFederalRegistry": "093.427.717-69",
                                                "Parcels": 6,
                                                "ParcelValue": 2261,
                                                "InterestRate": 299,
                                                "InstallmentCost": 1316,
                                                "TransactionDate": "/Date(1600458226440)/",
                                                "BankValidation": "",
                                                "PaymentExpirationDays": 0,
                                                "RiskAnalysisExecutionType": 0,
                                                "DiscountPolicyId": 0,
                                                "DiscountPolicyName": "",
                                                "DiscountAmountValue": 0,
                                                "DiscountAmountTypeFlag": 0,
                                                "HasPaymentTransactions": false,
                                                "TransactionsHistory": []
                                            }
                                        ],
                                        "Documents": []
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}/status": {
            "get": {
                "tags": [
                    "Fluxo de Status"
                ],
                "summary": "GetOrderCurrentStatus",
                "description": "Retorna as informaÃ§Ãµes detalhadas do status atual de um determinado pedido.",
                "operationId": "getordercurrentstatus",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Identificador Ãºnico do pedido para se obter as informaÃ§Ãµes de status",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderCurrentStatus_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 499
                                    },
                                    "Payload": {
                                        "OrderId": 499,
                                        "OrderStatusId": 200,
                                        "OrderStatusHistoryId": 2561,
                                        "Removed": false,
                                        "CreatedAt": "/Date(1601167436220)/",
                                        "ResponsibleUserId": 0,
                                        "ResponsibleUserName": "Sistema (WebStore)",
                                        "OrderStatusName": "Pendente (Aguardando confirmaÃ§Ã£o de pagamento)",
                                        "OrderStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                        "IsActive": true,
                                        "Priority": 1,
                                        "PreviousOrderStatusIds": "100,101",
                                        "ManagerStatusTypeId": 1,
                                        "ManagerStatusTypeName": "Pendente",
                                        "ManagerStatusTypePriority": 1,
                                        "CustomerStatusTypeId": 5,
                                        "CustomerStatusTypeName": "Pedido Recebido",
                                        "CustomerStatusTypePriority": 1,
                                        "IsRemovable": false,
                                        "PossibleNextStatuses": [
                                            {
                                                "OrderStatusId": 201,
                                                "OrderStatusName": "Pago",
                                                "OrderStatusDescription": "Pagamento recebido",
                                                "ManagerStatusTypeId": 3,
                                                "CustomerStatusTypeId": 6,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "200"
                                            },
                                            {
                                                "OrderStatusId": 400,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado por falta de pagamento",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "200"
                                            },
                                            {
                                                "OrderStatusId": 401,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado pela operadora de cartÃ£o de crÃ©dito",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,200"
                                            },
                                            {
                                                "OrderStatusId": 402,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado por anÃ¡lise",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,200"
                                            },
                                            {
                                                "OrderStatusId": 403,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado pelo cliente",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,102,200,201,300,303"
                                            },
                                            {
                                                "OrderStatusId": 404,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado por motivos diversos",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,102,200,201,300,303"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Fluxo de Status"
                ],
                "summary": "SetOrderCurrentStatus",
                "description": "Atualiza o status atual de um determinado pedido.",
                "operationId": "setordercurrentstatus",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": ""
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetOrderCurrentStatus_Request"
                            },
                            "example": {
                                "OrderId": 0,
                                "OrderStatusId": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetOrderCurrentStatus_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 479
                                    },
                                    "Payload": {
                                        "OrderId": 479,
                                        "OrderStatusId": 100,
                                        "OrderStatusHistoryId": 2521,
                                        "Removed": false,
                                        "CreatedAt": "/Date(1600458516907)/",
                                        "ResponsibleUserId": 1,
                                        "ResponsibleUserName": "Sistema (WebStore)",
                                        "OrderStatusName": "Pendente",
                                        "OrderStatusDescription": "Pedido recebido, em anÃ¡lise",
                                        "IsActive": true,
                                        "Priority": 1,
                                        "PreviousOrderStatusIds": "",
                                        "ManagerStatusTypeId": 1,
                                        "ManagerStatusTypeName": "Pendente",
                                        "ManagerStatusTypePriority": 1,
                                        "CustomerStatusTypeId": 5,
                                        "CustomerStatusTypeName": "Pedido Recebido",
                                        "CustomerStatusTypePriority": 1,
                                        "IsRemovable": false,
                                        "PossibleNextStatuses": [
                                            {
                                                "OrderStatusId": 101,
                                                "OrderStatusName": "Pendente",
                                                "OrderStatusDescription": "Pedido pendente, aguardando documentos",
                                                "ManagerStatusTypeId": 1,
                                                "CustomerStatusTypeId": 5,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100"
                                            },
                                            {
                                                "OrderStatusId": 102,
                                                "OrderStatusName": "Pendente (aprovado pela anÃ¡lise de risco)",
                                                "OrderStatusDescription": "Pedido pendente, aguardando confirmaÃ§Ã£o de pagamento",
                                                "ManagerStatusTypeId": 1,
                                                "CustomerStatusTypeId": 5,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101"
                                            },
                                            {
                                                "OrderStatusId": 200,
                                                "OrderStatusName": "Pendente (Aguardando confirmaÃ§Ã£o de pagamento)",
                                                "OrderStatusDescription": "Pedido aguardando confirmaÃ§Ã£o de pagamento",
                                                "ManagerStatusTypeId": 1,
                                                "CustomerStatusTypeId": 5,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101"
                                            },
                                            {
                                                "OrderStatusId": 401,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado pela operadora de cartÃ£o de crÃ©dito",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,200"
                                            },
                                            {
                                                "OrderStatusId": 402,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado por anÃ¡lise",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,200"
                                            },
                                            {
                                                "OrderStatusId": 403,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado pelo cliente",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,102,200,201,300,303"
                                            },
                                            {
                                                "OrderStatusId": 404,
                                                "OrderStatusName": "Cancelado",
                                                "OrderStatusDescription": "Pedido cancelado por motivos diversos",
                                                "ManagerStatusTypeId": 2,
                                                "CustomerStatusTypeId": 2,
                                                "IsActive": true,
                                                "Priority": 1,
                                                "PreviousStatusIds": "100,101,102,200,201,300,303"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Fluxo de Status"
                ],
                "summary": "DeleteOrderCurrentStatus ",
                "description": "Remove o status atual de um determinado pedido, retornando tal pedido para o status anterior ao status em que o mesmo se encontra.",
                "operationId": "deleteordercurrentstatus",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": ""
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteOrderCurrentStatus_Request"
                            },
                            "example": {
                                "OrderId": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": null
                    }
                }
            }
        },
        "/orders/{OrderId}/sync": {
            "get": {
                "tags": [
                    "SincronizaÃ§Ã£o de Pedidos"
                ],
                "summary": "GetOrderSyncStatus",
                "description": " Retorna a situaÃ§Ã£o de sincronizaÃ§Ã£o de um determinado pedido.",
                "operationId": "getordersyncstatus",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Identificador Ãºnico do pedido para consulta da situaÃ§Ã£o de sincronizaÃ§Ã£o",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderSyncStatus_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 499
                                    },
                                    "Payload": {
                                        "OrderId": 499,
                                        "IsSynched": false,
                                        "LastSynchedAt": "/Date(1609177587717)/"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SincronizaÃ§Ã£o de Pedidos"
                ],
                "summary": "SetOrderSyncStatus ",
                "description": "Atualiza a situaÃ§Ã£o de sincronizaÃ§Ã£o de um determinado pedido.",
                "operationId": "setordersyncstatus",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": ""
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetOrderSyncStatus_Request"
                            },
                            "example": {
                                "IsSynched": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetOrderSyncStatus_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 999
                                    },
                                    "Payload": {
                                        "OrderId": 999,
                                        "IsSynched": true,
                                        "LastSynchedAt": "/Date(1609177587717)/"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}/tracking/{TrackingCode}": {
            "get": {
                "tags": [
                    "Tracking/Rastreamento"
                ],
                "summary": "GetOrderTracking",
                "description": "Retorna os dados de um cÃ³digo de rastreio especÃ­fico.",
                "operationId": "getordertracking",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ser filtrado.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "TrackingCode",
                        "in": "path",
                        "description": "CÃ³digo de rastreamento a ser filtrado.",
                        "required": true,
                        "schema": {
                            "type": "String"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dados de rastreio do cÃ³digo informado.\n\n_Esta operaÃ§Ã£o requer tanto o Identificador Ãnico do pedido quanto o respectivo cÃ³digo de rastreio desejado._",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderTracking_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR",
                                        "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm",
                                        "CreatedAt": "2022-01-26T20:14:49.9870000+00:00",
                                        "ResponsibleId": 0,
                                        "ResponsibleName": "Integration",
                                        "IsValid": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tracking/Rastreamento"
                ],
                "summary": "DeleteOrderTracking",
                "description": "Remove os Dados de Rastreio de cÃ³digo **`TrackingCode`** para o pedido especificado por **`OrderId`**",
                "operationId": "deleteordertracking",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ter as informaÃ§Ãµes de rastreio removidas.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "TrackingCode",
                        "in": "path",
                        "description": "CÃ³digo de rastreio a ser removido do pedido.",
                        "required": true,
                        "schema": {
                            "type": "String"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Para fins de validaÃ§Ã£o, os dados de rastreio relativos ao cÃ³digo de rastreio removido serÃ£o retornados como resposta da operaÃ§Ã£o.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteOrderTracking_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR",
                                        "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm",
                                        "CreatedAt": "2022-01-26T13:55:41.2230000+00:00",
                                        "LastUpdateAt": "2022-01-26T13:56:18.1330000+00:00",
                                        "ResponsibleId": 0,
                                        "ResponsibleName": "Integration",
                                        "IsValid": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}/invoices": {
            "get": {
                "tags": [
                    "Notas Fiscais"
                ],
                "summary": "ListOrderInvoices",
                "description": "Retorna as informaÃ§Ãµes detalhadas de todas as Notas Fiscais relacionadas a um pedido qualquer.",
                "operationId": "listorderinvoices",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ser filtrado.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de todas as Notas Fiscais existentes para o pedido.\n\n_**ObservaÃ§Ã£o:** um Ãºnico pedido pode ter N Notas Fiscais diferentes vinculadas ao mesmo tempo, quantas forem necessÃ¡rias._",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOrderInvoices_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "TotalRecords": 1,
                                    "TotalPages": 1,
                                    "RequestParams": {
                                        "OrderId": 2
                                    },
                                    "Payload": [
                                        {
                                            "OrderId": 2,
                                            "InvoiceNumber": "NF98700123BR",
                                            "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                            "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Notas Fiscais"
                ],
                "summary": "SetOrderInvoice",
                "description": "Salva as informaÃ§Ãµes de uma Nota Fiscal para um determinado pedido.",
                "operationId": "setorderinvoice",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido que serÃ¡ atualizado com as informaÃ§Ãµes da Nota Fiscal.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "description": "* **InvoiceNumber**: nÃºmero da Nota Fiscal (alfanumÃ©rico, com atÃ© 25 caracteres);\n* **Description**: Texto descritivo qualquer, relacionado Ã  Nota Fiscal. Suporta atÃ© 500 caracteres;\n* **IssuanceDate**: Data de emissÃ£o da Nota Fiscal. Pode ser enviado no formato ISO-8601. Exemplo: 2022-01-25T00:00:00-03:00 corresponde Ã  meia-noite do dia 25 de janeiro de 2022, considerando o fuso-horÃ¡rio GMT-3;\n\n_Esta operaÃ§Ã£o pode ser utilizada para se modificar o valor das propriedades `Description` e/ou `IssuanceDate` sempre que necessÃ¡rio._",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetOrderInvoice_Request"
                            },
                            "example": {
                                "InvoiceNumber": "NF98700123BR",
                                "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Dados da Nota Fiscal recÃ©m atualizada.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetOrderInvoice_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR",
                                        "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                        "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR",
                                        "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                        "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}/tracking": {
            "put": {
                "tags": [
                    "Tracking/Rastreamento"
                ],
                "summary": "SetOrderTracking",
                "description": "Salva os dados de rastreio relacionados a um determinado pedido.\n\n_**ObservaÃ§Ã£o:** esta operaÃ§Ã£o pode ser utilizada tanto para se vincular um determinado cÃ³digo de rastreio com o pedido quanto tambÃ©m para se atualizar a propriedade `TrackingUrl` do respectivo cÃ³digo._",
                "operationId": "setordertracking",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ser atualizado com as informaÃ§Ãµes de Rastreio.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String"
                        }
                    }
                ],
                "requestBody": {
                    "description": "* **`TrackingCode`**: CÃ³digo para rastreamento do pedido\n* **`TrackingUrl`**: Url do site onde o cÃ³digo de rastreio `TrackingCode` poderÃ¡ ser utilizado\n\n_Esta operaÃ§Ã£o pode ser utilizada para se modificar o valor da propriedade `TrackingUrl` sempre que necessÃ¡rio._",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetOrderTracking_Request"
                            },
                            "example": {
                                "TrackingCode": "AA123456789BR",
                                "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Dados de rastreio do cÃ³digo recÃ©m atualizado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetOrderTracking_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR",
                                        "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "TrackingCode": "AA123456789BR",
                                        "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm",
                                        "CreatedAt": "2022-01-26T20:14:49.9860000+00:00",
                                        "ResponsibleId": 0,
                                        "ResponsibleName": "Integration",
                                        "IsValid": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Tracking/Rastreamento"
                ],
                "summary": "ListOrderTracking",
                "description": "Retorna as informaÃ§Ãµes detalhadas de todos os Dados de Rastreio relacionados a um determinado pedido.\n\n",
                "operationId": "listordertracking",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ser filtrado.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de todos os Dados de Rastreio existentes para o pedido.\n\n_**ObservaÃ§Ã£o:** um Ãºnico pedido pode ter N dados de rastreio diferentes vinculados ao mesmo tempo, quantos forem necessÃ¡rios._",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOrderTracking_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "TotalRecords": 1,
                                    "TotalPages": 1,
                                    "RequestParams": {
                                        "OrderId": 2
                                    },
                                    "Payload": [
                                        {
                                            "OrderId": 2,
                                            "TrackingCode": "AA123456789BR",
                                            "TrackingUrl": "https://www2.correios.com.br/sistemas/rastreamento/default.cfm",
                                            "CreatedAt": "2022-01-26T20:14:49.9870000+00:00",
                                            "ResponsibleId": 0,
                                            "ResponsibleName": "Integration",
                                            "IsValid": true
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{OrderId}/invoices/{InvoiceNumber}": {
            "delete": {
                "tags": [
                    "Notas Fiscais"
                ],
                "summary": "DeleteOrderInvoice",
                "description": "Remove as informaÃ§Ãµes da Nota Fiscal **`InvoiceNumber`** para o pedido especificado por **`OrderId`**.",
                "operationId": "deleteorderinvoice",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ter a nota fiscal removida",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "InvoiceNumber",
                        "in": "path",
                        "description": "NÃºmero da Nota Fiscal a ser removida",
                        "required": true,
                        "schema": {
                            "type": "String"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/xml"
                            ],
                            "type": "String",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Para fins de validaÃ§Ã£o, os dados da nota fiscal removida serÃ£o retornados como resposta da operaÃ§Ã£o.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteOrderInvoice_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR",
                                        "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                        "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Notas Fiscais"
                ],
                "summary": "GetOrderInvoice",
                "description": "Retorna as informaÃ§Ãµes detalhadas de uma determinada Nota Fiscal relacionada ao pedido.",
                "operationId": "getorderinvoice",
                "parameters": [
                    {
                        "name": "OrderId",
                        "in": "path",
                        "description": "Id do pedido a ser filtrado.",
                        "required": true,
                        "schema": {
                            "type": "Integer"
                        }
                    },
                    {
                        "name": "InvoiceNumber",
                        "in": "path",
                        "description": "NÃºmero da Nota Fiscal a ser filtrada.",
                        "required": true,
                        "schema": {
                            "type": "String"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Nota Fiscal com o nÃºmero informado.\n\n_Esta operaÃ§Ã£o requer tanto o Identificador Ãnico do pedido quanto o respectivo nÃºmero da Nota Fiscal._",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderInvoice_Success"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR"
                                    },
                                    "Payload": {
                                        "OrderId": 2,
                                        "InvoiceNumber": "NF98700123BR",
                                        "Description": "InformaÃ§Ã£o descritiva qualquer, relacionada com a NF em questÃ£o (atÃ© 500 caracteres)",
                                        "IssuanceDate": "2022-01-25T03:00:00.0000000+00:00"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Listagem_de_Pedidos_-_Sucesso": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "OrderType": {
                                "type": "string"
                            },
                            "OrderCode": {
                                "type": "string"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "IsSynched": {
                                "type": "boolean"
                            },
                            "SalesUserId": {
                                "type": "integer"
                            },
                            "ResellerId": {
                                "type": "integer"
                            },
                            "SourceIpAddress": {
                                "type": "string"
                            },
                            "BuyerRemarks": {
                                "type": "string"
                            },
                            "HasScheduledWithdrawal": {
                                "type": "boolean"
                            },
                            "TotalDeliveryDays": {
                                "type": "integer"
                            },
                            "DeliveryDateLimit": {
                                "type": "string"
                            },
                            "ShippingMethodId": {
                                "type": "integer"
                            },
                            "ShippingMethodName": {
                                "type": "string"
                            },
                            "ShippingDiscountId": {
                                "type": "integer"
                            },
                            "ShippingDiscountName": {
                                "type": "string"
                            },
                            "ShippingDiscountType": {
                                "type": "integer"
                            },
                            "ShippingDiscountAmount": {
                                "type": "integer"
                            },
                            "ProductCost": {
                                "type": "integer"
                            },
                            "ProductDiscount": {
                                "type": "integer"
                            },
                            "ProductDiscountQuota": {
                                "type": "integer"
                            },
                            "ProductDiscountCoupon": {
                                "type": "integer"
                            },
                            "ProductDiscountManual": {
                                "type": "integer"
                            },
                            "ProductDiscountPayment": {
                                "type": "integer"
                            },
                            "ProductDiscountAssociation": {
                                "type": "integer"
                            },
                            "ShippingCost": {
                                "type": "integer"
                            },
                            "ShippingDiscount": {
                                "type": "integer"
                            },
                            "ShippingDiscountCoupon": {
                                "type": "integer"
                            },
                            "ShippingDiscountManual": {
                                "type": "integer"
                            },
                            "PaymentInstallmentCost": {
                                "type": "integer"
                            },
                            "SubtotalProducts": {
                                "type": "integer"
                            },
                            "SubtotalShipping": {
                                "type": "integer"
                            },
                            "IpiBaseValue": {
                                "type": "integer"
                            },
                            "IpiTotalCost": {
                                "type": "integer"
                            },
                            "IcmsBaseValue": {
                                "type": "integer"
                            },
                            "IcmsTotalCost": {
                                "type": "integer"
                            },
                            "IcmsStBaseValue": {
                                "type": "integer"
                            },
                            "IcmsStTotalCost": {
                                "type": "integer"
                            },
                            "TotalOrderValue": {
                                "type": "integer"
                            },
                            "CurrentStatus": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderStatusId": {
                                        "type": "integer"
                                    },
                                    "OrderStatusHistoryId": {
                                        "type": "integer"
                                    },
                                    "Removed": {
                                        "type": "boolean"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "ResponsibleUserId": {
                                        "type": "integer"
                                    },
                                    "ResponsibleUserName": {
                                        "type": "string"
                                    },
                                    "OrderStatusName": {
                                        "type": "string"
                                    },
                                    "OrderStatusDescription": {
                                        "type": "string"
                                    },
                                    "IsActive": {
                                        "type": "boolean"
                                    },
                                    "Priority": {
                                        "type": "integer"
                                    },
                                    "PreviousOrderStatusIds": {
                                        "type": "string"
                                    },
                                    "ManagerStatusTypeId": {
                                        "type": "integer"
                                    },
                                    "ManagerStatusTypeName": {
                                        "type": "string"
                                    },
                                    "ManagerStatusTypePriority": {
                                        "type": "integer"
                                    },
                                    "CustomerStatusTypeId": {
                                        "type": "integer"
                                    },
                                    "CustomerStatusTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerStatusTypePriority": {
                                        "type": "integer"
                                    },
                                    "IsRemovable": {
                                        "type": "boolean"
                                    },
                                    "PossibleNextStatuses": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "OrderStatusId",
                                                "OrderStatusName",
                                                "OrderStatusDescription",
                                                "ManagerStatusTypeId",
                                                "CustomerStatusTypeId",
                                                "IsActive",
                                                "Priority",
                                                "PreviousStatusIds"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "OrderStatusId": {
                                                    "type": "integer"
                                                },
                                                "OrderStatusName": {
                                                    "type": "string"
                                                },
                                                "OrderStatusDescription": {
                                                    "type": "string"
                                                },
                                                "ManagerStatusTypeId": {
                                                    "type": "integer"
                                                },
                                                "CustomerStatusTypeId": {
                                                    "type": "integer"
                                                },
                                                "IsActive": {
                                                    "type": "boolean"
                                                },
                                                "Priority": {
                                                    "type": "integer"
                                                },
                                                "PreviousStatusIds": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "Customer": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CustomerTypeFlag": {
                                        "type": "string"
                                    },
                                    "CustomerTypeName": {
                                        "type": "string"
                                    },
                                    "CurrentProfileId": {
                                        "type": "integer"
                                    },
                                    "CurrentStatusId": {
                                        "type": "integer"
                                    },
                                    "CurrentStatusDescription": {
                                        "type": "string"
                                    },
                                    "EmailAddress": {
                                        "type": "string"
                                    },
                                    "FullName": {
                                        "type": "string"
                                    },
                                    "PersonFederalRegistry": {
                                        "type": "string"
                                    },
                                    "PersonDocument": {
                                        "type": "string"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "LastLoginAt": {
                                        "type": "string"
                                    },
                                    "Birthdate": {
                                        "type": "string"
                                    },
                                    "GenderName": {
                                        "type": "string"
                                    },
                                    "IsMailingEnabled": {
                                        "type": "boolean"
                                    },
                                    "IsBlacklisted": {
                                        "type": "boolean"
                                    },
                                    "Addresses": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "IdCity",
                                                "IdState",
                                                "IdAddressType",
                                                "DsAddress",
                                                "DsNumber",
                                                "DsDistrict",
                                                "NuZip",
                                                "DsCity",
                                                "NuPhoneDDD",
                                                "NuPhone",
                                                "NuMobilePhoneDDD",
                                                "NuMobilePhone",
                                                "NuPhone2",
                                                "IdCompany",
                                                "OrderId",
                                                "OrderAddressTypeId",
                                                "OrderAddressTypeName",
                                                "CustomerAddressId",
                                                "CustomerId",
                                                "CreatedAt",
                                                "Destination",
                                                "DeliveryTo",
                                                "Address",
                                                "PhoneNumbers"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "IdCity": {
                                                    "type": "string"
                                                },
                                                "IdState": {
                                                    "type": "string"
                                                },
                                                "IdAddressType": {
                                                    "type": "integer"
                                                },
                                                "DsAddress": {
                                                    "type": "string"
                                                },
                                                "DsNumber": {
                                                    "type": "string"
                                                },
                                                "DsDistrict": {
                                                    "type": "string"
                                                },
                                                "NuZip": {
                                                    "type": "string"
                                                },
                                                "DsCity": {
                                                    "type": "string"
                                                },
                                                "NuPhoneDDD": {
                                                    "type": "string"
                                                },
                                                "NuPhone": {
                                                    "type": "string"
                                                },
                                                "NuMobilePhoneDDD": {
                                                    "type": "string"
                                                },
                                                "NuMobilePhone": {
                                                    "type": "string"
                                                },
                                                "NuPhone2": {
                                                    "type": "string"
                                                },
                                                "IdCompany": {
                                                    "type": "integer"
                                                },
                                                "OrderId": {
                                                    "type": "integer"
                                                },
                                                "OrderAddressTypeId": {
                                                    "type": "integer"
                                                },
                                                "OrderAddressTypeName": {
                                                    "type": "string"
                                                },
                                                "CustomerAddressId": {
                                                    "type": "integer"
                                                },
                                                "CustomerId": {
                                                    "type": "integer"
                                                },
                                                "CreatedAt": {
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "type": "string"
                                                },
                                                "DeliveryTo": {
                                                    "type": "string"
                                                },
                                                "Address": {
                                                    "type": "object",
                                                    "properties": {
                                                        "StreetTypeId": {
                                                            "type": "integer"
                                                        },
                                                        "StreetName": {
                                                            "type": "string"
                                                        },
                                                        "StreetNumber": {
                                                            "type": "string"
                                                        },
                                                        "Neighborhood": {
                                                            "type": "string"
                                                        },
                                                        "ZipCode": {
                                                            "type": "string"
                                                        },
                                                        "CityId": {
                                                            "type": "string"
                                                        },
                                                        "CityName": {
                                                            "type": "string"
                                                        },
                                                        "StateId": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "PhoneNumbers": {
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "PhoneType",
                                                            "RegionCode",
                                                            "LocalNumber"
                                                        ],
                                                        "type": "object",
                                                        "properties": {
                                                            "PhoneType": {
                                                                "type": "string"
                                                            },
                                                            "RegionCode": {
                                                                "type": "string"
                                                            },
                                                            "LocalNumber": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "PaymentData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "BillingData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "ShippingData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "CurrentPaymentDetails": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderPaymentStatusId": {
                                        "type": "integer"
                                    },
                                    "OrderPaymentStatusText": {
                                        "type": "string"
                                    },
                                    "PaymentMethodId": {
                                        "type": "integer"
                                    },
                                    "PaymentMethodTypeId": {
                                        "type": "integer"
                                    },
                                    "PaymentMethodTypeName": {
                                        "type": "string"
                                    },
                                    "PaymentMethodName": {
                                        "type": "string"
                                    },
                                    "PaymentMethodImageFilename": {
                                        "type": "string"
                                    },
                                    "BillingDays": {
                                        "type": "string"
                                    },
                                    "PaymentProviderCode": {
                                        "type": "string"
                                    },
                                    "CreditCardBrand": {
                                        "type": "string"
                                    },
                                    "CreditCardNumber": {
                                        "type": "string"
                                    },
                                    "CreditCardComp": {
                                        "type": "string"
                                    },
                                    "CreditCardMonthExpiration": {
                                        "type": "string"
                                    },
                                    "CreditCardYearExpiration": {
                                        "type": "string"
                                    },
                                    "CreditCardOwnerName": {
                                        "type": "string"
                                    },
                                    "CreditCardOwnerFederalRegistry": {
                                        "type": "string"
                                    },
                                    "Parcels": {
                                        "type": "integer"
                                    },
                                    "ParcelValue": {
                                        "type": "integer"
                                    },
                                    "InterestRate": {
                                        "type": "integer"
                                    },
                                    "InstallmentCost": {
                                        "type": "integer"
                                    },
                                    "TransactionDate": {
                                        "type": "string"
                                    },
                                    "BankValidation": {
                                        "type": "string"
                                    },
                                    "PaymentExpirationDays": {
                                        "type": "integer"
                                    },
                                    "RiskAnalysisExecutionType": {
                                        "type": "integer"
                                    },
                                    "DiscountPolicyId": {
                                        "type": "integer"
                                    },
                                    "DiscountPolicyName": {
                                        "type": "string"
                                    },
                                    "DiscountAmountValue": {
                                        "type": "integer"
                                    },
                                    "DiscountAmountTypeFlag": {
                                        "type": "integer"
                                    },
                                    "HasPaymentTransactions": {
                                        "type": "boolean"
                                    },
                                    "TransactionsHistory": {
                                        "type": "array"
                                    }
                                }
                            },
                            "OriginChannel": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "SaleChannelId": {
                                        "type": "integer"
                                    },
                                    "CustomerProfileId": {
                                        "type": "integer"
                                    },
                                    "CatalogId": {
                                        "type": "integer"
                                    },
                                    "PriceTableId": {
                                        "type": "integer"
                                    },
                                    "SaleChannelName": {
                                        "type": "string"
                                    },
                                    "CustomerProfileName": {
                                        "type": "string"
                                    },
                                    "CatalogName": {
                                        "type": "string"
                                    },
                                    "PriceTableName": {
                                        "type": "string"
                                    },
                                    "CustomerProfileTypeId": {
                                        "type": "integer"
                                    },
                                    "CurrentSaleTypeId": {
                                        "type": "integer"
                                    },
                                    "IsBackorderAllowed": {
                                        "type": "boolean"
                                    },
                                    "IsTaxationRequired": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "SourceStorage": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "StorageId": {
                                        "type": "integer"
                                    },
                                    "StorageName": {
                                        "type": "string"
                                    },
                                    "IsActive": {
                                        "type": "boolean"
                                    },
                                    "IsDefault": {
                                        "type": "boolean"
                                    },
                                    "OrderingNumber": {
                                        "type": "integer"
                                    },
                                    "MinDaysForWithdrawal": {
                                        "type": "integer"
                                    },
                                    "MaxDaysForWithdrawal": {
                                        "type": "integer"
                                    },
                                    "MaxItemsPerDelivery": {
                                        "type": "integer"
                                    },
                                    "SellsVirtualProducts": {
                                        "type": "boolean"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "FederalRegistry": {
                                        "type": "string"
                                    },
                                    "StateRegistry": {
                                        "type": "string"
                                    },
                                    "MainAddress": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "Items": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "ProductId",
                                        "ParentId",
                                        "ProductName",
                                        "Quantity",
                                        "ListPrice",
                                        "SalePrice",
                                        "ShippingCost",
                                        "AssociationDiscount",
                                        "ManualDiscount",
                                        "CatalogDiscount",
                                        "QuotaDiscount",
                                        "CouponDiscount",
                                        "PaymentDiscount",
                                        "InstallmentCost",
                                        "IpiPercentage",
                                        "IpiBaseValue",
                                        "IpiCost",
                                        "IcmsPercentage",
                                        "IcmsBaseValue",
                                        "IcmsCost",
                                        "IcmsStPercentage",
                                        "IcmsStBaseValue",
                                        "IcmsStCost",
                                        "SubtotalUnit",
                                        "SubtotalItem",
                                        "TotalProductCost",
                                        "MonogramText",
                                        "GiftPackPrice",
                                        "CategoryId",
                                        "TypeId",
                                        "BrandId",
                                        "LineId",
                                        "DefinitionId",
                                        "CatalogId",
                                        "PriceTableId",
                                        "DeliveryDays",
                                        "DiscountPolicyId",
                                        "DiscountPolicyName",
                                        "DiscountAmountValue",
                                        "DiscountAmountTypeFlag",
                                        "IsSynched"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "ProductId": {
                                            "type": "string"
                                        },
                                        "ParentId": {
                                            "type": "string"
                                        },
                                        "ProductName": {
                                            "type": "string"
                                        },
                                        "Quantity": {
                                            "type": "integer"
                                        },
                                        "ListPrice": {
                                            "type": "integer"
                                        },
                                        "SalePrice": {
                                            "type": "integer"
                                        },
                                        "ShippingCost": {
                                            "type": "integer"
                                        },
                                        "AssociationDiscount": {
                                            "type": "integer"
                                        },
                                        "ManualDiscount": {
                                            "type": "integer"
                                        },
                                        "CatalogDiscount": {
                                            "type": "integer"
                                        },
                                        "QuotaDiscount": {
                                            "type": "integer"
                                        },
                                        "CouponDiscount": {
                                            "type": "integer"
                                        },
                                        "PaymentDiscount": {
                                            "type": "integer"
                                        },
                                        "InstallmentCost": {
                                            "type": "integer"
                                        },
                                        "IpiPercentage": {
                                            "type": "integer"
                                        },
                                        "IpiBaseValue": {
                                            "type": "integer"
                                        },
                                        "IpiCost": {
                                            "type": "integer"
                                        },
                                        "IcmsPercentage": {
                                            "type": "integer"
                                        },
                                        "IcmsBaseValue": {
                                            "type": "integer"
                                        },
                                        "IcmsCost": {
                                            "type": "integer"
                                        },
                                        "IcmsStPercentage": {
                                            "type": "integer"
                                        },
                                        "IcmsStBaseValue": {
                                            "type": "integer"
                                        },
                                        "IcmsStCost": {
                                            "type": "integer"
                                        },
                                        "SubtotalUnit": {
                                            "type": "integer"
                                        },
                                        "SubtotalItem": {
                                            "type": "integer"
                                        },
                                        "TotalProductCost": {
                                            "type": "integer"
                                        },
                                        "MonogramText": {
                                            "type": "string"
                                        },
                                        "GiftPackPrice": {
                                            "type": "integer"
                                        },
                                        "CategoryId": {
                                            "type": "integer"
                                        },
                                        "TypeId": {
                                            "type": "integer"
                                        },
                                        "BrandId": {
                                            "type": "integer"
                                        },
                                        "LineId": {
                                            "type": "integer"
                                        },
                                        "DefinitionId": {
                                            "type": "integer"
                                        },
                                        "CatalogId": {
                                            "type": "integer"
                                        },
                                        "PriceTableId": {
                                            "type": "integer"
                                        },
                                        "DeliveryDays": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyId": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyName": {
                                            "type": "string"
                                        },
                                        "DiscountAmountValue": {
                                            "type": "integer"
                                        },
                                        "DiscountAmountTypeFlag": {
                                            "type": "integer"
                                        },
                                        "IsSynched": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            },
                            "StatusHistory": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "OrderStatusId",
                                        "OrderStatusHistoryId",
                                        "Removed",
                                        "CreatedAt",
                                        "ResponsibleUserId",
                                        "ResponsibleUserName",
                                        "OrderStatusName",
                                        "OrderStatusDescription",
                                        "IsActive",
                                        "Priority",
                                        "PreviousOrderStatusIds",
                                        "ManagerStatusTypeId",
                                        "ManagerStatusTypeName",
                                        "ManagerStatusTypePriority",
                                        "CustomerStatusTypeId",
                                        "CustomerStatusTypeName",
                                        "CustomerStatusTypePriority",
                                        "IsRemovable",
                                        "PossibleNextStatuses"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusHistoryId": {
                                            "type": "integer"
                                        },
                                        "Removed": {
                                            "type": "boolean"
                                        },
                                        "CreatedAt": {
                                            "type": "string"
                                        },
                                        "ResponsibleUserId": {
                                            "type": "integer"
                                        },
                                        "ResponsibleUserName": {
                                            "type": "string"
                                        },
                                        "OrderStatusName": {
                                            "type": "string"
                                        },
                                        "OrderStatusDescription": {
                                            "type": "string"
                                        },
                                        "IsActive": {
                                            "type": "boolean"
                                        },
                                        "Priority": {
                                            "type": "integer"
                                        },
                                        "PreviousOrderStatusIds": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "ManagerStatusTypeName": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypePriority": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeName": {
                                            "type": "string"
                                        },
                                        "CustomerStatusTypePriority": {
                                            "type": "integer"
                                        },
                                        "IsRemovable": {
                                            "type": "boolean"
                                        },
                                        "PossibleNextStatuses": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "OrderStatusId",
                                                    "OrderStatusName",
                                                    "OrderStatusDescription",
                                                    "ManagerStatusTypeId",
                                                    "CustomerStatusTypeId",
                                                    "IsActive",
                                                    "Priority",
                                                    "PreviousStatusIds"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                    "OrderStatusId": {
                                                        "type": "integer"
                                                    },
                                                    "OrderStatusName": {
                                                        "type": "string"
                                                    },
                                                    "OrderStatusDescription": {
                                                        "type": "string"
                                                    },
                                                    "ManagerStatusTypeId": {
                                                        "type": "integer"
                                                    },
                                                    "CustomerStatusTypeId": {
                                                        "type": "integer"
                                                    },
                                                    "IsActive": {
                                                        "type": "boolean"
                                                    },
                                                    "Priority": {
                                                        "type": "integer"
                                                    },
                                                    "PreviousStatusIds": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "PaymentDetailsHistory": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "OrderPaymentStatusId",
                                        "OrderPaymentStatusText",
                                        "PaymentMethodId",
                                        "PaymentMethodTypeId",
                                        "PaymentMethodTypeName",
                                        "PaymentMethodName",
                                        "PaymentMethodImageFilename",
                                        "BillingDays",
                                        "PaymentProviderCode",
                                        "CreditCardBrand",
                                        "CreditCardNumber",
                                        "CreditCardComp",
                                        "CreditCardMonthExpiration",
                                        "CreditCardYearExpiration",
                                        "CreditCardOwnerName",
                                        "CreditCardOwnerFederalRegistry",
                                        "Parcels",
                                        "ParcelValue",
                                        "InterestRate",
                                        "InstallmentCost",
                                        "TransactionDate",
                                        "BankValidation",
                                        "PaymentExpirationDays",
                                        "RiskAnalysisExecutionType",
                                        "DiscountPolicyId",
                                        "DiscountPolicyName",
                                        "DiscountAmountValue",
                                        "DiscountAmountTypeFlag",
                                        "HasPaymentTransactions",
                                        "TransactionsHistory"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "OrderPaymentStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderPaymentStatusText": {
                                            "type": "string"
                                        },
                                        "PaymentMethodId": {
                                            "type": "integer"
                                        },
                                        "PaymentMethodTypeId": {
                                            "type": "integer"
                                        },
                                        "PaymentMethodTypeName": {
                                            "type": "string"
                                        },
                                        "PaymentMethodName": {
                                            "type": "string"
                                        },
                                        "PaymentMethodImageFilename": {
                                            "type": "string"
                                        },
                                        "BillingDays": {
                                            "type": "string"
                                        },
                                        "PaymentProviderCode": {
                                            "type": "string"
                                        },
                                        "CreditCardBrand": {
                                            "type": "string"
                                        },
                                        "CreditCardNumber": {
                                            "type": "string"
                                        },
                                        "CreditCardComp": {
                                            "type": "string"
                                        },
                                        "CreditCardMonthExpiration": {
                                            "type": "string"
                                        },
                                        "CreditCardYearExpiration": {
                                            "type": "string"
                                        },
                                        "CreditCardOwnerName": {
                                            "type": "string"
                                        },
                                        "CreditCardOwnerFederalRegistry": {
                                            "type": "string"
                                        },
                                        "Parcels": {
                                            "type": "integer"
                                        },
                                        "ParcelValue": {
                                            "type": "integer"
                                        },
                                        "InterestRate": {
                                            "type": "integer"
                                        },
                                        "InstallmentCost": {
                                            "type": "integer"
                                        },
                                        "TransactionDate": {
                                            "type": "string"
                                        },
                                        "BankValidation": {
                                            "type": "string"
                                        },
                                        "PaymentExpirationDays": {
                                            "type": "integer"
                                        },
                                        "RiskAnalysisExecutionType": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyId": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyName": {
                                            "type": "string"
                                        },
                                        "DiscountAmountValue": {
                                            "type": "integer"
                                        },
                                        "DiscountAmountTypeFlag": {
                                            "type": "integer"
                                        },
                                        "HasPaymentTransactions": {
                                            "type": "boolean"
                                        },
                                        "TransactionsHistory": {
                                            "type": "array"
                                        }
                                    }
                                }
                            },
                            "Documents": {
                                "type": "array"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "Listagem de Pedidos - Sucesso"
            },
            "Listagem_de_Pedidos_-_Sem_Conte_do": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "TotalRecords": {
                        "type": "integer"
                    },
                    "TotalPages": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "CreatedAfter": {
                                "type": "string"
                            },
                            "ResellerIds": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "Payload": {
                        "type": "array"
                    }
                },
                "x-apim-schema-name": "Listagem de Pedidos - Sem ConteÃºdo"
            },
            "GetOrderDetails_Sucess": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "OrderType": {
                                "type": "string"
                            },
                            "OrderCode": {
                                "type": "string"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "IsSynched": {
                                "type": "boolean"
                            },
                            "SalesUserId": {
                                "type": "integer"
                            },
                            "SourceIpAddress": {
                                "type": "string"
                            },
                            "BuyerRemarks": {
                                "type": "string"
                            },
                            "HasScheduledWithdrawal": {
                                "type": "boolean"
                            },
                            "TotalDeliveryDays": {
                                "type": "integer"
                            },
                            "DeliveryDateLimit": {
                                "type": "string"
                            },
                            "ShippingMethodId": {
                                "type": "integer"
                            },
                            "ShippingMethodName": {
                                "type": "string"
                            },
                            "ShippingDiscountId": {
                                "type": "integer"
                            },
                            "ShippingDiscountName": {
                                "type": "string"
                            },
                            "ShippingDiscountType": {
                                "type": "integer"
                            },
                            "ShippingDiscountAmount": {
                                "type": "integer"
                            },
                            "ProductCost": {
                                "type": "integer"
                            },
                            "ProductDiscount": {
                                "type": "integer"
                            },
                            "ProductDiscountQuota": {
                                "type": "integer"
                            },
                            "ProductDiscountCoupon": {
                                "type": "integer"
                            },
                            "ProductDiscountManual": {
                                "type": "integer"
                            },
                            "ProductDiscountPayment": {
                                "type": "integer"
                            },
                            "ProductDiscountAssociation": {
                                "type": "integer"
                            },
                            "ShippingCost": {
                                "type": "integer"
                            },
                            "ShippingDiscount": {
                                "type": "integer"
                            },
                            "ShippingDiscountCoupon": {
                                "type": "integer"
                            },
                            "ShippingDiscountManual": {
                                "type": "integer"
                            },
                            "PaymentInstallmentCost": {
                                "type": "integer"
                            },
                            "SubtotalProducts": {
                                "type": "integer"
                            },
                            "SubtotalShipping": {
                                "type": "integer"
                            },
                            "IpiBaseValue": {
                                "type": "integer"
                            },
                            "IpiTotalCost": {
                                "type": "integer"
                            },
                            "IcmsBaseValue": {
                                "type": "integer"
                            },
                            "IcmsTotalCost": {
                                "type": "integer"
                            },
                            "IcmsStBaseValue": {
                                "type": "integer"
                            },
                            "IcmsStTotalCost": {
                                "type": "integer"
                            },
                            "TotalOrderValue": {
                                "type": "integer"
                            },
                            "CurrentStatus": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderStatusId": {
                                        "type": "integer"
                                    },
                                    "OrderStatusHistoryId": {
                                        "type": "integer"
                                    },
                                    "Removed": {
                                        "type": "boolean"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "ResponsibleUserId": {
                                        "type": "integer"
                                    },
                                    "ResponsibleUserName": {
                                        "type": "string"
                                    },
                                    "OrderStatusName": {
                                        "type": "string"
                                    },
                                    "OrderStatusDescription": {
                                        "type": "string"
                                    },
                                    "IsActive": {
                                        "type": "boolean"
                                    },
                                    "Priority": {
                                        "type": "integer"
                                    },
                                    "PreviousOrderStatusIds": {
                                        "type": "string"
                                    },
                                    "ManagerStatusTypeId": {
                                        "type": "integer"
                                    },
                                    "ManagerStatusTypeName": {
                                        "type": "string"
                                    },
                                    "ManagerStatusTypePriority": {
                                        "type": "integer"
                                    },
                                    "CustomerStatusTypeId": {
                                        "type": "integer"
                                    },
                                    "CustomerStatusTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerStatusTypePriority": {
                                        "type": "integer"
                                    },
                                    "IsRemovable": {
                                        "type": "boolean"
                                    },
                                    "PossibleNextStatuses": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "OrderStatusId",
                                                "OrderStatusName",
                                                "OrderStatusDescription",
                                                "ManagerStatusTypeId",
                                                "CustomerStatusTypeId",
                                                "IsActive",
                                                "Priority",
                                                "PreviousStatusIds"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "OrderStatusId": {
                                                    "type": "integer"
                                                },
                                                "OrderStatusName": {
                                                    "type": "string"
                                                },
                                                "OrderStatusDescription": {
                                                    "type": "string"
                                                },
                                                "ManagerStatusTypeId": {
                                                    "type": "integer"
                                                },
                                                "CustomerStatusTypeId": {
                                                    "type": "integer"
                                                },
                                                "IsActive": {
                                                    "type": "boolean"
                                                },
                                                "Priority": {
                                                    "type": "integer"
                                                },
                                                "PreviousStatusIds": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "Customer": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CustomerTypeFlag": {
                                        "type": "string"
                                    },
                                    "CustomerTypeName": {
                                        "type": "string"
                                    },
                                    "CurrentProfileId": {
                                        "type": "integer"
                                    },
                                    "CurrentStatusId": {
                                        "type": "integer"
                                    },
                                    "CurrentStatusDescription": {
                                        "type": "string"
                                    },
                                    "EmailAddress": {
                                        "type": "string"
                                    },
                                    "FullName": {
                                        "type": "string"
                                    },
                                    "PersonFederalRegistry": {
                                        "type": "string"
                                    },
                                    "PersonDocument": {
                                        "type": "string"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "LastLoginAt": {
                                        "type": "string"
                                    },
                                    "Birthdate": {
                                        "type": "string"
                                    },
                                    "GenderName": {
                                        "type": "string"
                                    },
                                    "IsMailingEnabled": {
                                        "type": "boolean"
                                    },
                                    "IsBlacklisted": {
                                        "type": "boolean"
                                    },
                                    "Addresses": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "IdCity",
                                                "IdState",
                                                "IdAddressType",
                                                "DsAddress",
                                                "DsNumber",
                                                "DsDistrict",
                                                "NuZip",
                                                "DsCity",
                                                "NuPhoneDDD",
                                                "NuPhone",
                                                "NuMobilePhoneDDD",
                                                "NuMobilePhone",
                                                "NuPhone2",
                                                "IdCompany",
                                                "OrderId",
                                                "OrderAddressTypeId",
                                                "OrderAddressTypeName",
                                                "CustomerAddressId",
                                                "CustomerId",
                                                "CreatedAt",
                                                "Destination",
                                                "DeliveryTo",
                                                "Address",
                                                "PhoneNumbers"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "IdCity": {
                                                    "type": "string"
                                                },
                                                "IdState": {
                                                    "type": "string"
                                                },
                                                "IdAddressType": {
                                                    "type": "integer"
                                                },
                                                "DsAddress": {
                                                    "type": "string"
                                                },
                                                "DsNumber": {
                                                    "type": "string"
                                                },
                                                "DsDistrict": {
                                                    "type": "string"
                                                },
                                                "NuZip": {
                                                    "type": "string"
                                                },
                                                "DsCity": {
                                                    "type": "string"
                                                },
                                                "NuPhoneDDD": {
                                                    "type": "string"
                                                },
                                                "NuPhone": {
                                                    "type": "string"
                                                },
                                                "NuMobilePhoneDDD": {
                                                    "type": "string"
                                                },
                                                "NuMobilePhone": {
                                                    "type": "string"
                                                },
                                                "NuPhone2": {
                                                    "type": "string"
                                                },
                                                "IdCompany": {
                                                    "type": "integer"
                                                },
                                                "OrderId": {
                                                    "type": "integer"
                                                },
                                                "OrderAddressTypeId": {
                                                    "type": "integer"
                                                },
                                                "OrderAddressTypeName": {
                                                    "type": "string"
                                                },
                                                "CustomerAddressId": {
                                                    "type": "integer"
                                                },
                                                "CustomerId": {
                                                    "type": "integer"
                                                },
                                                "CreatedAt": {
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "type": "string"
                                                },
                                                "DeliveryTo": {
                                                    "type": "string"
                                                },
                                                "Address": {
                                                    "type": "object",
                                                    "properties": {
                                                        "StreetTypeId": {
                                                            "type": "integer"
                                                        },
                                                        "StreetName": {
                                                            "type": "string"
                                                        },
                                                        "StreetNumber": {
                                                            "type": "string"
                                                        },
                                                        "Neighborhood": {
                                                            "type": "string"
                                                        },
                                                        "ZipCode": {
                                                            "type": "string"
                                                        },
                                                        "CityId": {
                                                            "type": "string"
                                                        },
                                                        "CityName": {
                                                            "type": "string"
                                                        },
                                                        "StateId": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "PhoneNumbers": {
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "PhoneType",
                                                            "RegionCode",
                                                            "LocalNumber"
                                                        ],
                                                        "type": "object",
                                                        "properties": {
                                                            "PhoneType": {
                                                                "type": "string"
                                                            },
                                                            "RegionCode": {
                                                                "type": "string"
                                                            },
                                                            "LocalNumber": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "PaymentData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "BillingData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "ShippingData": {
                                "type": "object",
                                "properties": {
                                    "IdCity": {
                                        "type": "string"
                                    },
                                    "IdState": {
                                        "type": "string"
                                    },
                                    "IdAddressType": {
                                        "type": "integer"
                                    },
                                    "DsAddress": {
                                        "type": "string"
                                    },
                                    "DsNumber": {
                                        "type": "string"
                                    },
                                    "DsDistrict": {
                                        "type": "string"
                                    },
                                    "NuZip": {
                                        "type": "string"
                                    },
                                    "DsCity": {
                                        "type": "string"
                                    },
                                    "NuPhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuPhone": {
                                        "type": "string"
                                    },
                                    "NuMobilePhoneDDD": {
                                        "type": "string"
                                    },
                                    "NuMobilePhone": {
                                        "type": "string"
                                    },
                                    "NuPhone2": {
                                        "type": "string"
                                    },
                                    "IdCompany": {
                                        "type": "integer"
                                    },
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeId": {
                                        "type": "integer"
                                    },
                                    "OrderAddressTypeName": {
                                        "type": "string"
                                    },
                                    "CustomerAddressId": {
                                        "type": "integer"
                                    },
                                    "CustomerId": {
                                        "type": "integer"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "Destination": {
                                        "type": "string"
                                    },
                                    "DeliveryTo": {
                                        "type": "string"
                                    },
                                    "Address": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "PhoneNumbers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "PhoneType",
                                                "RegionCode",
                                                "LocalNumber"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "PhoneType": {
                                                    "type": "string"
                                                },
                                                "RegionCode": {
                                                    "type": "string"
                                                },
                                                "LocalNumber": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "CurrentPaymentDetails": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "OrderPaymentStatusId": {
                                        "type": "integer"
                                    },
                                    "OrderPaymentStatusText": {
                                        "type": "string"
                                    },
                                    "PaymentMethodId": {
                                        "type": "integer"
                                    },
                                    "PaymentMethodTypeId": {
                                        "type": "integer"
                                    },
                                    "PaymentMethodTypeName": {
                                        "type": "string"
                                    },
                                    "PaymentMethodName": {
                                        "type": "string"
                                    },
                                    "PaymentMethodImageFilename": {
                                        "type": "string"
                                    },
                                    "BillingDays": {
                                        "type": "string"
                                    },
                                    "PaymentProviderCode": {
                                        "type": "string"
                                    },
                                    "CreditCardBrand": {
                                        "type": "string"
                                    },
                                    "CreditCardNumber": {
                                        "type": "string"
                                    },
                                    "CreditCardComp": {
                                        "type": "string"
                                    },
                                    "CreditCardMonthExpiration": {
                                        "type": "string"
                                    },
                                    "CreditCardYearExpiration": {
                                        "type": "string"
                                    },
                                    "CreditCardOwnerName": {
                                        "type": "string"
                                    },
                                    "CreditCardOwnerFederalRegistry": {
                                        "type": "string"
                                    },
                                    "Parcels": {
                                        "type": "integer"
                                    },
                                    "ParcelValue": {
                                        "type": "integer"
                                    },
                                    "InterestRate": {
                                        "type": "integer"
                                    },
                                    "InstallmentCost": {
                                        "type": "integer"
                                    },
                                    "TransactionDate": {
                                        "type": "string"
                                    },
                                    "BankValidation": {
                                        "type": "string"
                                    },
                                    "PaymentExpirationDays": {
                                        "type": "integer"
                                    },
                                    "RiskAnalysisExecutionType": {
                                        "type": "integer"
                                    },
                                    "DiscountPolicyId": {
                                        "type": "integer"
                                    },
                                    "DiscountPolicyName": {
                                        "type": "string"
                                    },
                                    "DiscountAmountValue": {
                                        "type": "integer"
                                    },
                                    "DiscountAmountTypeFlag": {
                                        "type": "integer"
                                    },
                                    "HasPaymentTransactions": {
                                        "type": "boolean"
                                    },
                                    "MostRecentTransaction": {
                                        "type": "object",
                                        "properties": {
                                            "TransactionGuid": {
                                                "type": "string"
                                            },
                                            "Timestamp": {
                                                "type": "string"
                                            },
                                            "Username": {
                                                "type": "string"
                                            },
                                            "HasErrors": {
                                                "type": "boolean"
                                            },
                                            "TransactionData": {
                                                "type": "array",
                                                "items": {
                                                    "required": [
                                                        "TransactionKey",
                                                        "TransactionValue",
                                                        "TransactionInfo",
                                                        "TransactionId",
                                                        "TransactionGuid",
                                                        "TransactionTimestamp",
                                                        "TransactionUsername",
                                                        "TransactionIsError"
                                                    ],
                                                    "type": "object",
                                                    "properties": {
                                                        "TransactionKey": {
                                                            "type": "string"
                                                        },
                                                        "TransactionValue": {
                                                            "type": "string"
                                                        },
                                                        "TransactionInfo": {
                                                            "type": "string"
                                                        },
                                                        "TransactionId": {
                                                            "type": "integer"
                                                        },
                                                        "TransactionGuid": {
                                                            "type": "string"
                                                        },
                                                        "TransactionTimestamp": {
                                                            "type": "string"
                                                        },
                                                        "TransactionUsername": {
                                                            "type": "string"
                                                        },
                                                        "TransactionIsError": {
                                                            "type": "boolean"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "TransactionsHistory": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "TransactionGuid",
                                                "Timestamp",
                                                "Username",
                                                "HasErrors",
                                                "TransactionData"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "TransactionGuid": {
                                                    "type": "string"
                                                },
                                                "Timestamp": {
                                                    "type": "string"
                                                },
                                                "Username": {
                                                    "type": "string"
                                                },
                                                "HasErrors": {
                                                    "type": "boolean"
                                                },
                                                "TransactionData": {
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "TransactionKey",
                                                            "TransactionValue",
                                                            "TransactionInfo",
                                                            "TransactionId",
                                                            "TransactionGuid",
                                                            "TransactionTimestamp",
                                                            "TransactionUsername",
                                                            "TransactionIsError"
                                                        ],
                                                        "type": "object",
                                                        "properties": {
                                                            "TransactionKey": {
                                                                "type": "string"
                                                            },
                                                            "TransactionValue": {
                                                                "type": "string"
                                                            },
                                                            "TransactionInfo": {
                                                                "type": "string"
                                                            },
                                                            "TransactionId": {
                                                                "type": "integer"
                                                            },
                                                            "TransactionGuid": {
                                                                "type": "string"
                                                            },
                                                            "TransactionTimestamp": {
                                                                "type": "string"
                                                            },
                                                            "TransactionUsername": {
                                                                "type": "string"
                                                            },
                                                            "TransactionIsError": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "OriginChannel": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "SaleChannelId": {
                                        "type": "integer"
                                    },
                                    "CustomerProfileId": {
                                        "type": "integer"
                                    },
                                    "CatalogId": {
                                        "type": "integer"
                                    },
                                    "PriceTableId": {
                                        "type": "integer"
                                    },
                                    "SaleChannelName": {
                                        "type": "string"
                                    },
                                    "CustomerProfileName": {
                                        "type": "string"
                                    },
                                    "CatalogName": {
                                        "type": "string"
                                    },
                                    "PriceTableName": {
                                        "type": "string"
                                    },
                                    "CustomerProfileTypeId": {
                                        "type": "integer"
                                    },
                                    "CurrentSaleTypeId": {
                                        "type": "integer"
                                    },
                                    "IsBackorderAllowed": {
                                        "type": "boolean"
                                    },
                                    "IsTaxationRequired": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "SourceStorage": {
                                "type": "object",
                                "properties": {
                                    "OrderId": {
                                        "type": "integer"
                                    },
                                    "StorageId": {
                                        "type": "integer"
                                    },
                                    "StorageName": {
                                        "type": "string"
                                    },
                                    "IsActive": {
                                        "type": "boolean"
                                    },
                                    "IsDefault": {
                                        "type": "boolean"
                                    },
                                    "OrderingNumber": {
                                        "type": "integer"
                                    },
                                    "MinDaysForWithdrawal": {
                                        "type": "integer"
                                    },
                                    "MaxDaysForWithdrawal": {
                                        "type": "integer"
                                    },
                                    "MaxItemsPerDelivery": {
                                        "type": "integer"
                                    },
                                    "SellsVirtualProducts": {
                                        "type": "boolean"
                                    },
                                    "CreatedAt": {
                                        "type": "string"
                                    },
                                    "FederalRegistry": {
                                        "type": "string"
                                    },
                                    "StateRegistry": {
                                        "type": "string"
                                    },
                                    "MainAddress": {
                                        "type": "object",
                                        "properties": {
                                            "StreetTypeId": {
                                                "type": "integer"
                                            },
                                            "StreetName": {
                                                "type": "string"
                                            },
                                            "StreetNumber": {
                                                "type": "string"
                                            },
                                            "Neighborhood": {
                                                "type": "string"
                                            },
                                            "ZipCode": {
                                                "type": "string"
                                            },
                                            "CityId": {
                                                "type": "string"
                                            },
                                            "CityName": {
                                                "type": "string"
                                            },
                                            "StateId": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "Items": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "ProductId",
                                        "ParentId",
                                        "ProductName",
                                        "Quantity",
                                        "ListPrice",
                                        "SalePrice",
                                        "ShippingCost",
                                        "AssociationDiscount",
                                        "ManualDiscount",
                                        "CatalogDiscount",
                                        "QuotaDiscount",
                                        "CouponDiscount",
                                        "PaymentDiscount",
                                        "InstallmentCost",
                                        "IpiPercentage",
                                        "IpiBaseValue",
                                        "IpiCost",
                                        "IcmsPercentage",
                                        "IcmsBaseValue",
                                        "IcmsCost",
                                        "IcmsStPercentage",
                                        "IcmsStBaseValue",
                                        "IcmsStCost",
                                        "SubtotalUnit",
                                        "SubtotalItem",
                                        "TotalProductCost",
                                        "MonogramText",
                                        "GiftPackPrice",
                                        "CategoryId",
                                        "TypeId",
                                        "BrandId",
                                        "LineId",
                                        "DefinitionId",
                                        "CatalogId",
                                        "PriceTableId",
                                        "DeliveryDays",
                                        "DiscountPolicyId",
                                        "DiscountPolicyName",
                                        "DiscountAmountValue",
                                        "DiscountAmountTypeFlag",
                                        "IsSynched"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "ProductId": {
                                            "type": "string"
                                        },
                                        "ParentId": {
                                            "type": "string"
                                        },
                                        "ProductName": {
                                            "type": "string"
                                        },
                                        "Quantity": {
                                            "type": "integer"
                                        },
                                        "ListPrice": {
                                            "type": "integer"
                                        },
                                        "SalePrice": {
                                            "type": "integer"
                                        },
                                        "ShippingCost": {
                                            "type": "integer"
                                        },
                                        "AssociationDiscount": {
                                            "type": "integer"
                                        },
                                        "ManualDiscount": {
                                            "type": "integer"
                                        },
                                        "CatalogDiscount": {
                                            "type": "integer"
                                        },
                                        "QuotaDiscount": {
                                            "type": "integer"
                                        },
                                        "CouponDiscount": {
                                            "type": "integer"
                                        },
                                        "PaymentDiscount": {
                                            "type": "integer"
                                        },
                                        "InstallmentCost": {
                                            "type": "integer"
                                        },
                                        "IpiPercentage": {
                                            "type": "integer"
                                        },
                                        "IpiBaseValue": {
                                            "type": "integer"
                                        },
                                        "IpiCost": {
                                            "type": "integer"
                                        },
                                        "IcmsPercentage": {
                                            "type": "integer"
                                        },
                                        "IcmsBaseValue": {
                                            "type": "integer"
                                        },
                                        "IcmsCost": {
                                            "type": "integer"
                                        },
                                        "IcmsStPercentage": {
                                            "type": "integer"
                                        },
                                        "IcmsStBaseValue": {
                                            "type": "integer"
                                        },
                                        "IcmsStCost": {
                                            "type": "integer"
                                        },
                                        "SubtotalUnit": {
                                            "type": "integer"
                                        },
                                        "SubtotalItem": {
                                            "type": "integer"
                                        },
                                        "TotalProductCost": {
                                            "type": "integer"
                                        },
                                        "MonogramText": {
                                            "type": "string"
                                        },
                                        "GiftPackPrice": {
                                            "type": "integer"
                                        },
                                        "CategoryId": {
                                            "type": "integer"
                                        },
                                        "TypeId": {
                                            "type": "integer"
                                        },
                                        "BrandId": {
                                            "type": "integer"
                                        },
                                        "LineId": {
                                            "type": "integer"
                                        },
                                        "DefinitionId": {
                                            "type": "integer"
                                        },
                                        "CatalogId": {
                                            "type": "integer"
                                        },
                                        "PriceTableId": {
                                            "type": "integer"
                                        },
                                        "DeliveryDays": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyId": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyName": {
                                            "type": "string"
                                        },
                                        "DiscountAmountValue": {
                                            "type": "integer"
                                        },
                                        "DiscountAmountTypeFlag": {
                                            "type": "integer"
                                        },
                                        "IsSynched": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            },
                            "StatusHistory": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "OrderStatusId",
                                        "OrderStatusHistoryId",
                                        "Removed",
                                        "CreatedAt",
                                        "ResponsibleUserId",
                                        "ResponsibleUserName",
                                        "OrderStatusName",
                                        "OrderStatusDescription",
                                        "IsActive",
                                        "Priority",
                                        "PreviousOrderStatusIds",
                                        "ManagerStatusTypeId",
                                        "ManagerStatusTypeName",
                                        "ManagerStatusTypePriority",
                                        "CustomerStatusTypeId",
                                        "CustomerStatusTypeName",
                                        "CustomerStatusTypePriority",
                                        "IsRemovable"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusHistoryId": {
                                            "type": "integer"
                                        },
                                        "Removed": {
                                            "type": "boolean"
                                        },
                                        "CreatedAt": {
                                            "type": "string"
                                        },
                                        "ResponsibleUserId": {
                                            "type": "integer"
                                        },
                                        "ResponsibleUserName": {
                                            "type": "string"
                                        },
                                        "OrderStatusName": {
                                            "type": "string"
                                        },
                                        "OrderStatusDescription": {
                                            "type": "string"
                                        },
                                        "IsActive": {
                                            "type": "boolean"
                                        },
                                        "Priority": {
                                            "type": "integer"
                                        },
                                        "PreviousOrderStatusIds": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "ManagerStatusTypeName": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypePriority": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeName": {
                                            "type": "string"
                                        },
                                        "CustomerStatusTypePriority": {
                                            "type": "integer"
                                        },
                                        "IsRemovable": {
                                            "type": "boolean"
                                        },
                                        "PossibleNextStatuses": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "OrderStatusId",
                                                    "OrderStatusName",
                                                    "OrderStatusDescription",
                                                    "ManagerStatusTypeId",
                                                    "CustomerStatusTypeId",
                                                    "IsActive",
                                                    "Priority",
                                                    "PreviousStatusIds"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                    "OrderStatusId": {
                                                        "type": "integer"
                                                    },
                                                    "OrderStatusName": {
                                                        "type": "string"
                                                    },
                                                    "OrderStatusDescription": {
                                                        "type": "string"
                                                    },
                                                    "ManagerStatusTypeId": {
                                                        "type": "integer"
                                                    },
                                                    "CustomerStatusTypeId": {
                                                        "type": "integer"
                                                    },
                                                    "IsActive": {
                                                        "type": "boolean"
                                                    },
                                                    "Priority": {
                                                        "type": "integer"
                                                    },
                                                    "PreviousStatusIds": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "PaymentDetailsHistory": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderId",
                                        "OrderPaymentStatusId",
                                        "OrderPaymentStatusText",
                                        "PaymentMethodId",
                                        "PaymentMethodTypeId",
                                        "PaymentMethodTypeName",
                                        "PaymentMethodName",
                                        "PaymentMethodImageFilename",
                                        "BillingDays",
                                        "PaymentProviderCode",
                                        "CreditCardBrand",
                                        "CreditCardNumber",
                                        "CreditCardComp",
                                        "CreditCardMonthExpiration",
                                        "CreditCardYearExpiration",
                                        "CreditCardOwnerName",
                                        "CreditCardOwnerFederalRegistry",
                                        "Parcels",
                                        "ParcelValue",
                                        "InterestRate",
                                        "InstallmentCost",
                                        "TransactionDate",
                                        "BankValidation",
                                        "PaymentExpirationDays",
                                        "RiskAnalysisExecutionType",
                                        "DiscountPolicyId",
                                        "DiscountPolicyName",
                                        "DiscountAmountValue",
                                        "DiscountAmountTypeFlag",
                                        "HasPaymentTransactions",
                                        "MostRecentTransaction",
                                        "TransactionsHistory"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderId": {
                                            "type": "integer"
                                        },
                                        "OrderPaymentStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderPaymentStatusText": {
                                            "type": "string"
                                        },
                                        "PaymentMethodId": {
                                            "type": "integer"
                                        },
                                        "PaymentMethodTypeId": {
                                            "type": "integer"
                                        },
                                        "PaymentMethodTypeName": {
                                            "type": "string"
                                        },
                                        "PaymentMethodName": {
                                            "type": "string"
                                        },
                                        "PaymentMethodImageFilename": {
                                            "type": "string"
                                        },
                                        "BillingDays": {
                                            "type": "string"
                                        },
                                        "PaymentProviderCode": {
                                            "type": "string"
                                        },
                                        "CreditCardBrand": {
                                            "type": "string"
                                        },
                                        "CreditCardNumber": {
                                            "type": "string"
                                        },
                                        "CreditCardComp": {
                                            "type": "string"
                                        },
                                        "CreditCardMonthExpiration": {
                                            "type": "string"
                                        },
                                        "CreditCardYearExpiration": {
                                            "type": "string"
                                        },
                                        "CreditCardOwnerName": {
                                            "type": "string"
                                        },
                                        "CreditCardOwnerFederalRegistry": {
                                            "type": "string"
                                        },
                                        "Parcels": {
                                            "type": "integer"
                                        },
                                        "ParcelValue": {
                                            "type": "integer"
                                        },
                                        "InterestRate": {
                                            "type": "integer"
                                        },
                                        "InstallmentCost": {
                                            "type": "integer"
                                        },
                                        "TransactionDate": {
                                            "type": "string"
                                        },
                                        "BankValidation": {
                                            "type": "string"
                                        },
                                        "PaymentExpirationDays": {
                                            "type": "integer"
                                        },
                                        "RiskAnalysisExecutionType": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyId": {
                                            "type": "integer"
                                        },
                                        "DiscountPolicyName": {
                                            "type": "string"
                                        },
                                        "DiscountAmountValue": {
                                            "type": "integer"
                                        },
                                        "DiscountAmountTypeFlag": {
                                            "type": "integer"
                                        },
                                        "HasPaymentTransactions": {
                                            "type": "boolean"
                                        },
                                        "MostRecentTransaction": {
                                            "type": "object",
                                            "properties": {
                                                "TransactionGuid": {
                                                    "type": "string"
                                                },
                                                "Timestamp": {
                                                    "type": "string"
                                                },
                                                "Username": {
                                                    "type": "string"
                                                },
                                                "HasErrors": {
                                                    "type": "boolean"
                                                },
                                                "TransactionData": {
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "TransactionKey",
                                                            "TransactionValue",
                                                            "TransactionInfo",
                                                            "TransactionId",
                                                            "TransactionGuid",
                                                            "TransactionTimestamp",
                                                            "TransactionUsername",
                                                            "TransactionIsError"
                                                        ],
                                                        "type": "object",
                                                        "properties": {
                                                            "TransactionKey": {
                                                                "type": "string"
                                                            },
                                                            "TransactionValue": {
                                                                "type": "string"
                                                            },
                                                            "TransactionInfo": {
                                                                "type": "string"
                                                            },
                                                            "TransactionId": {
                                                                "type": "integer"
                                                            },
                                                            "TransactionGuid": {
                                                                "type": "string"
                                                            },
                                                            "TransactionTimestamp": {
                                                                "type": "string"
                                                            },
                                                            "TransactionUsername": {
                                                                "type": "string"
                                                            },
                                                            "TransactionIsError": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "TransactionsHistory": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "TransactionGuid",
                                                    "Timestamp",
                                                    "Username",
                                                    "HasErrors",
                                                    "TransactionData"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                    "TransactionGuid": {
                                                        "type": "string"
                                                    },
                                                    "Timestamp": {
                                                        "type": "string"
                                                    },
                                                    "Username": {
                                                        "type": "string"
                                                    },
                                                    "HasErrors": {
                                                        "type": "boolean"
                                                    },
                                                    "TransactionData": {
                                                        "type": "array",
                                                        "items": {
                                                            "required": [
                                                                "TransactionKey",
                                                                "TransactionValue",
                                                                "TransactionInfo",
                                                                "TransactionId",
                                                                "TransactionGuid",
                                                                "TransactionTimestamp",
                                                                "TransactionUsername",
                                                                "TransactionIsError"
                                                            ],
                                                            "type": "object",
                                                            "properties": {
                                                                "TransactionKey": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionValue": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionInfo": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionId": {
                                                                    "type": "integer"
                                                                },
                                                                "TransactionGuid": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionTimestamp": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionUsername": {
                                                                    "type": "string"
                                                                },
                                                                "TransactionIsError": {
                                                                    "type": "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "Documents": {
                                "type": "array"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "GetOrderDetails Sucess"
            },
            "SetOrderCurrentStatus_Request": {
                "type": "object",
                "properties": {
                    "OrderId": {
                        "type": "integer"
                    },
                    "OrderStatusId": {
                        "type": "integer"
                    }
                },
                "x-apim-schema-name": "SetOrderCurrentStatus Request"
            },
            "DeleteOrderCurrentStatus_Request": {
                "type": "object",
                "properties": {
                    "OrderId": {
                        "type": "integer"
                    }
                },
                "x-apim-schema-name": "DeleteOrderCurrentStatus Request"
            },
            "GetOrderCurrentStatus_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "OrderStatusId": {
                                "type": "integer"
                            },
                            "OrderStatusHistoryId": {
                                "type": "integer"
                            },
                            "Removed": {
                                "type": "boolean"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "ResponsibleUserId": {
                                "type": "integer"
                            },
                            "ResponsibleUserName": {
                                "type": "string"
                            },
                            "OrderStatusName": {
                                "type": "string"
                            },
                            "OrderStatusDescription": {
                                "type": "string"
                            },
                            "IsActive": {
                                "type": "boolean"
                            },
                            "Priority": {
                                "type": "integer"
                            },
                            "PreviousOrderStatusIds": {
                                "type": "string"
                            },
                            "ManagerStatusTypeId": {
                                "type": "integer"
                            },
                            "ManagerStatusTypeName": {
                                "type": "string"
                            },
                            "ManagerStatusTypePriority": {
                                "type": "integer"
                            },
                            "CustomerStatusTypeId": {
                                "type": "integer"
                            },
                            "CustomerStatusTypeName": {
                                "type": "string"
                            },
                            "CustomerStatusTypePriority": {
                                "type": "integer"
                            },
                            "IsRemovable": {
                                "type": "boolean"
                            },
                            "PossibleNextStatuses": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderStatusId",
                                        "OrderStatusName",
                                        "OrderStatusDescription",
                                        "ManagerStatusTypeId",
                                        "CustomerStatusTypeId",
                                        "IsActive",
                                        "Priority",
                                        "PreviousStatusIds"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusName": {
                                            "type": "string"
                                        },
                                        "OrderStatusDescription": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "IsActive": {
                                            "type": "boolean"
                                        },
                                        "Priority": {
                                            "type": "integer"
                                        },
                                        "PreviousStatusIds": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "GetOrderCurrentStatus Success"
            },
            "SetOrderCurrentStatus_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "OrderStatusId": {
                                "type": "integer"
                            },
                            "OrderStatusHistoryId": {
                                "type": "integer"
                            },
                            "Removed": {
                                "type": "boolean"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "ResponsibleUserId": {
                                "type": "integer"
                            },
                            "ResponsibleUserName": {
                                "type": "string"
                            },
                            "OrderStatusName": {
                                "type": "string"
                            },
                            "OrderStatusDescription": {
                                "type": "string"
                            },
                            "IsActive": {
                                "type": "boolean"
                            },
                            "Priority": {
                                "type": "integer"
                            },
                            "PreviousOrderStatusIds": {
                                "type": "string"
                            },
                            "ManagerStatusTypeId": {
                                "type": "integer"
                            },
                            "ManagerStatusTypeName": {
                                "type": "string"
                            },
                            "ManagerStatusTypePriority": {
                                "type": "integer"
                            },
                            "CustomerStatusTypeId": {
                                "type": "integer"
                            },
                            "CustomerStatusTypeName": {
                                "type": "string"
                            },
                            "CustomerStatusTypePriority": {
                                "type": "integer"
                            },
                            "IsRemovable": {
                                "type": "boolean"
                            },
                            "PossibleNextStatuses": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "OrderStatusId",
                                        "OrderStatusName",
                                        "OrderStatusDescription",
                                        "ManagerStatusTypeId",
                                        "CustomerStatusTypeId",
                                        "IsActive",
                                        "Priority",
                                        "PreviousStatusIds"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "OrderStatusId": {
                                            "type": "integer"
                                        },
                                        "OrderStatusName": {
                                            "type": "string"
                                        },
                                        "OrderStatusDescription": {
                                            "type": "string"
                                        },
                                        "ManagerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "CustomerStatusTypeId": {
                                            "type": "integer"
                                        },
                                        "IsActive": {
                                            "type": "boolean"
                                        },
                                        "Priority": {
                                            "type": "integer"
                                        },
                                        "PreviousStatusIds": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "SetOrderCurrentStatus Success"
            },
            "GetOrderSyncStatus_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "IsSynched": {
                                "type": "boolean"
                            },
                            "LastSynchedAt": {
                                "type": "string"
                            }
                        }
                    }
                },
                "example": {
                    "Success": true,
                    "HttpStatusCode": 200,
                    "RequestParams": {
                        "OrderId": 14
                    },
                    "Payload": {
                        "OrderId": 14,
                        "IsSynched": false
                    }
                },
                "x-apim-schema-name": "GetOrderSyncStatus Success"
            },
            "SetOrderSyncStatus_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "IsSynched": {
                                "type": "boolean"
                            },
                            "LastSynchedAt": {
                                "type": "string"
                            }
                        }
                    }
                },
                "example": {
                    "Success": true,
                    "HttpStatusCode": 200,
                    "RequestParams": {
                        "OrderId": 14
                    },
                    "Payload": {
                        "OrderId": 14,
                        "IsSynched": true,
                        "LastSynchedAt": "2020-12-28T17:46:27.717Z"
                    }
                },
                "x-apim-schema-name": "SetOrderSyncStatus Success"
            },
            "SetOrderSyncStatus_Request": {
                "type": "object",
                "properties": {
                    "IsSynched": {
                        "type": "boolean"
                    }
                },
                "example": {
                    "IsSynched": true
                },
                "x-apim-schema-name": "SetOrderSyncStatus Request"
            },
            "Listagem_de_Pedidos_-_Com_Conte_do": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "TotalRecords": {
                        "type": "integer"
                    },
                    "TotalPages": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "CreatedAfter": {
                                "type": "string"
                            },
                            "ResellerIds": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "Payload": {
                        "type": "array",
                        "items": {
                            "required": [
                                "OrderId",
                                "OrderCode",
                                "IsSynched",
                                "CreatedAt",
                                "CurrentStatusId",
                                "CurrentStatusDescription",
                                "CurrentStatusTypeId",
                                "CurrentStatusTypeDescription",
                                "CustomerId",
                                "CustomerName",
                                "StorageId",
                                "StorageName",
                                "StorageCityId",
                                "StorageCityName",
                                "StorageStateId",
                                "ResellerId",
                                "ResellerName",
                                "PaymentOption",
                                "OrderTotal"
                            ],
                            "type": "object",
                            "properties": {
                                "OrderId": {
                                    "type": "integer"
                                },
                                "OrderCode": {
                                    "type": "string"
                                },
                                "IsSynched": {
                                    "type": "boolean"
                                },
                                "CreatedAt": {
                                    "type": "string"
                                },
                                "CurrentStatusId": {
                                    "type": "integer"
                                },
                                "CurrentStatusDescription": {
                                    "type": "string"
                                },
                                "CurrentStatusTypeId": {
                                    "type": "integer"
                                },
                                "CurrentStatusTypeDescription": {
                                    "type": "string"
                                },
                                "CustomerId": {
                                    "type": "integer"
                                },
                                "CustomerName": {
                                    "type": "string"
                                },
                                "CustomerDocument": {
                                    "type": "string"
                                },
                                "CustomerType": {
                                    "type": "string"
                                },
                                "StorageId": {
                                    "type": "integer"
                                },
                                "StorageName": {
                                    "type": "string"
                                },
                                "StorageCityId": {
                                    "type": "string"
                                },
                                "StorageCityName": {
                                    "type": "string"
                                },
                                "StorageStateId": {
                                    "type": "string"
                                },
                                "ResellerId": {
                                    "type": "integer"
                                },
                                "ResellerName": {
                                    "type": "string"
                                },
                                "PaymentOption": {
                                    "type": "string"
                                },
                                "OrderTotal": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "Listagem de Pedidos - Com ConteÃºdo"
            },
            "ListOrderTracking_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "TotalRecords": {
                        "type": "integer"
                    },
                    "TotalPages": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "array",
                        "items": {
                            "required": [
                                "OrderId",
                                "TrackingCode",
                                "TrackingUrl",
                                "CreatedAt",
                                "ResponsibleId",
                                "ResponsibleName",
                                "IsValid"
                            ],
                            "type": "object",
                            "properties": {
                                "OrderId": {
                                    "type": "integer"
                                },
                                "TrackingCode": {
                                    "type": "string"
                                },
                                "TrackingUrl": {
                                    "type": "string"
                                },
                                "CreatedAt": {
                                    "type": "string"
                                },
                                "ResponsibleId": {
                                    "type": "integer"
                                },
                                "ResponsibleName": {
                                    "type": "string"
                                },
                                "IsValid": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "ListOrderTracking Success"
            },
            "GetOrderTracking_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            },
                            "TrackingUrl": {
                                "type": "string"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "ResponsibleId": {
                                "type": "integer"
                            },
                            "ResponsibleName": {
                                "type": "string"
                            },
                            "IsValid": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "GetOrderTracking Success"
            },
            "SetOrderTracking_Request": {
                "type": "object",
                "properties": {
                    "TrackingCode": {
                        "type": "string"
                    },
                    "TrackingUrl": {
                        "type": "string"
                    }
                },
                "x-apim-schema-name": "SetOrderTracking Request"
            },
            "SetOrderTracking_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            },
                            "TrackingUrl": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            },
                            "TrackingUrl": {
                                "type": "string"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "ResponsibleId": {
                                "type": "integer"
                            },
                            "ResponsibleName": {
                                "type": "string"
                            },
                            "IsValid": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "SetOrderTracking Success"
            },
            "DeleteOrderTracking_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "TrackingCode": {
                                "type": "string"
                            },
                            "TrackingUrl": {
                                "type": "string"
                            },
                            "CreatedAt": {
                                "type": "string"
                            },
                            "LastUpdateAt": {
                                "type": "string"
                            },
                            "ResponsibleId": {
                                "type": "integer"
                            },
                            "ResponsibleName": {
                                "type": "string"
                            },
                            "IsValid": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "DeleteOrderTracking Success"
            },
            "ListOrderInvoices_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "TotalRecords": {
                        "type": "integer"
                    },
                    "TotalPages": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "array",
                        "items": {
                            "required": [
                                "OrderId",
                                "InvoiceNumber",
                                "Description",
                                "IssuanceDate"
                            ],
                            "type": "object",
                            "properties": {
                                "OrderId": {
                                    "type": "integer"
                                },
                                "InvoiceNumber": {
                                    "type": "string"
                                },
                                "Description": {
                                    "type": "string"
                                },
                                "IssuanceDate": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "ListOrderInvoices Success"
            },
            "GetOrderInvoice_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            },
                            "Description": {
                                "type": "string"
                            },
                            "IssuanceDate": {
                                "type": "string"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "GetOrderInvoice Success"
            },
            "SetOrderInvoice_Request": {
                "type": "object",
                "properties": {
                    "InvoiceNumber": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "IssuanceDate": {
                        "type": "string"
                    }
                },
                "x-apim-schema-name": "SetOrderInvoice Request"
            },
            "SetOrderInvoice_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            },
                            "Description": {
                                "type": "string"
                            },
                            "IssuanceDate": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            },
                            "Description": {
                                "type": "string"
                            },
                            "IssuanceDate": {
                                "type": "string"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "SetOrderInvoice Success"
            },
            "DeleteOrderInvoice_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "OrderId": {
                                "type": "integer"
                            },
                            "InvoiceNumber": {
                                "type": "string"
                            },
                            "Description": {
                                "type": "string"
                            },
                            "IssuanceDate": {
                                "type": "string"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "DeleteOrderInvoice Success"
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "Subscription-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}

/// main/java/hub/pulse/integration/fastchannel/docs/price/spec_oapi-3.0.1.json ///
{
    "openapi": "3.0.1",
    "info": {
        "title": "API de PreÃ§os",
        "description": "API para gestÃ£o dos preÃ§os de produtos das lojas virtuais B2B da plataforma Fast Channel.",
        "version": "v1"
    },
    "servers": [
        {
            "url": "https://api.commerce.fastchannel.com/price-management/v1"
        }
    ],
    "paths": {
        "/prices/{ProductId}": {
            "get": {
                "tags": [
                    "PreÃ§os UnitÃ¡rios"
                ],
                "summary": "GetProductPrices",
                "description": "Retorna todos os preÃ§os cadastrados para um determinado produto da loja virtual, de acordo com o SKU informado na requisiÃ§Ã£o.",
                "operationId": "getproductprices",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PreÃ§os cadastrados para um determinado produto.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "HttpStatusCode": 200,
                                    "Success": true,
                                    "Payload": [
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 1,
                                            "LisPrice": 1000,
                                            "SalePrice": 0
                                        },
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 2,
                                            "LisPrice": 1100,
                                            "SalePrice": 0
                                        },
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 3,
                                            "LisPrice": 1200,
                                            "SalePrice": 1199
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PreÃ§os UnitÃ¡rios"
                ],
                "summary": "SetProductPrice",
                "description": "Altera o preÃ§o de um produto especÃ­fico em uma determinada tabela de preÃ§os.",
                "operationId": "setproductprice",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica do produto (SKU) que terÃ¡ o preÃ§o atualizado.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "* PriceTableId : identificaÃ§Ã£o Ãºnica da tabela de preÃ§o que serÃ¡ atualizada\n* ListPrice : preÃ§o \"de\" do produto (**em centavos**) que deverÃ¡ ser considerado para tal tabela de preÃ§o\n* SalePrice : preÃ§o \"por\" do produto (**em centavos**) que deverÃ¡ ser considerado para tal tabela de preÃ§o\n\nAs propriedades _ListPrice_ e _SalePrice_ sÃ£o valores inteiros e representam o preÃ§o em centavos. Por este motivo, o preenchimento dessas propriedades devem obedecer o seguinte formato:\n\n* R$ 0,01 => Para representar este valor, preencher com 1;\n* R$ 1,00  => Para representar este valor, preencher com 100;\n* R$ 1.000,00 => Para representar este valor, preencher com 100000;\n\n---\n\n**AtenÃ§Ã£o!** NÃ£o sÃ£o permitidos o cadastro de \"preÃ§os unitÃ¡rios zerados\" para nenhum produto. Ã considerado um \"**preÃ§o unitÃ¡rio zerado**\" qualquer requisiÃ§Ã£o cujo valor de ambas as propriedades \"_ListPrice_\" e \"_SalePrice_\" sejam iguais a zero.\n\nRealizar o envio de um \"**preÃ§o unitÃ¡rio zerado**\" para a API Fastchannel causarÃ¡ a exclusÃ£o do preÃ§o do produto da tabela de preÃ§os especificada na requisiÃ§Ã£o, bem como removerÃ¡ quaisquer faixas de \"**PreÃ§os Escalonados**\" existentes para o produto na respectiva tabela de preÃ§os.",
                    "content": {
                        "application/json": {
                            "example": {
                                "PriceTableId": 0,
                                "ListPrice": 0,
                                "SalePrice": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "PreÃ§o do produto atualizado em uma determinada tabela de preÃ§os.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "HttpStatusCode": 200,
                                    "Success": true,
                                    "Payload": {
                                        "Id": "abc999",
                                        "PriceTableId": 1,
                                        "LisPrice": 1000,
                                        "SalePrice": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "tags": [
                    "PreÃ§os UnitÃ¡rios"
                ],
                "summary": "ListProductPrices",
                "description": "Retorna a lista de todos os preÃ§os, para todos os produtos cadastrados na loja virtual.",
                "operationId": "listproductprices",
                "parameters": [
                    {
                        "name": "ProductIds",
                        "in": "query",
                        "description": "Opcional. Lista de identificadores Ãºnicos dos produtos (SKU's) que deverÃ£o ser utilizados como filtro dos resultados. Informar os valores separados por vÃ­rgula.",
                        "schema": {
                            "type": "array[string]"
                        }
                    },
                    {
                        "name": "PriceTableIds",
                        "in": "query",
                        "description": "Opcional. Lista de identificadores Ãºnicos das tabelas de preÃ§os que deverÃ£o ser utilizados como filtro dos resultados. Informar os valores separados por vÃ­rgula.",
                        "schema": {
                            "type": "array[int]"
                        }
                    },
                    {
                        "name": "PageNumber",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageSize\". Valor inteiro igual ou maior que um, o qual define o \"nÃºmero da pÃ¡gina\" que deverÃ¡ ser retornado dos resultados.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageNumber\". Valor inteiro igual ou maior que um, o qual define a quantidade de registros retornados \"por pÃ¡gina\".",
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista dos preÃ§os de produtos cadastrados na loja virtual, opcionalmente filtrados por um ou mais SKU's e tambÃ©m um ou mais cÃ³digos de tabelas de preÃ§o.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "HttpStatusCode": 200,
                                    "Success": true,
                                    "Payload": [
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 1,
                                            "LisPrice": 1000,
                                            "SalePrice": 0
                                        },
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 2,
                                            "LisPrice": 1100,
                                            "SalePrice": 0
                                        },
                                        {
                                            "Id": "abc999",
                                            "PriceTableId": 3,
                                            "LisPrice": 1200,
                                            "SalePrice": 1199
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prices/{ProductId}/batches": {
            "get": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "ListProductPriceBatches",
                "description": "Retorna todas as faixas de preÃ§os escalonados atualmente cadastradas para um dado produto, considerando a combinaÃ§Ã£o de todos os filtros informados na requisiÃ§Ã£o.\n\nTodos os filtros sÃ£o opcionais.\n\n**Caso a sua chave de assinatura esteja vinculada a uma tabela de preÃ§os especÃ­fica, o filtro \"PriceTableId\" serÃ¡ preenchido automaticamente para todas as suas requisiÃ§Ãµes.**",
                "operationId": "listproductpricebatches",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os escalonados desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PriceTableId",
                        "in": "query",
                        "description": "Opcional. Identificador Ãºnico (ID) da tabela de preÃ§os relacionada Ã s faixas de preÃ§o escalonado a serem retornadas.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "BatchId",
                        "in": "query",
                        "description": "Opcional. Identificador Ãºnico (ID) da faixa de preÃ§o escalonado a ser retornada.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Status",
                        "in": "query",
                        "description": "Opcional. Flag de status das faixas de preÃ§o escalonado a serem retornadas. Um valor \"true\" indica que apenas as faixas de preÃ§os ativas deverÃ£o ser retornadas. Um valor \"false\" indica que apenas as faixas de preÃ§os desativadas deverÃ£o ser retornadas. Para retornar quaisquer faixas de preÃ§o, basta que este filtro seja omitido da requisiÃ§Ã£o.",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    {
                        "name": "Quantity",
                        "in": "query",
                        "description": "Opcional. Quantidade do produto a ser considerada como filtro das faixas de preÃ§o escalonado a serem retornadas. Apenas as faixas de preÃ§os adequadas a quantidade informada serÃ£o retornadas.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "PageNumber",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageSize\". Valor inteiro igual ou maior que um, o qual define o \"nÃºmero da pÃ¡gina\" que deverÃ¡ ser retornado dos resultados.",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Opcional. ParÃ¢metro para aplicaÃ§Ã£o de paginaÃ§Ã£o aos resultados, e que deve ser utilizado em conjunto com o parÃ¢metro \"PageNumber\". Valor inteiro igual ou maior que um, o qual define a quantidade de registros retornados \"por pÃ¡gina\".",
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de faixas de preÃ§o escalonado cadastradas para um determinado produto.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Lista_das_Faixas_de_Pre_o_Escalonado_"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "PriceTableId": 2,
                                        "ProductId": "31428700"
                                    },
                                    "Payload": [
                                        {
                                            "BatchId": 1,
                                            "ProductId": "31428700",
                                            "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                            "PriceTableId": 2,
                                            "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                            "UnitaryPrice": 9000,
                                            "MinimumBatchSize": 10,
                                            "MaximumBatchSize": 19,
                                            "UnitaryPriceForBatch": 8820,
                                            "BatchDisabled": false
                                        },
                                        {
                                            "BatchId": 2,
                                            "ProductId": "31428700",
                                            "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                            "PriceTableId": 2,
                                            "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                            "UnitaryPrice": 9000,
                                            "MinimumBatchSize": 20,
                                            "MaximumBatchSize": 49,
                                            "UnitaryPriceForBatch": 8550,
                                            "BatchDisabled": false
                                        },
                                        {
                                            "BatchId": 3,
                                            "ProductId": "31428700",
                                            "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                            "PriceTableId": 2,
                                            "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                            "UnitaryPrice": 9000,
                                            "MinimumBatchSize": 50,
                                            "MaximumBatchSize": 99,
                                            "UnitaryPriceForBatch": 8370,
                                            "BatchDisabled": false
                                        },
                                        {
                                            "BatchId": 4,
                                            "ProductId": "31428700",
                                            "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                            "PriceTableId": 2,
                                            "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                            "UnitaryPrice": 9000,
                                            "MinimumBatchSize": 100,
                                            "MaximumBatchSize": 999,
                                            "UnitaryPriceForBatch": 8100,
                                            "BatchDisabled": false
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "CreateProductPriceBatch",
                "description": "Cria uma nova faixa de preÃ§o escalonado para um dado produto, em uma determinada tabela de preÃ§os.\n\n**ObservaÃ§Ã£o! Caso a sua chave de assinatura esteja vinculada a uma tabela de preÃ§os especÃ­fica, a propriedade \"PriceTableId\" da requisiÃ§Ã£o serÃ¡ sempre preenchida automaticamente, para todas as suas requisiÃ§Ãµes, e portanto nÃ£o precisarÃ¡ ser enviada em nenhuma das suas requisiÃ§Ãµes.**",
                "operationId": "createproductpricebatch",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "**AtenÃ§Ã£o! Caso sua chave de assinatura esteja vinculada a uma tabela de preÃ§os especÃ­fica, a propriedade \"_PriceTableId_\" poderÃ¡ ser omitida das requisiÃ§Ãµes. Do contrÃ¡rio, o preenchimento dessa propriedade serÃ¡ sempre obrigatÃ³rio.**",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Informa__es_B_sicas_para_Cria__o_de_uma_Nova_Faixa_de_Pre_o_Escalonado"
                            },
                            "example": {
                                "PriceTableId": 1,
                                "MinimumBatchSize": 6,
                                "MaximumBatchSize": 11,
                                "UnitaryPriceForBatch": 890,
                                "BatchDisabled": false
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Retorno de sucesso caso a nova faixa de preÃ§o escalonado tenha sido cadastrada."
                    }
                }
            }
        },
        "/prices/{ProductId}/batches/{BatchId}": {
            "put": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "UpdateProductPriceBatch",
                "description": "Atualiza uma faixa de preÃ§o escalonado existente para um dado produto, em uma determinada tabela de preÃ§os. Os dados da faixa de preÃ§o escalonado recÃ©m atualizada serÃ£o retornados apÃ³s a atualizaÃ§Ã£o da respectiva faixa.\n\n**AnteÃ§Ã£o!** Caso nÃ£o exista uma faixa de preÃ§o escalonado correspondente aos parÃ¢metros da requisiÃ§Ã£o, um erro HTTP 404 (NotFound) serÃ¡ retornado.",
                "operationId": "5fb3c80023a32abbb16b2d63",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "BatchId",
                        "in": "path",
                        "description": "Identificador Ãºnico (ID) da faixa de preÃ§o escalonado que serÃ¡ atualizada.",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "description": "**AtenÃ§Ã£o!**\nTodas as propriedades da requisiÃ§Ã£o de atualizaÃ§Ã£o sÃ£o opcionais. Ou seja, as propriedades que forem omitidas da requisiÃ§Ã£o serÃ£o mantidas inalteradas em nossa base.\n\nOu seja, Ã© possÃ­vel enviar uma requisiÃ§Ã£o de atualizaÃ§Ã£o da faixa de preÃ§o escalonado de forma a atualizar apenas o valor do preÃ§o unitÃ¡rio escalonado de tal faixa.\n\nContudo, nÃ£o Ã© possÃ­vel alterar a tabela de preÃ§os a que tal faixa de preÃ§o escalonado estÃ¡ vinculada. Para tanto, recomendamos a exclusÃ£o da faixa existente e posterior criaÃ§Ã£o de uma nova faixa de preÃ§o, vinculada a tabela de preÃ§os adequada.\n\nAlÃ©m disso, caso a propriedade \"**UnitaryPriceForBatch**\" seja enviada no corpo da requisiÃ§Ã£o, seu valor precisa ser **maior do que zero**, obrigatoriamente.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Informa__es_B_sicas_para_Atualiza__o_de_uma_Faixa_de_Pre_o_Escalonado"
                            },
                            "example": {
                                "MinimumBatchSize": 6,
                                "MaximumBatchSize": 11,
                                "UnitaryPriceForBatch": 849,
                                "BatchDisabled": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Resposta de sucesso recebida apÃ³s a atualizaÃ§Ã£o de uma determinada faixa de preÃ§o escalonado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Informa__es_Detalhadas_de_uma_Faixa_de_Pre_o_Escalonado"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "PriceTableId": 2,
                                        "ProductId": "31428700",
                                        "BatchId": 5
                                    },
                                    "Payload": {
                                        "BatchId": 5,
                                        "ProductId": "31428700",
                                        "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                        "PriceTableId": 2,
                                        "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                        "UnitaryPrice": 9000,
                                        "MinimumBatchSize": 1000,
                                        "MaximumBatchSize": 9999,
                                        "UnitaryPriceForBatch": 7500,
                                        "BatchDisabled": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "DeleteProductPriceBatch",
                "description": "Remove uma faixa de preÃ§o escalonado existente para um dado produto, em uma determinada tabela de preÃ§os. Os dados da faixa de preÃ§o escalonado removida serÃ£o retornados apÃ³s a exclusÃ£o da respectiva faixa.\n\n**AnteÃ§Ã£o!** Caso nÃ£o exista uma faixa de preÃ§o escalonado correspondente aos parÃ¢metros da requisiÃ§Ã£o, um erro HTTP 404 (NotFound) serÃ¡ retornado.",
                "operationId": "5fb3c97ed7fdacb9a4fe20dc",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "BatchId",
                        "in": "path",
                        "description": "Identificador Ãºnico (ID) da faixa de preÃ§o escalonado que serÃ¡ removida.",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retorno de sucesso da exclusÃ£o da faixa de preÃ§o escalonado, contendo as informaÃ§Ãµes da faixa de preÃ§o escalonado que foi recÃ©m-excluÃ­da.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Informa__es_Detalhadas_de_uma_Faixa_de_Pre_o_Escalonado"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "PriceTableId": 2,
                                        "ProductId": "31428700",
                                        "BatchId": 5
                                    },
                                    "Payload": {
                                        "BatchId": 5,
                                        "ProductId": "31428700",
                                        "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                        "PriceTableId": 2,
                                        "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                        "UnitaryPrice": 9000,
                                        "MinimumBatchSize": 1000,
                                        "MaximumBatchSize": 9999,
                                        "UnitaryPriceForBatch": 7500,
                                        "BatchDisabled": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "GetProductPriceBatch",
                "description": "ObtÃ©m as informaÃ§Ãµes detalhadas de uma faixa de preÃ§o escalonado existente para um dado produto, em uma determinada tabela de preÃ§os.",
                "operationId": "5fb3df520c6baf4024e0d3b9",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "BatchId",
                        "in": "path",
                        "description": "Identificador Ãºnico (ID) da faixa de preÃ§o escalonado que serÃ¡ atualizada.",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resposta de sucesso recebida apÃ³s a consulta de uma determinada faixa de preÃ§o escalonado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Informa__es_Detalhadas_de_uma_Faixa_de_Pre_o_Escalonado"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "PriceTableId": 2,
                                        "ProductId": "31428700",
                                        "BatchId": 5
                                    },
                                    "Payload": {
                                        "BatchId": 5,
                                        "ProductId": "31428700",
                                        "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                        "PriceTableId": 2,
                                        "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                        "UnitaryPrice": 9000,
                                        "MinimumBatchSize": 1000,
                                        "MaximumBatchSize": 9999,
                                        "UnitaryPriceForBatch": 7500,
                                        "BatchDisabled": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prices/{ProductId}/batches/filter/{Quantity}": {
            "get": {
                "tags": [
                    "PreÃ§os Escalonados"
                ],
                "summary": "FilterProductPriceBatch",
                "description": "ObtÃ©m as informaÃ§Ãµes detalhadas de uma faixa de preÃ§o escalonado existente para um dado produto, em uma determinada tabela de preÃ§os, considerando uma quantidade especÃ­fica a ser comercializada.\n\n**ObservaÃ§Ã£o! Caso a sua chave de assinatura esteja vinculada a uma tabela de preÃ§os especÃ­fica, o parÃ¢metro \"PriceTableId\" serÃ¡ preenchido automaticamente para todas as suas requisiÃ§Ãµes, e portanto nÃ£o precisarÃ¡ ser enviado.**",
                "operationId": "5fb3e09295cf8cf77791722a",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro dos preÃ§os desejados.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Quantity",
                        "in": "path",
                        "description": "Quantidade do produto a ser considerada na comercializaÃ§Ã£o.",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "PriceTableId",
                        "in": "query",
                        "description": "ObrigatÃ³rio (vide observaÃ§Ã£o acima). Identificador Ãºnico da tabela de preÃ§os da faixa de preÃ§o escalonado a ser considerada.",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Anuncia quais tipos de conteÃºdo, expressos como MIME types, o seu cliente Ã© capaz de entender.",
                        "required": true,
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resposta de sucesso recebida apÃ³s a consulta de uma determinada faixa de preÃ§o escalonado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Informa__es_Detalhadas_de_uma_Faixa_de_Pre_o_Escalonado"
                                },
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "PriceTableId": 2,
                                        "ProductId": "31428700",
                                        "BatchId": 5
                                    },
                                    "Payload": {
                                        "BatchId": 5,
                                        "ProductId": "31428700",
                                        "ProductName": "Havoline SemissintÃ©tico SAE 10W-40 API SN- Granel",
                                        "PriceTableId": 2,
                                        "PriceTableName": "ÃTRIA - Tabela de PreÃ§os",
                                        "UnitaryPrice": 9000,
                                        "MinimumBatchSize": 1000,
                                        "MaximumBatchSize": 9999,
                                        "UnitaryPriceForBatch": 7500,
                                        "BatchDisabled": false
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resposta da API caso nÃ£o haja uma faixa de preÃ§o escalonado que atenda Ã  quantidade de unidades informada na requisiÃ§Ã£o."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Lista_das_Faixas_de_Pre_o_Escalonado_": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "PriceTableId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "array",
                        "items": {
                            "required": [
                                "BatchId",
                                "ProductId",
                                "ProductName",
                                "PriceTableId",
                                "PriceTableName",
                                "UnitaryPrice",
                                "MinimumBatchSize",
                                "MaximumBatchSize",
                                "UnitaryPriceForBatch",
                                "BatchDisabled"
                            ],
                            "type": "object",
                            "properties": {
                                "BatchId": {
                                    "type": "integer"
                                },
                                "ProductId": {
                                    "type": "string"
                                },
                                "ProductName": {
                                    "type": "string"
                                },
                                "PriceTableId": {
                                    "type": "integer"
                                },
                                "PriceTableName": {
                                    "type": "string"
                                },
                                "UnitaryPrice": {
                                    "type": "integer"
                                },
                                "MinimumBatchSize": {
                                    "type": "integer"
                                },
                                "MaximumBatchSize": {
                                    "type": "integer"
                                },
                                "UnitaryPriceForBatch": {
                                    "type": "integer"
                                },
                                "BatchDisabled": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "Lista das Faixas de PreÃ§o Escalonado "
            },
            "Informa__es_Detalhadas_de_uma_Faixa_de_Pre_o_Escalonado": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "PriceTableId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            },
                            "BatchId": {
                                "type": "integer"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "BatchId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            },
                            "ProductName": {
                                "type": "string"
                            },
                            "PriceTableId": {
                                "type": "integer"
                            },
                            "PriceTableName": {
                                "type": "string"
                            },
                            "UnitaryPrice": {
                                "type": "integer"
                            },
                            "MinimumBatchSize": {
                                "type": "integer"
                            },
                            "MaximumBatchSize": {
                                "type": "integer"
                            },
                            "UnitaryPriceForBatch": {
                                "type": "integer"
                            },
                            "BatchDisabled": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "InformaÃ§Ãµes Detalhadas de uma Faixa de PreÃ§o Escalonado"
            },
            "Informa__es_B_sicas_para_Atualiza__o_de_uma_Faixa_de_Pre_o_Escalonado": {
                "required": [
                    "MinimumBatchSize",
                    "MaximumBatchSize",
                    "UnitaryPriceForBatch"
                ],
                "type": "object",
                "properties": {
                    "MinimumBatchSize": {
                        "type": "integer",
                        "description": "Quantidade mÃ­nima de itens do produto no carrinho para que a faixa de preÃ§o escalonado possa ser aplicada."
                    },
                    "MaximumBatchSize": {
                        "type": "integer",
                        "description": "Quantidade mÃ¡xima de itens do produto no carrinho para que a faixa de preÃ§o escalonado possa ser aplicada."
                    },
                    "UnitaryPriceForBatch": {
                        "type": "integer",
                        "description": "PreÃ§o unitÃ¡rio escalonado (com desconto) a ser considerado para o produto no carrinho, quando a quantidade de itens do produto no carrinho esteja entre os valores _MinimumBatchSize_ e _MaximumBatchSize_."
                    },
                    "BatchDisabled": {
                        "type": "boolean",
                        "description": "Flag opcional que permite a criaÃ§Ã£o de uma faixa de preÃ§o escalonado que nÃ£o estarÃ¡ em vigor na loja. Ã utilizado principalmente para se desativar temporariamente uma faixa de preÃ§o escalonado, sem ter que remover a mesma."
                    }
                },
                "x-apim-schema-name": "InformaÃ§Ãµes BÃ¡sicas para AtualizaÃ§Ã£o de uma Faixa de PreÃ§o Escalonado"
            },
            "Informa__es_B_sicas_para_Cria__o_de_uma_Nova_Faixa_de_Pre_o_Escalonado": {
                "required": [
                    "PriceTableId",
                    "MinimumBatchSize",
                    "MaximumBatchSize",
                    "UnitaryPriceForBatch"
                ],
                "type": "object",
                "properties": {
                    "PriceTableId": {
                        "type": "integer",
                        "description": "Identificador Ãºnico da tabela de preÃ§os onde a faixa de preÃ§o escalonado deverÃ¡ ser criada. **AtenÃ§Ã£o! Caso sua chave de assinatura esteja vinculada a uma tabela de preÃ§os especÃ­fica, essa propriedade poderÃ¡ ser omitida da requisiÃ§Ã£o. Do contrÃ¡rio, seu preenchimento Ã© obrigatÃ³rio.**"
                    },
                    "MinimumBatchSize": {
                        "type": "integer",
                        "description": "Quantidade mÃ­nima de itens do produto no carrinho para que a faixa de preÃ§o escalonado possa ser aplicada."
                    },
                    "MaximumBatchSize": {
                        "type": "integer",
                        "description": "Quantidade mÃ¡xima de itens do produto no carrinho para que a faixa de preÃ§o escalonado possa ser aplicada."
                    },
                    "UnitaryPriceForBatch": {
                        "type": "integer",
                        "description": "PreÃ§o unitÃ¡rio escalonado (com desconto) a ser considerado para o produto no carrinho, quando a quantidade de itens do produto no carrinho esteja entre os valores _MinimumBatchSize_ e _MaximumBatchSize_."
                    },
                    "BatchDisabled": {
                        "type": "boolean",
                        "description": "Flag opcional que permite a criaÃ§Ã£o de uma faixa de preÃ§o escalonado que nÃ£o estarÃ¡ em vigor na loja. Ã utilizado principalmente para se desativar temporariamente uma faixa de preÃ§o escalonado, sem ter que remover a mesma."
                    }
                },
                "x-apim-schema-name": "InformaÃ§Ãµes BÃ¡sicas para CriaÃ§Ã£o de uma Nova Faixa de PreÃ§o Escalonado"
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "Subscription-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}

/// main/java/hub/pulse/integration/fastchannel/docs/price.md ///
# DocumentaÃ§Ã£o do MÃ³dulo Price (FastChannel)

## VisÃ£o Geral
O mÃ³dulo Price integra e gerencia preÃ§os de produtos entre o sistema local (ERP/Sankhya) e a API FastChannel, permitindo:
- Consulta de preÃ§os por produto ou tabela
- AtualizaÃ§Ã£o de preÃ§os individuais ou em lote
- Gerenciamento de lotes de preÃ§os (PriceBatch)
- SincronizaÃ§Ã£o entre ERP e FastChannel

## Principais Classes
- **PriceApi**: Implementa a lÃ³gica de integraÃ§Ã£o HTTP com a API FastChannel.
- **PriceApiClient**: Facilita a sincronizaÃ§Ã£o entre ERP e FastChannel.
- **PriceService**: LÃ³gica de negÃ³cio local para manipulaÃ§Ã£o de preÃ§os.
- **Price**: Modelo de dados de preÃ§o.
- **PriceBatch**: Modelo de lote de preÃ§os.

## Exemplos de Uso

### Consultar preÃ§os de um produto

```java
import hub.pulse.integration.fastchannel.api.PriceApi;
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;

PriceApi priceApi = ... // injetado ou instanciado
ApiResponse<List<Price>> response = priceApi.getProductPrices("SKU123");
if(response !=null&&response.

isSuccess()){
List<Price> prices = response.getPayload();
// processar preÃ§os
}
```

### Atualizar preÃ§o de um produto

```java
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;

Price price = new Price();
price.

setProductId("SKU123");
price.

setPriceTableId(1);
price.

setListPrice(1000); // R$ 10,00 em centavos
price.

setSalePrice(900);  // R$ 9,00 em centavos

ApiResponse<Void> resp = priceApi.setProductPrice("SKU123", price);
if(resp !=null&&resp.

isSuccess()){
        // sucesso
        }
```

### Sincronizar preÃ§os do ERP para FastChannel

```java
import hub.pulse.integration.fastchannel.client.PriceApiClient;

PriceApiClient client = new PriceApiClient(priceApi, sankhyaClient);
int count = client.syncPricesFromERP(Arrays.asList("SKU123", "SKU456"));
```

### Buscar lote de preÃ§os escalonados

```java
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.PriceBatch;

ApiResponse<List<PriceBatch>> batches = priceApi.getProductPriceBatches("SKU123", 1, true, null);
```

## Testes
Os testes unitÃ¡rios estÃ£o em `src/integration/fastchannel/api/PriceApiTest.java` e cobrem os principais fluxos.

## ObservaÃ§Ãµes
- Os preÃ§os sÃ£o manipulados em centavos (inteiro), mas o modelo Price tambÃ©m expÃµe mÃ©todos para reais (double).
- Para integraÃ§Ã£o, configure corretamente autenticaÃ§Ã£o e URLs no `PriceConfig`.
- MÃ©todos retornam `ApiResponse<T>`, sempre verifique `isSuccess()` antes de usar o payload.

---

Para dÃºvidas ou exemplos adicionais, consulte os arquivos de teste ou entre em contato com o responsÃ¡vel tÃ©cnico.

/// main/java/hub/pulse/integration/fastchannel/docs/stock/spec_oapi-3.0.1.json ///
{
    "openapi": "3.0.1",
    "info": {
        "title": "API de Estoque",
        "description": "API para gestÃ£o dos estoques dos produtos das lojas virtuais B2B da plataforma Fast Channel.",
        "version": "v1"
    },
    "servers": [
        {
            "url": "https://api.commerce.fastchannel.com/stock-management/v1"
        }
    ],
    "paths": {
        "/stock": {
            "get": {
                "summary": "ListProductStock",
                "description": "Retorna lista (array) de posiÃ§Ãµes de estoque de todos os produtos cadastrados na sua Conta Fastchannel.\n\n**IMPORTANTE!** Por motivos de desempenho, essa consulta possui um limite mÃ¡ximo de quantidade de registros que poderÃ£o ser retornados de uma sÃ³ vez. Caso sua consulta exceda o limite mÃ¡ximo de 1500 registros por resultado, ajuste os parÃ¢metros utilizados para consulta a fim de reduzir a quantidade de registros retornados.",
                "operationId": "listproductstock",
                "parameters": [
                    {
                        "name": "StorageId",
                        "in": "query",
                        "description": "Identificador Ãºnico (ID) do CD (Loja/DepÃ³sito/Filial) para ser utilizado como filtro dos registros que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ],
                            "type": "Number"
                        }
                    },
                    {
                        "name": "StorageIds",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos de CD's (Lojas/DepÃ³sitos/Filiais) para ser utilizada como filtro dos registros que deverÃ£o ser retornados.",
                        "schema": {
                            "enum": [
                                "1,2,3,4"
                            ],
                            "type": "Array[number]"
                        }
                    },
                    {
                        "name": "ProductId",
                        "in": "query",
                        "description": "Identificador Ãºnico (SKU) do produto que deverÃ¡ ser utilizado como filtro dos resultados.",
                        "schema": {
                            "enum": [
                                "XYZ123"
                            ],
                            "type": "String"
                        }
                    },
                    {
                        "name": "ProductIds",
                        "in": "query",
                        "description": "Lista de identificadores Ãºnicos (SKU's) dos produtos que deverÃ£o ser utilizados como filtro dos resultados.",
                        "schema": {
                            "enum": [
                                "XYZ123,ABC456,RST890"
                            ],
                            "type": "Array[string]"
                        }
                    },
                    {
                        "name": "SearchText",
                        "in": "query",
                        "description": "Termo de pesquisa textual para ser utilizado como filtro dos produtos que serÃ£o utilizados como filtro dos resultados.",
                        "schema": {
                            "enum": [
                                "Lorem Ipsum"
                            ],
                            "type": "String"
                        }
                    },
                    {
                        "name": "PageNumber",
                        "in": "query",
                        "description": "Permite a aplicaÃ§Ã£o de paginaÃ§Ã£o nos resultados que deverÃ£o ser retornados, definindo o nÃºmero da pÃ¡gina de resultados desejada (deve ser utilizado em conjunto com o parÃ¢metro 'PageSize').",
                        "schema": {
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ],
                            "type": "Number"
                        }
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Permite a aplicaÃ§Ã£o de paginaÃ§Ã£o nos resultados que deverÃ£o ser retornados, definindo o limite mÃ¡ximo de registros por pÃ¡gina a serem retornados (deve ser utilizado em conjunto com o parÃ¢metro 'PageNumber').",
                        "schema": {
                            "enum": [
                                "100",
                                "200",
                                "500"
                            ],
                            "type": "Number"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "Tipo de conteÃºdo aceito como resposta",
                        "schema": {
                            "enum": [
                                "application/json"
                            ],
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "example": {
                                    "HttpStatusCode": 200,
                                    "Success": true,
                                    "TotalRecords": 5,
                                    "TotalPages": 1,
                                    "RequestParams": {
                                        "StorageId": 2
                                    },
                                    "Payload": [
                                        {
                                            "StorageId": 2,
                                            "StorageFederalRegistry": "57343950000136",
                                            "StorageName": "Moda CD 2",
                                            "ResellerId": 1,
                                            "ResellerName": "Revendedor padrÃ£o",
                                            "ProductId": "3093308",
                                            "ProductName": "Bolsa com Patch Sabrina Sato Bege",
                                            "Quantity": 100,
                                            "MinimumQuantity": 0,
                                            "HandlingTime": 0,
                                            "IsExternalStockEnabled": false,
                                            "ExternalStockHandlingTime": 0
                                        },
                                        {
                                            "StorageId": 2,
                                            "StorageFederalRegistry": "57343950000136",
                                            "StorageName": "Moda CD 2",
                                            "ResellerId": 1,
                                            "ResellerName": "Revendedor padrÃ£o",
                                            "ProductId": "3093359",
                                            "ProductName": "Bolsa com Patch Sabrina Sato Caramelo",
                                            "Quantity": 100,
                                            "MinimumQuantity": 0,
                                            "HandlingTime": 0,
                                            "IsExternalStockEnabled": false,
                                            "ExternalStockHandlingTime": 0
                                        },
                                        {
                                            "StorageId": 2,
                                            "StorageFederalRegistry": "57343950000136",
                                            "StorageName": "Moda CD 2",
                                            "ResellerId": 1,
                                            "ResellerName": "Revendedor padrÃ£o",
                                            "ProductId": "b123456",
                                            "ProductName": "teste wdf",
                                            "Quantity": 1,
                                            "MinimumQuantity": 0,
                                            "HandlingTime": 0,
                                            "IsExternalStockEnabled": false,
                                            "ExternalStockHandlingTime": 0
                                        },
                                        {
                                            "StorageId": 2,
                                            "StorageFederalRegistry": "57343950000136",
                                            "StorageName": "Moda CD 2",
                                            "ResellerId": 1,
                                            "ResellerName": "Revendedor padrÃ£o",
                                            "ProductId": "DC125BRANCO",
                                            "ProductName": "Camisa Chef Dish Washer",
                                            "Quantity": 0,
                                            "MinimumQuantity": 0,
                                            "HandlingTime": 0,
                                            "IsExternalStockEnabled": false,
                                            "ExternalStockHandlingTime": 0
                                        },
                                        {
                                            "StorageId": 2,
                                            "StorageFederalRegistry": "57343950000136",
                                            "StorageName": "Moda CD 2",
                                            "ResellerId": 1,
                                            "ResellerName": "Revendedor padrÃ£o",
                                            "ProductId": "DC125BRANCO_G_220",
                                            "ProductName": "Camisa Chef Dish Washer - BRANCO - G -220",
                                            "Quantity": 30,
                                            "MinimumQuantity": 0,
                                            "HandlingTime": 0,
                                            "IsExternalStockEnabled": false,
                                            "ExternalStockHandlingTime": 0
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stock/{ProductId}": {
            "get": {
                "summary": "GetProductStock",
                "description": "Retorna a posiÃ§Ã£o de estoque de um determinado produto cadastrado na loja virtual, de acordo com o SKU informado na requisiÃ§Ã£o.",
                "operationId": "getproductstock",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro da posiÃ§Ã£o de estoque desejada.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "StorageId",
                        "in": "query",
                        "description": "Identificador Ãºnico do Centro de DistribuiÃ§Ã£o da posiÃ§Ã£o de estoque desejada",
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PosiÃ§Ã£o de estoque de um determinado produto.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "HttpStatusCode": 200,
                                    "Success": true,
                                    "RequestParams": {
                                        "StorageId": 1,
                                        "ProductId": "DC125BRANCO_G_220"
                                    },
                                    "Payload": {
                                        "StorageId": 1,
                                        "StorageFederalRegistry": "18615342000181",
                                        "StorageName": "Moda CD 1",
                                        "ResellerId": 1,
                                        "ResellerName": "Revendedor padrÃ£o",
                                        "ProductId": "DC125BRANCO_G_220",
                                        "ProductName": "Camisa Chef Dish Washer - BRANCO - G -220",
                                        "Quantity": 30,
                                        "MinimumQuantity": 0,
                                        "HandlingTime": 0,
                                        "IsExternalStockEnabled": false,
                                        "ExternalStockHandlingTime": 0
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "SetProductStock",
                "description": "Redefine a posiÃ§Ã£o de estoque atual de um determinado produto da loja virtual.",
                "operationId": "setproductstock",
                "parameters": [
                    {
                        "name": "ProductId",
                        "in": "path",
                        "description": "IdentificaÃ§Ã£o Ãºnica (SKU) do produto a ser utilizado como filtro da posiÃ§Ã£o de estoque desejada.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "**Campos ObrigatÃ³rios:**\n * StorageId : valor numÃ©rico inteiro maior do que zero, o qual pode ser obtido atravÃ©s das consultas de estoque de um produto/SKU qualquer.\n\nApenas o campo **StorageId** Ã© de preenchimento obrigatÃ³rio. Todos os demais campos sÃ£o opcionais e devem ser preenchidos de acordo com a necessidade de atualizaÃ§Ã£o.\n\nEnvie na sua requisiÃ§Ã£o apenas os campos que deseja atualizar. As informaÃ§Ãµes que nÃ£o estiverem presentes na requisiÃ§Ã£o de atualizaÃ§Ã£o serÃ£o mantidas sem alteraÃ§Ãµes no banco de dados.",
                    "content": {
                        "application/json": {
                            "example": {
                                "StorageId": 1,
                                "Quantity": 19,
                                "MinimumQuantity": 0,
                                "HandlingTime": 0,
                                "IsExternalStockEnabled": false,
                                "ExternalStockHandlingTime": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "PosiÃ§Ã£o de estoque atualizada para o produto da loja virtual.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "Success": true,
                                    "HttpStatusCode": 200,
                                    "RequestParams": {
                                        "StorageId": 10,
                                        "ProductId": "DC125PR_P",
                                        "Quantity": 19
                                    },
                                    "Payload": {
                                        "IsAvailable": true,
                                        "StorageId": 10,
                                        "StorageFederalRegistry": "25481094000199",
                                        "StorageName": "WW Uniformes Profissionais Ltda",
                                        "ResellerId": 9,
                                        "ResellerName": "WW Uniformes Profissionais Ltda",
                                        "ProductId": "DC125PR_P",
                                        "ProductDefinitionId": 1,
                                        "ProductName": "Camisa Casual BotÃ£o PressÃ£o Preta - P",
                                        "Quantity": 19,
                                        "MinimumQuantity": 0,
                                        "HandlingTime": 0,
                                        "IsExternalStockEnabled": false,
                                        "ExternalStockHandlingTime": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "GetProductStock_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "StorageId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "IsAvailable": {
                                "type": "boolean"
                            },
                            "StorageId": {
                                "type": "integer"
                            },
                            "StorageFederalRegistry": {
                                "type": "string"
                            },
                            "StorageName": {
                                "type": "string"
                            },
                            "ResellerId": {
                                "type": "integer"
                            },
                            "ResellerName": {
                                "type": "string"
                            },
                            "ProductId": {
                                "type": "string"
                            },
                            "ProductDefinitionId": {
                                "type": "integer"
                            },
                            "ProductName": {
                                "type": "string"
                            },
                            "Quantity": {
                                "type": "integer"
                            },
                            "MinimumQuantity": {
                                "type": "integer"
                            },
                            "HandlingTime": {
                                "type": "integer"
                            },
                            "IsExternalStockEnabled": {
                                "type": "boolean"
                            },
                            "ExternalStockHandlingTime": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "GetProductStock Success"
            },
            "IncrementProductStock_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "StorageId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "Before": {
                                "type": "object",
                                "properties": {
                                    "IsAvailable": {
                                        "type": "boolean"
                                    },
                                    "StorageId": {
                                        "type": "integer"
                                    },
                                    "StorageFederalRegistry": {
                                        "type": "string"
                                    },
                                    "StorageName": {
                                        "type": "string"
                                    },
                                    "ResellerId": {
                                        "type": "integer"
                                    },
                                    "ResellerName": {
                                        "type": "string"
                                    },
                                    "ProductId": {
                                        "type": "string"
                                    },
                                    "ProductDefinitionId": {
                                        "type": "integer"
                                    },
                                    "ProductName": {
                                        "type": "string"
                                    },
                                    "Quantity": {
                                        "type": "integer"
                                    },
                                    "MinimumQuantity": {
                                        "type": "integer"
                                    },
                                    "HandlingTime": {
                                        "type": "integer"
                                    },
                                    "IsExternalStockEnabled": {
                                        "type": "boolean"
                                    },
                                    "ExternalStockHandlingTime": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "IncrementProductStock Success"
            },
            "ListProductStock_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "TotalRecords": {
                        "type": "integer"
                    },
                    "TotalPages": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "ProductId": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "array",
                        "items": {
                            "required": [
                                "IsAvailable",
                                "StorageId",
                                "StorageFederalRegistry",
                                "StorageName",
                                "ResellerId",
                                "ResellerName",
                                "ProductId",
                                "ProductDefinitionId",
                                "ProductName",
                                "Quantity",
                                "MinimumQuantity",
                                "HandlingTime",
                                "IsExternalStockEnabled",
                                "ExternalStockHandlingTime"
                            ],
                            "type": "object",
                            "properties": {
                                "IsAvailable": {
                                    "type": "boolean"
                                },
                                "StorageId": {
                                    "type": "integer"
                                },
                                "StorageFederalRegistry": {
                                    "type": "string"
                                },
                                "StorageName": {
                                    "type": "string"
                                },
                                "ResellerId": {
                                    "type": "integer"
                                },
                                "ResellerName": {
                                    "type": "string"
                                },
                                "ProductId": {
                                    "type": "string"
                                },
                                "ProductDefinitionId": {
                                    "type": "integer"
                                },
                                "ProductName": {
                                    "type": "string"
                                },
                                "Quantity": {
                                    "type": "integer"
                                },
                                "MinimumQuantity": {
                                    "type": "integer"
                                },
                                "HandlingTime": {
                                    "type": "integer"
                                },
                                "IsExternalStockEnabled": {
                                    "type": "boolean"
                                },
                                "ExternalStockHandlingTime": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                },
                "x-apim-schema-name": "ListProductStock Success"
            },
            "SetProductStock_Request": {
                "type": "object",
                "properties": {
                    "StorageId": {
                        "type": "integer"
                    },
                    "StorageCustomId": {
                        "type": "string"
                    },
                    "StorageFederalRegistry": {
                        "type": "string"
                    },
                    "ProductId": {
                        "type": "string"
                    },
                    "ProductDefinitionId": {
                        "type": "integer"
                    },
                    "Quantity": {
                        "type": "integer"
                    },
                    "MinimumQuantity": {
                        "type": "integer"
                    },
                    "HandlingTime": {
                        "type": "integer"
                    },
                    "IsExternalStockEnabled": {
                        "type": "boolean"
                    },
                    "ExternalStockHandlingTime": {
                        "type": "integer"
                    }
                },
                "x-apim-schema-name": "SetProductStock Request"
            },
            "SetProductStock_Success": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean"
                    },
                    "HttpStatusCode": {
                        "type": "integer"
                    },
                    "RequestParams": {
                        "type": "object",
                        "properties": {
                            "StorageId": {
                                "type": "integer"
                            },
                            "ProductId": {
                                "type": "string"
                            }
                        }
                    },
                    "Payload": {
                        "type": "object",
                        "properties": {
                            "IsAvailable": {
                                "type": "boolean"
                            },
                            "StorageId": {
                                "type": "integer"
                            },
                            "StorageFederalRegistry": {
                                "type": "string"
                            },
                            "StorageName": {
                                "type": "string"
                            },
                            "ResellerId": {
                                "type": "integer"
                            },
                            "ResellerName": {
                                "type": "string"
                            },
                            "ProductId": {
                                "type": "string"
                            },
                            "ProductDefinitionId": {
                                "type": "integer"
                            },
                            "ProductName": {
                                "type": "string"
                            },
                            "Quantity": {
                                "type": "integer"
                            },
                            "MinimumQuantity": {
                                "type": "integer"
                            },
                            "HandlingTime": {
                                "type": "integer"
                            },
                            "IsExternalStockEnabled": {
                                "type": "boolean"
                            },
                            "ExternalStockHandlingTime": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "x-apim-schema-name": "SetProductStock Success"
            },
            "IncrementProductStock_Request": {
                "type": "object",
                "properties": {
                    "StorageId": {
                        "type": "integer"
                    },
                    "StorageCustomId": {
                        "type": "string"
                    },
                    "StorageFederalRegistry": {
                        "type": "string"
                    },
                    "ProductId": {
                        "type": "string"
                    },
                    "Quantity": {
                        "type": "integer"
                    }
                },
                "x-apim-schema-name": "IncrementProductStock Request"
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "Subscription-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}

/// main/java/hub/pulse/integration/fastchannel/docs/stock.md ///
# DocumentaÃ§Ã£o de IntegraÃ§Ã£o - Stock (FastChannel)

## Exemplos de Uso

### Listar estoque

```java
import hub.pulse.integration.fastchannel.api.StockApi;
import hub.pulse.integration.fastchannel.model.Stock;

StockApi stockApi = new StockApi();
List<Stock> stocks = stockApi.listProductStock(null, null, null, null, null, 1, 100);
```

### Consultar estoque de um produto

```java
import hub.pulse.integration.fastchannel.model.Stock;

Stock stock = stockApi.getProductStock("SKU123", null);
```

### Atualizar estoque de um produto
```java
String stockPayload = "{\"StorageId\":1,\"Quantity\":100}";
boolean ok = stockApi.setProductStock("SKU123", stockPayload);
```

/// main/java/hub/pulse/integration/fastchannel/examples/PriceIntegrationExample.java ///
package hub.pulse.integration.fastchannel.examples;

import hub.pulse.integration.erp.SankhyaERPClient;
import hub.pulse.integration.fastchannel.api.PriceApi;
import hub.pulse.integration.fastchannel.client.PriceApiClient;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.model.PriceBatch;
import sankhya.api.SankhyaAPI;

import java.util.Arrays;
import java.util.List;

/**
 * Example class demonstrating the integration between Sankhya ERP and FastChannel API for prices
 */
public class PriceIntegrationExample {

    public static void main(String[] args) {
        try {
            // Initialize the SankhyaAPI and SankhyaERPClient
            SankhyaAPI sankhyaAPI = new SankhyaAPI();
            SankhyaERPClient sankhyaClient = new SankhyaERPClient(sankhyaAPI);

            // Initialize the PriceApi
            PriceApi priceApi = new PriceApi();

            // Initialize the PriceApiClient
            PriceApiClient priceApiClient = new PriceApiClient(priceApi, sankhyaClient);

            // Example 1: Sync prices from Sankhya to FastChannel
            List<String> productIds = Arrays.asList("PROD001", "PROD002", "PROD003");
            int syncedFromERP = priceApiClient.syncPricesFromERP(productIds);
            System.out.println("Synced " + syncedFromERP + " prices from Sankhya to FastChannel");

            // Example 2: Sync prices from FastChannel to Sankhya
            int syncedToERP = priceApiClient.syncPricesToERP(productIds);
            System.out.println("Synced " + syncedToERP + " prices from FastChannel to Sankhya");

            // Example 3: Get prices for a specific product
            List<Price> prices = priceApi.getProductPrices("PROD001");
            System.out.println("Found " + prices.size() + " prices for product PROD001");
            for (Price price : prices) {
                System.out.println("Price Table: " + price.getPriceTableId() +
                        ", List Price: " + price.getListPrice() +
                        ", Sale Price: " + price.getSalePrice());
            }

            // Example 4: Update a price
            Price newPrice = new Price();
            newPrice.setPriceTableId(1);
            newPrice.setListPrice(1500); // R$ 15,00
            newPrice.setSalePrice(1200); // R$ 12,00
            boolean updated = priceApi.setProductPrice("PROD001", newPrice);
            System.out.println("Price update success: " + updated);

            // Example 5: Get price batches for a product
            List<PriceBatch> batches = priceApi.getProductPriceBatches("PROD001", 1, null, null);
            System.out.println("Found " + batches.size() + " price batches for product PROD001");
            for (PriceBatch batch : batches) {
                System.out.println("Batch ID: " + batch.getBatchId() +
                        ", Min Qty: " + batch.getMinimumBatchSize() +
                        ", Max Qty: " + batch.getMaximumBatchSize() +
                        ", Price: " + batch.getUnitaryPriceForBatch());
            }

            // Example 6: Get the appropriate price batch for a quantity
            PriceBatch batchForQuantity = priceApiClient.getPriceBatchForQuantity("PROD001", 20, 1);
            if (batchForQuantity != null) {
                System.out.println("For quantity 20, the price is: " + batchForQuantity.getUnitaryPriceForBatch());
            } else {
                System.out.println("No price batch found for quantity 20");
            }

        } catch (Exception e) {
            System.err.println("Error in price integration example: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

/// main/java/hub/pulse/integration/fastchannel/exception/InvalidPriceException.java ///
package hub.pulse.integration.fastchannel.exception;

public class InvalidPriceException extends RuntimeException {
    public InvalidPriceException(String message) {
        super(message);
    }
}

/// main/java/hub/pulse/integration/fastchannel/exception/PriceNotFoundException.java ///
package hub.pulse.integration.fastchannel.exception;

public class PriceNotFoundException extends RuntimeException {
    public PriceNotFoundException(String message) {
        super(message);
    }
}

/// main/java/hub/pulse/integration/fastchannel/model/ApiResponse.java ///
package hub.pulse.integration.fastchannel.model;

import com.fasterxml.jackson.annotation.JsonAlias;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Representa o formato padrÃ£o de resposta da API FastChannel
 * @param <T> Tipo de dado contido no payload da resposta
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ApiResponse<T> {
    @JsonProperty("Success")
    @JsonAlias({"success"})
    private boolean success;

    @JsonProperty("HttpStatusCode")
    @JsonAlias({"httpStatusCode"})
    private int httpStatusCode;

    @JsonProperty("RequestParams")
    @JsonAlias({"requestParams"})
    private Object requestParams;

    @JsonProperty("Payload")
    @JsonAlias({"payload"})
    private T payload;

    // Construtor padrÃ£o
    public ApiResponse() {
    }

    // Construtor completo
    public ApiResponse(boolean success, String message, T payload) {
        this.success = success;
        this.payload = payload;
        this.httpStatusCode = success ? 200 : 400;
        this.requestParams = message;
    }

    public boolean isSuccess() {
        return success;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public int getHttpStatusCode() {
        return httpStatusCode;
    }

    public void setHttpStatusCode(int httpStatusCode) {
        this.httpStatusCode = httpStatusCode;
    }

    public Object getRequestParams() {
        return requestParams;
    }

    public void setRequestParams(Object requestParams) {
        this.requestParams = requestParams;
    }

    public T getPayload() {
        return payload;
    }

    public void setPayload(T payload) {
        this.payload = payload;
    }

    @Override
    public String toString() {
        return "ApiResponse{" +
                "success=" + success +
                ", httpStatusCode=" + httpStatusCode +
                ", requestParams=" + requestParams +
                ", payload=" + payload +
                '}';
    }
}

/// main/java/hub/pulse/integration/fastchannel/model/Order.java ///
package hub.pulse.integration.fastchannel.model;

public class Order {
    private int orderId;
    private String orderCode;
    private boolean isSynched;
    private String createdAt;
    private int currentStatusId;
    private String currentStatusDescription;

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public String getOrderCode() {
        return orderCode;
    }

    public void setOrderCode(String orderCode) {
        this.orderCode = orderCode;
    }

    public boolean isSynched() {
        return isSynched;
    }

    public void setSynched(boolean synched) {
        isSynched = synched;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public int getCurrentStatusId() {
        return currentStatusId;
    }

    public void setCurrentStatusId(int currentStatusId) {
        this.currentStatusId = currentStatusId;
    }

    public String getCurrentStatusDescription() {
        return currentStatusDescription;
    }

    public void setCurrentStatusDescription(String currentStatusDescription) {
        this.currentStatusDescription = currentStatusDescription;
    }

    // TODO: Adicionar campos detalhados conforme schemas da OpenAPI (endereÃ§os, valores, itens, status, tracking, etc.)
    // Exemplo de campos adicionais conforme OpenAPI:
    // private List<OrderItem> items;
    // private String customerDocument;
    // private List<OrderTracking> tracking;
    // private List<OrderInvoice> invoices;
    // private String syncStatus;
    // private String shippingAddress;
    // private String billingAddress;
    // private double totalAmount;
    // ...
}

/// main/java/hub/pulse/integration/fastchannel/model/OrderInvoice.java ///
package hub.pulse.integration.fastchannel.model;

import java.time.OffsetDateTime;

/**
 * Represents an invoice associated with an order in the FastChannel API
 */
public class OrderInvoice {
    private int orderId;
    private String invoiceNumber;
    private String description;
    private OffsetDateTime issuanceDate;

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public OffsetDateTime getIssuanceDate() {
        return issuanceDate;
    }

    public void setIssuanceDate(OffsetDateTime issuanceDate) {
        this.issuanceDate = issuanceDate;
    }

    @Override
    public String toString() {
        return "OrderInvoice{" +
                "orderId=" + orderId +
                ", invoiceNumber='" + invoiceNumber + '\'' +
                ", description='" + description + '\'' +
                ", issuanceDate=" + issuanceDate +
                '}';
    }
}

/// main/java/hub/pulse/integration/fastchannel/model/Price.java ///
package hub.pulse.integration.fastchannel.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;

/**
 * Represents a price entry in the FastChannel API.
 * The fields are based on common pricing attributes and assumptions from the project context.
 * The @JsonProperty annotations are used to map JSON fields to Java fields,
 * which is useful when converting from DynamicData.
 */
public class Price {

    @JsonProperty("ProductId")
    private String productId;

    @JsonProperty("PriceTableId")
    private BigDecimal priceTableId;

    @JsonProperty("ListPrice")
    private BigDecimal listPrice;

    @JsonProperty("SalePrice")
    private BigDecimal salePrice;

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public BigDecimal getPriceTableId() {
        return priceTableId;
    }

    public void setPriceTableId(BigDecimal priceTableId) {
        this.priceTableId = priceTableId;
    }

    public BigDecimal getListPrice() {
        return listPrice;
    }

    public void setListPrice(BigDecimal listPrice) {
        this.listPrice = listPrice;
    }

    public BigDecimal getSalePrice() {
        return salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    @Override
    public String toString() {
        return "Price{" +
                "productId='" + productId + '\'' +
                ", priceTableId=" + priceTableId.toString() +
                ", listPrice=" + listPrice +
                ", salePrice=" + salePrice +
                '}';
    }
}


/// main/java/hub/pulse/integration/fastchannel/model/PriceBatch.java ///
package hub.pulse.integration.fastchannel.model;

import com.fasterxml.jackson.annotation.JsonAlias;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;

/**
 * Represents a price batch (preÃ§o escalonado) in the FastChannel API
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class PriceBatch {
    @JsonProperty("BatchId")
    @JsonAlias({"batchId"})
    private BigDecimal batchId;
    
    @JsonProperty("ProductId")
    @JsonAlias({"productId"})
    private String productId;
    
    @JsonProperty("ProductName")
    @JsonAlias({"productName"})
    private String productName;
    
    @JsonProperty("PriceTableId")
    @JsonAlias({"priceTableId"})
    private BigDecimal priceTableId;
    
    @JsonProperty("PriceTableName")
    @JsonAlias({"priceTableName"})
    private String priceTableName;
    
    @JsonProperty("UnitaryPrice")
    @JsonAlias({"unitaryPrice"})
    private BigDecimal unitaryPrice;
    
    @JsonProperty("MinimumBatchSize")
    @JsonAlias({"minimumBatchSize"})
    private BigDecimal minimumBatchSize;
    
    @JsonProperty("MaximumBatchSize")
    @JsonAlias({"maximumBatchSize"})
    private BigDecimal maximumBatchSize;
    
    @JsonProperty("UnitaryPriceForBatch")
    @JsonAlias({"unitaryPriceForBatch"})
    private BigDecimal unitaryPriceForBatch;
    
    @JsonProperty("BatchDisabled")
    @JsonAlias({"batchDisabled"})
    private boolean batchDisabled;

    public BigDecimal getBatchId() {
        return batchId;
    }

    public void setBatchId(BigDecimal batchId) {
        this.batchId = batchId;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public BigDecimal getPriceTableId() {
        return priceTableId;
    }

    public void setPriceTableId(BigDecimal priceTableId) {
        this.priceTableId = priceTableId;
    }

    public String getPriceTableName() {
        return priceTableName;
    }

    public void setPriceTableName(String priceTableName) {
        this.priceTableName = priceTableName;
    }

    public BigDecimal getUnitaryPrice() {
        return unitaryPrice;
    }

    public void setUnitaryPrice(BigDecimal unitaryPrice) {
        this.unitaryPrice = unitaryPrice;
    }

    public BigDecimal getMinimumBatchSize() {
        return minimumBatchSize;
    }

    public void setMinimumBatchSize(BigDecimal minimumBatchSize) {
        this.minimumBatchSize = minimumBatchSize;
    }

    public BigDecimal getMaximumBatchSize() {
        return maximumBatchSize;
    }

    public void setMaximumBatchSize(BigDecimal maximumBatchSize) {
        this.maximumBatchSize = maximumBatchSize;
    }

    public BigDecimal getUnitaryPriceForBatch() {
        return unitaryPriceForBatch;
    }

    public void setUnitaryPriceForBatch(BigDecimal unitaryPriceForBatch) {
        this.unitaryPriceForBatch = unitaryPriceForBatch;
    }

    public boolean isBatchDisabled() {
        return batchDisabled;
    }

    public void setBatchDisabled(boolean batchDisabled) {
        this.batchDisabled = batchDisabled;
    }

    @Override
    public String toString() {
        return "PriceBatch{" +
                "batchId=" + batchId +
                ", productId='" + productId + '\'' +
                ", productName='" + productName + '\'' +
                ", priceTableId=" + priceTableId +
                ", priceTableName='" + priceTableName + '\'' +
                ", unitaryPrice=" + unitaryPrice +
                ", minimumBatchSize=" + minimumBatchSize +
                ", maximumBatchSize=" + maximumBatchSize +
                ", unitaryPriceForBatch=" + unitaryPriceForBatch +
                ", batchDisabled=" + batchDisabled +
                '}';
    }
}

/// main/java/hub/pulse/integration/fastchannel/model/Stock.java ///
package hub.pulse.integration.fastchannel.model;

import java.math.BigDecimal;

public class Stock {
    private String productId;
    private BigDecimal quantity;
    private String location;
    private String lastUpdated;

    // Getters and Setters
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public BigDecimal getQuantity() {
        return quantity;
    }

    public void setQuantity(BigDecimal quantity) {
        this.quantity = quantity;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(String lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    // TODO: Adicionar campos detalhados conforme schemas da OpenAPI (StorageId, MinimumQuantity, HandlingTime, etc.
    // Exemplo de campos adicionais conforme OpenAPI:
    // private int storageId;
    // private int minimumQuantity;
    // private int handlingTime;
    // private boolean isExternalStockEnabled;
    // ...
}

/// main/java/hub/pulse/integration/fastchannel/repository/PriceRepository.java ///
package hub.pulse.integration.fastchannel.repository;

import hub.pulse.integration.fastchannel.model.Price;

import java.util.List;
import java.util.Optional;

public interface PriceRepository {
    Price save(Price price);
    Price update(Price price);
    List<Price> findByProductId(String productId);
    Optional<Price> findByProductAndPriceTable(String productId, Integer priceTableId);
}

/// main/java/hub/pulse/integration/fastchannel/service/FastChannelPriceService.java ///
package hub.pulse.integration.fastchannel.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import hub.pulse.integration.fastchannel.api.RetryableHttpClient;
import hub.pulse.integration.fastchannel.auth.AuthenticationManager;
import hub.pulse.integration.fastchannel.config.PriceConfig;
import hub.pulse.integration.fastchannel.model.ApiResponse;
import hub.pulse.integration.fastchannel.model.Price;
import hub.pulse.integration.fastchannel.model.PriceBatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import static hub.pulse.integration.fastchannel.auth.AuthenticationManager.*;

@Service
public class FastChannelPriceService {
    private static final Logger logger = LoggerFactory.getLogger(FastChannelPriceService.class);
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    private final RetryableHttpClient retryableHttpClient;
    private final int maxRetries;
    private final String GET_PRICES;

    public FastChannelPriceService(PriceConfig priceConfig, HttpClient httpClient, ObjectMapper objectMapper, RetryableHttpClient retryableHttpClient) {
        this.httpClient = httpClient;
        this.objectMapper = objectMapper;
        this.retryableHttpClient = retryableHttpClient;
        this.maxRetries = priceConfig.getMaxRetries();
        this.GET_PRICES = priceConfig.getGetPricesUrl();
    }

    // Construtor legado para compatibilidade
    public FastChannelPriceService(PriceConfig priceConfig) {
        this(priceConfig, HttpClient.newBuilder().build(), new ObjectMapper(), new RetryableHttpClient());
    }

    public ApiResponse<List<Price>> getPrices() {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = getInstance().getHeaders();
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<List<Price>> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<List<Price>>>() {}
                    );
                    logger.info("Prices retrieved successfully: {}", apiResponse);
                    return apiResponse;
                } else {
                    logger.error("Failed to retrieve prices: {} - {}", response.statusCode(), response.body());
                    return new ApiResponse<>(false, "Erro ao buscar preÃ§os: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error getting prices", e);
                return new ApiResponse<>(false, "Erro inesperado ao buscar preÃ§os", null);
            }
        }, maxRetries);
    }

    private String buildQueryParams(Map<String, Object> params) {
        StringBuilder sb = new StringBuilder();
        params.forEach((key, value) -> {
            if (value != null) {
                if (sb.length() > 0) sb.append("&");
                sb.append(URLEncoder.encode(key, StandardCharsets.UTF_8));
                sb.append("=");
                sb.append(URLEncoder.encode(String.valueOf(value), StandardCharsets.UTF_8));
            }
        });
        return sb.length() > 0 ? "?" + sb.toString() : "";
    }

    public ApiResponse<List<Price>> getPrices(List<String> productIds, List<Integer> priceTableIds,
                                              Integer pageNumber, Integer pageSize) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                Map<String, Object> params = new java.util.LinkedHashMap<>();
                if (productIds != null && !productIds.isEmpty())
                    params.put("ProductIds", String.join(",", productIds));
                if (priceTableIds != null && !priceTableIds.isEmpty())
                    params.put("PriceTableIds", priceTableIds.stream().map(String::valueOf).reduce((a, b) -> a + "," + b).orElse(""));
                if (pageNumber != null)
                    params.put("PageNumber", pageNumber);
                if (pageSize != null)
                    params.put("PageSize", pageSize);
                String query = buildQueryParams(params);
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES + query))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<List<Price>> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<List<Price>>>() {}
                    );
                    logger.info("Prices retrieved successfully with params {}: {}", query, apiResponse);
                    return apiResponse;
                } else {
                    logger.error("Failed to retrieve prices with params {}: {} - {}", query, response.statusCode(), response.body());
                    return new ApiResponse<>(false, "Erro ao buscar preÃ§os: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error getting prices with params", e);
                return new ApiResponse<>(false, "Erro inesperado ao buscar preÃ§os", null);
            }
        }, maxRetries);
    }

    public ApiResponse<Void> deletePrice(String productId, Integer priceTableId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                StringBuilder uriBuilder = new StringBuilder(GET_PRICES);
                uriBuilder.append("/").append(productId);
                if (priceTableId != null) {
                    uriBuilder.append("?PriceTableId=").append(priceTableId);
                }
                HttpRequest request = HttpRequest.newBuilder()
                        .DELETE()
                        .uri(URI.create(uriBuilder.toString()))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 204) {
                    logger.info("Price deleted successfully for product {} and price table {}", productId, priceTableId);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(204);
                    return apiResponse;
                } else {
                    logger.error("Failed to delete price: {} - {}", response.statusCode(), response.body());
                    return new ApiResponse<>(false, "Erro ao deletar preÃ§o: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error deleting price for product {} and price table {}", productId, priceTableId, e);
                return new ApiResponse<>(false, "Erro inesperado ao deletar preÃ§o", null);
            }
        }, maxRetries);
    }

    public ApiResponse<List<Price>> updatePrices(List<Price> priceData) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                String pricesJson = objectMapper.writeValueAsString(priceData);
                HttpRequest request = HttpRequest.newBuilder()
                        .PUT(HttpRequest.BodyPublishers.ofString(pricesJson))
                        .uri(URI.create(GET_PRICES))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Content-Type", "application/json")
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<List<Price>> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<List<Price>>>() {
                            }
                    );
                    logger.info("Bulk prices updated successfully: {}", apiResponse);
                    return apiResponse;
                } else {
                    logger.error("Failed to update prices: {} - {} | Data: {}", response.statusCode(), response.body(), priceData);
                    return new ApiResponse<>(false, "Erro ao atualizar preÃ§os: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error updating prices | Data: {}", priceData, e);
                return new ApiResponse<>(false, "Erro inesperado ao atualizar preÃ§os", null);
            }
        }, maxRetries);
    }

    public ApiResponse<Void> setProductPrice(String productId, Price price) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                String priceJson = objectMapper.writeValueAsString(price);
                HttpRequest request = HttpRequest.newBuilder()
                        .PUT(HttpRequest.BodyPublishers.ofString(priceJson))
                        .uri(URI.create(GET_PRICES + "/" + productId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Content-Type", "application/json")
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    logger.info("Price updated successfully for product {}: {}", productId, price);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(200);
                    return apiResponse;
                } else {
                    logger.error("Failed to update price for product {}: {} - {} | Data: {}", productId, response.statusCode(), response.body(), price);
                    return new ApiResponse<>(false, "Erro ao atualizar preÃ§o: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error updating price for product {} | Data: {}", productId, price, e);
                return new ApiResponse<>(false, "Erro inesperado ao atualizar preÃ§o", null);
            }
        }, maxRetries);
    }

    public ApiResponse<List<Price>> getProductPrices(String productId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES + "/" + productId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<List<Price>> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<List<Price>>>() {
                            }
                    );
                    logger.info("Product prices retrieved successfully for product {}", productId);
                    return apiResponse;
                } else {
                    logger.error("Failed to retrieve product prices: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error getting product prices", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<List<PriceBatch>> getProductPriceBatches(String productId, Integer priceTableId,
                                                                Boolean status, Integer quantity) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                StringBuilder queryParams = new StringBuilder("?");
                if (priceTableId != null) {
                    queryParams.append("PriceTableId=").append(priceTableId).append("&");
                }
                if (status != null) {
                    queryParams.append("Status=").append(status).append("&");
                }
                if (quantity != null) {
                    queryParams.append("Quantity=").append(quantity);
                }
                String params = queryParams.toString();
                if (params.endsWith("&")) {
                    params = params.substring(0, params.length() - 1);
                }
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches" + params))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<List<PriceBatch>> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<List<PriceBatch>>>() {
                            }
                    );
                    logger.info("Price batches retrieved successfully for product {}", productId);
                    return apiResponse;
                } else {
                    logger.error("Failed to retrieve price batches: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error getting price batches", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<Void> createPrice(Price price) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                String priceJson = objectMapper.writeValueAsString(price);
                HttpRequest request = HttpRequest.newBuilder()
                        .POST(HttpRequest.BodyPublishers.ofString(priceJson))
                        .uri(URI.create(GET_PRICES))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Content-Type", "application/json")
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 201) {
                    logger.info("Price created successfully: {}", price);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(201);
                    return apiResponse;
                } else {
                    logger.error("Failed to create price: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error creating price", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<PriceBatch> getProductPriceBatch(String productId, int batchId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches/" + batchId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<PriceBatch> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<PriceBatch>>() {
                            }
                    );
                    logger.info("Price batch retrieved successfully for product {} and batch {}", productId, batchId);
                    return apiResponse;
                } else {
                    logger.error("Failed to retrieve price batch: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error getting price batch", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<Void> createProductPriceBatch(String productId, PriceBatch batch) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                String batchJson = objectMapper.writeValueAsString(batch);
                HttpRequest request = HttpRequest.newBuilder()
                        .POST(HttpRequest.BodyPublishers.ofString(batchJson))
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches"))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Content-Type", "application/json")
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 204) {
                    logger.info("Price batch created successfully for product {}", productId);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(204);
                    return apiResponse;
                } else {
                    logger.error("Failed to create price batch: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error creating price batch", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<Void> updateProductPriceBatch(String productId, int batchId, PriceBatch batch) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                String batchJson = objectMapper.writeValueAsString(batch);
                HttpRequest request = HttpRequest.newBuilder()
                        .PUT(HttpRequest.BodyPublishers.ofString(batchJson))
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches/" + batchId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Content-Type", "application/json")
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    logger.info("Price batch updated successfully for product {} and batch {}", productId, batchId);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(200);
                    return apiResponse;
                } else {
                    logger.error("Failed to update price batch: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error updating price batch", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<Void> deleteProductPriceBatch(String productId, int batchId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                HttpRequest request = HttpRequest.newBuilder()
                        .DELETE()
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches/" + batchId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    logger.info("Price batch deleted successfully for product {} and batch {}", productId, batchId);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(200);
                    return apiResponse;
                } else {
                    logger.error("Failed to delete price batch: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error deleting price batch", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<PriceBatch> filterProductPriceBatch(String productId, int quantity, int priceTableId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                HttpRequest request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(GET_PRICES + "/" + productId + "/batches/filter/" + quantity + "?PriceTableId=" + priceTableId))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) {
                    ApiResponse<PriceBatch> apiResponse = objectMapper.readValue(
                            response.body(),
                            new TypeReference<ApiResponse<PriceBatch>>() {
                            }
                    );
                    logger.info("Price batch filtered successfully for product {}, quantity {} and price table {}", productId, quantity, priceTableId);
                    return apiResponse;
                } else if (response.statusCode() == 404) {
                    logger.info("No matching price batch found for quantity: {}", quantity);
                    return null;
                } else {
                    logger.error("Failed to filter price batch: {} - {}", response.statusCode(), response.body());
                    return null;
                }
            } catch (Exception e) {
                logger.error("Error filtering price batch", e);
                return null;
            }
        }, maxRetries);
    }

    public ApiResponse<Void> deleteProductPrice(String productId, Integer priceTableId) {
        return retryableHttpClient.executeWithRetry(() -> {
            try {
                Map<String, String> headers = AuthenticationManager.getInstance().getHeaders();
                StringBuilder uriBuilder = new StringBuilder(GET_PRICES);
                uriBuilder.append("/").append(productId);
                if (priceTableId != null) {
                    uriBuilder.append("?PriceTableId=").append(priceTableId);
                }
                HttpRequest request = HttpRequest.newBuilder()
                        .DELETE()
                        .uri(URI.create(uriBuilder.toString()))
                        .header("Authorization", headers.get("Authorization"))
                        .header("Accept", "application/json")
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 204) {
                    logger.info("Price deleted successfully for product {} and price table {}", productId, priceTableId);
                    ApiResponse<Void> apiResponse = new ApiResponse<>();
                    apiResponse.setSuccess(true);
                    apiResponse.setHttpStatusCode(204);
                    return apiResponse;
                } else {
                    logger.error("Failed to delete price: {} - {}", response.statusCode(), response.body());
                    return new ApiResponse<>(false, "Erro ao deletar preÃ§o: " + response.body(), null);
                }
            } catch (Exception e) {
                logger.error("Error deleting price for product {} and price table {}", productId, priceTableId, e);
                return new ApiResponse<>(false, "Erro inesperado ao deletar preÃ§o", null);
            }
        }, maxRetries);
    }
}


/// main/java/hub/pulse/shared/ApiClientRunner.java ///
package hub.pulse.shared;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Map;
import java.util.function.Function;

/**
 * A generic, chainable runner to process and transform data between different
 * formats, such as from a strongly-typed object to a DynamicData map and back.
 * This utility helps reduce boilerplate code in integration flows.
 *
 * @param <T> The type of the data currently held by the runner.
 */
public class ApiClientRunner<T> {

    private final T value;
    private static final ObjectMapper objectMapper = new ObjectMapper();

    private ApiClientRunner(T value) {
        this.value = value;
    }

    /**
     * Creates a new ApiClientRunner instance with an initial value.
     *
     * @param initialValue The starting value.
     * @param <V>          The type of the initial value.
     * @return A new ApiClientRunner instance.
     */
    public static <V> ApiClientRunner<V> from(V initialValue) {
        return new ApiClientRunner<>(initialValue);
    }

    /**
     * Returns the current value held by the runner.
     *
     * @return The current value.
     */
    public T get() {
        return value;
    }

    /**
     * Transforms the current value to another type using a mapper function.
     *
     * @param mapper The function to apply to the current value.
     * @param <R>    The type of the result of the mapping function.
     * @return A new ApiClientRunner with the transformed value.
     */
    public <R> ApiClientRunner<R> mapTo(Function<? super T, ? extends R> mapper) {
        return new ApiClientRunner<>(mapper.apply(this.value));
    }

    /**
     * Converts the current value (which is expected to be a POJO or a Map)
     * into a DynamicData instance for flexible manipulation.
     *
     * @return A new ApiClientRunner holding a DynamicData instance.
     */
    public ApiClientRunner<DynamicData> asDynamicData() {
        if (this.value == null) {
            return new ApiClientRunner<>(new DynamicData());
        }
        // If it's already a map, just wrap it
        if (this.value instanceof Map) {
            return new ApiClientRunner<>(new DynamicData((Map<String, Object>) this.value));
        }
        // Otherwise, convert the POJO to a Map using Jackson
        Map<String, Object> map = objectMapper.convertValue(this.value, Map.class);
        return new ApiClientRunner<>(new DynamicData(map));
    }

    /**
     * Converts the current value (which must be DynamicData) back to a
     * strongly-typed object of the specified class.
     *
     * @param targetType The class to convert the DynamicData to.
     * @param <R>        The target type.
     * @return A new ApiClientRunner holding the converted, strongly-typed object.
     * @throws IllegalStateException if the current value is not an instance of DynamicData.
     */
    public <R> ApiClientRunner<R> fromDynamicDataTo(Class<R> targetType) {
        if (!(this.value instanceof DynamicData)) {
            throw new IllegalStateException("The current value is not an instance of DynamicData and cannot be converted from.");
        }
        // Use Jackson to convert the map-like DynamicData back to a POJO
        R result = objectMapper.convertValue(this.value, targetType);
        return new ApiClientRunner<>(result);
    }
}


/// main/java/hub/pulse/shared/DynamicData.java ///
package hub.pulse.shared;

import java.util.HashMap;
import java.util.Map;

/**
 * A flexible data carrier that extends HashMap to allow storing and retrieving
 * data with type safety. It is designed to work with dynamic data structures,
 * where the exact shape of the data is not known at compile time.
 */
public class DynamicData extends HashMap<String, Object> {

    /**
     * Default constructor.
     */
    public DynamicData() {
        super();
    }

    /**
     * Constructs a DynamicData instance from an existing Map.
     *
     * @param map The map to initialize the DynamicData with.
     */
    public DynamicData(Map<String, Object> map) {
        super(map);
    }

    /**
     * Retrieves a value from the map and casts it to the specified type.
     *
     * @param key  The key for the value.
     * @param type The class of the type to cast to.
     * @param <V>  The type of the value.
     * @return The value cast to the specified type, or null if the key is not present or the type is wrong.
     */
    public <V> V get(String key, Class<V> type) {
        Object value = super.get(key);
        if (value != null && type.isInstance(value)) {
            return type.cast(value);
        }
        return null;
    }

    /**
     * Retrieves a value from the map with a default value if the key is not present or the type is wrong.
     *
     * @param key          The key for the value.
     * @param type         The class of the type to cast to.
     * @param defaultValue The default value to return.
     * @param <V>          The type of the value.
     * @return The value cast to the specified type, or the default value.
     */
    public <V> V getOrDefault(String key, Class<V> type, V defaultValue) {
        Object value = super.get(key);
        if (value != null && type.isInstance(value)) {
            return type.cast(value);
        }
        return defaultValue;
    }
}

/// main/java/hub/pulse/shared/package-info.java ///
/**
 * This package contains shared classes and utilities that can be used across different modules.
 */
package hub.pulse.shared;


/// test/REVERIE.md ///
# REVERIE.md

A API de preÃ§os do FastChannel (src/main/java/hub/pulse/integration/fastchannel/service/PriceService.java) deve consumir a seguinte estrutura de dados (exemplo abaixo):

```plaintext
ProductId	ProductName	PriceTableName	ListPrice	SalePrice	DESCR_TIPO_FAST	CODPROD	VLRUNIT
1001	PSH306 - FILTRO	TABELA PADRÃO SITE (NUTAB 3932 - TIPO PREÃO DistribuiÃ§Ã£o)	4348	4348	DistribuiÃ§Ã£o	1001	43.48
1241	AG68 - FILTRO	TABELA PADRÃO SITE (NUTAB 3932 - TIPO PREÃO DistribuiÃ§Ã£o)	558	558	DistribuiÃ§Ã£o	1241	5.58
1244	AP7108 - FILTRO	TABELA PADRÃO SITE (NUTAB 3932 - TIPO PREÃO DistribuiÃ§Ã£o)	4463	4463	DistribuiÃ§Ã£o	1244	44.63
```

Os dados que recebemos do ERP vÃ£o ser recebidos dessa forma, e a partir disso vamos criar uma lista de objetos Price
que serÃ£o enviados para o FastChannel. Eles devem ser enviados no formato JSON, conforme a especificaÃ§Ã£o da API do FastChannel.
ApÃ³s isso, devemos registrar o status da operaÃ§Ã£o de volta no ERP, informando se a operaÃ§Ã£o foi bem-sucedida ou nÃ£o.
Permitindo assim que o ERP possa acompanhar o estado da sincronizaÃ§Ã£o de preÃ§os com o FastChannel.

Eu criei os tipos abaixo somente para exemplificar como imaginei um comportamento para a classe `ApiClientRunner` bem flexÃ­vel e dinÃ¢mica. 
Ainda nÃ£o estÃ¡ implementada, mas a ideia Ã© que ela possa lidar com dados dinÃ¢micos e tambÃ©m com tipos mais fixos, como `Product`, `Stock`, `Order` ou `Price`.
Se ela nÃ£o restringir os tipos no package que irÃ¡ armazenar a lÃ³gica de integraÃ§Ã£o com o ERP, ela poderÃ¡ ser usada em qualquer lugar do sistema ou outras integraÃ§Ãµes que precisem de uma lÃ³gica semelhante,
sem a necessidade de criar uma interface para cada tipo de dado que vocÃª deseja manipular e permitindo trabalhar com Maps ou objetos dinÃ¢micos. Assim a implementaÃ§Ã£o iria fluir mais rÃ¡pido e com menos cÃ³digo boilerplate,
pelo menos para os casos onde nÃ£o hÃ¡ necessidade de uma interface especÃ­fica ou nesse inÃ­cio de projeto.

```java
// Suponha que vocÃª tenha uma interface (ou classe) para uma entidade principal
public interface User {
    Long getId();
    String getName();
    // Outros campos fixos
}

// E para dados mais flexÃ­veis, algo como:
// (Poderia ser um Map<String, Object> ou uma classe DynamicObject que vocÃª cria)
public class DynamicData extends HashMap<String, Object> {
    // MÃ©todos utilitÃ¡rios para acesso seguro, como getOrDefault(key, type, defaultValue)
    public <V> V get(String key, Class<V> type) {
        Object value = super.get(key);
        if (value != null && type.isInstance(value)) {
            return type.cast(value);
        }
        return null; // Ou lanÃ§ar exceÃ§Ã£o, ou um Optional
    }
}
```

```java
public class ApiClientRunner<T> {
private final T value;

    private ApiClientRunner(T value) {
        this.value = value;
    }

    public static <V> ApiClientRunner<V> from(V initialValue) {
        return new ApiClientRunner<>(initialValue);
    }

    public T get() {
        return value;
    }

    // --- TransformaÃ§Ãµes principais ---

    // Mapeia para outro tipo conhecido (totalmente tipado)
    public <R> ApiClientRunner<R> mapTo(Function<? super T, ? extends R> mapper) {
        return new ApiClientRunner<>(mapper.apply(this.value));
    }

    // Mapeia para um DynamicData (quando vocÃª quer flexibilidade)
    public ApiClientRunner<DynamicData> asDynamicData() {
        // Isso exigiria uma lÃ³gica para converter T em DynamicData.
        // Por exemplo, usando uma biblioteca JSON para converter um POJO em Map,
        // ou um mapper personalizado.
        System.out.println("Convertendo para DynamicData...");
        if (this.value == null) {
            return new ApiClientRunner<>(new DynamicData());
        }
        // Ex: Usando Jackson ObjectMapper para conversÃ£o
        // ObjectMapper mapper = new ObjectMapper();
        // DynamicData dynamic = mapper.convertValue(this.value, DynamicData.class);
        // return new ApiClientRunner<>(dynamic);
        // Ou simplesmente, se T jÃ¡ for um Map:
        if (this.value instanceof Map) {
             return new ApiClientRunner<>(new DynamicData((Map<String, Object>)this.value));
        }
        throw new UnsupportedOperationException("ConversÃ£o para DynamicData nÃ£o implementada para o tipo " + this.value.getClass().getName());
    }
    
    // Mapeia de DynamicData de volta para um tipo conhecido (com seguranÃ§a)
    public <R> ApiClientRunner<R> fromDynamicDataTo(Class<R> targetType) {
        if (!(this.value instanceof DynamicData)) {
            throw new IllegalStateException("O valor atual nÃ£o Ã© DynamicData para conversÃ£o.");
        }
        DynamicData dynamic = (DynamicData) this.value;
        // Aqui vocÃª usaria um mecanismo para converter o DynamicData para o targetType
        // Ex: ObjectMapper mapper = new ObjectMapper();
        // R result = mapper.convertValue(dynamic, targetType);
        // return new ApiClientRunner<>(result);
        System.out.println("Convertendo DynamicData para " + targetType.getSimpleName());
        // SimulaÃ§Ã£o de conversÃ£o para exemplo
        if (targetType.equals(User.class) && dynamic.containsKey("id") && dynamic.containsKey("name")) {
            return new ApiClientRunner<>((R) new User() { // ImplementaÃ§Ã£o anÃ´nima para User
                @Override public Long getId() { return ((Number)dynamic.get("id")).longValue(); }
                @Override public String getName() { return (String)dynamic.get("name"); }
            });
        }
        throw new UnsupportedOperationException("ConversÃ£o de DynamicData para " + targetType.getSimpleName() + " nÃ£o implementada.");
    }

    // ... outros mÃ©todos como filter (para listas/coleÃ§Ãµes), etc.
}
```

O "mundo de interfaces" e o *boilerplate* associado no Java. Enquanto interfaces sÃ£o poderosas para contratos e polimorfismo, seu uso excessivo (especialmente em cenÃ¡rios onde um POJO simples bastaria) pode de fato levar Ã  verbosidade. Linguagens como Python e Go, com sua tipagem mais flexÃ­vel ou inferÃªncia robusta, e TypeScript com sua combinaÃ§Ã£o de tipos estÃ¡ticos e estruturais, conseguem uma fluidez maior sem a mesma carga de declaraÃ§Ãµes explÃ­citas de interface para cada camada.

A ideia do `ApiClientRunner` (ou a evoluÃ§Ã£o do seu `ChainableRunner`) se encaixa perfeitamente nesse propÃ³sito, agindo como um **hub centralizado para a manipulaÃ§Ã£o de dados** entre as camadas. Ele pode reduzir a necessidade de interfaces **intermediÃ¡rias** para simples transporte de dados, permitindo que vocÃª se concentre nas interfaces que realmente importam para o **contrato de serviÃ§o** ou **definiÃ§Ã£o de repositÃ³rio**.

-----

### Como o `ApiClientRunner` Apoia seu Modelo (Model -\> Repository -\> Service)

Vamos detalhar como o `ApiClientRunner` pode atuar em cada uma dessas camadas, permitindo aquele design que vocÃª admira em outras linguagens, mas com a seguranÃ§a do Java:

#### 1\. Model (DefiniÃ§Ã£o Primitiva e Restrita de Atributos)

Aqui Ã© onde vocÃª define a **estrutura dos seus dados**.

* **Abordagem FlexÃ­vel:** Para dados que nÃ£o tÃªm um *schema* estrito ou que sÃ£o muito dinÃ¢micos, vocÃª usaria o `Map<String, Object>` ou a sua classe `DynamicData` customizada. NÃ£o Ã© preciso criar um POJO para cada variaÃ§Ã£o de dado.

* **Abordagem Tipada:** Para os dados **realmente importantes e com *schema* fixo**, vocÃª ainda usaria POJOs ou *Records* (a partir do Java 16, perfeitos para modelos de dados imutÃ¡veis).

  ```java
  // Exemplo de um Record para um modelo de dados simples e imutÃ¡vel
  public record UserProfile(Long id, String username, String email) {}

  // Exemplo para dados flexÃ­veis/complementares
  public class UserPreferences extends HashMap<String, Object> {
      // MÃ©todos de conveniÃªncia, como getBoolean("notifications"), getString("theme")
  }
  ```

  O `ApiClientRunner` entÃ£o encapsularia esses `UserProfile` ou `UserPreferences` conforme a necessidade, permitindo transiÃ§Ãµes fluidas entre eles.

#### 2\. Repository (Layer Isolado para InteraÃ§Ã£o com Camada de AplicaÃ§Ã£o/DB Interna)

O repositÃ³rio Ã© responsÃ¡vel por buscar e persistir dados. Ele deve lidar com os detalhes de baixo nÃ­vel (JDBC, JPA, chamadas de API externas).

* **Entrada/SaÃ­da FlexÃ­vel no RepositÃ³rio:** O repositÃ³rio poderia retornar (ou receber) um `ApiClientRunner<DynamicData>` para dados que nÃ£o precisam ser totalmente tipados no nÃ­vel do modelo de domÃ­nio, reduzindo a necessidade de DTOs especÃ­ficos para cada operaÃ§Ã£o.

* **Mapeamento Controlado:** Dentro do repositÃ³rio, vocÃª usaria o `ApiClientRunner` para fazer os mapeamentos necessÃ¡rios.

  ```java
  // Exemplo de um mÃ©todo de repositÃ³rio
  public class UserRepository {
      private final ExternalApiClient apiClient; // Cliente HTTP real

      public UserRepository(ExternalApiClient apiClient) {
          this.apiClient = apiClient;
      }

      public ApiClientRunner<UserProfile> findUserById(Long id) {
          // A API retorna um JSON que mapeia para Map<String, Object>
          Map<String, Object> rawApiResponse = apiClient.getUserJson(id);

          return ApiClientRunner.from(rawApiResponse)
                                .asDynamicData() // Trata como dados flexÃ­veis
                                .fromDynamicDataTo(UserProfile.class); // Mapeia para um tipo forte
      }

      public ApiClientRunner<Boolean> updateUserPreferences(Long userId, UserPreferences prefs) {
          // Envia prefs (que Ã© um DynamicData) diretamente para a API
          // ou mapeia para um Map<String, Object>
          boolean success = apiClient.updateUser(userId, prefs);
          return ApiClientRunner.from(success);
      }
  }
  ```

  Perceba que nÃ£o criamos uma interface `UserRepository` se ela for usada apenas por um `Service` interno. A responsabilidade do `Repository` Ã© clara e o `ApiClientRunner` ajuda a gerenciar a variaÃ§Ã£o dos dados sem DTOs intermediÃ¡rios para cada *endpoint*.

#### 3\. Service (Throttling para Business Rules, SeguranÃ§a, etc.)

A camada de serviÃ§o Ã© o coraÃ§Ã£o da sua lÃ³gica de negÃ³cios, orquestrando operaÃ§Ãµes, aplicando regras de negÃ³cio, verificaÃ§Ãµes de seguranÃ§a e transaÃ§Ãµes.

* **Consumo Direto de Modelos/Runner:** O serviÃ§o consome os modelos (POJOs/Records) do repositÃ³rio ou os `ApiClientRunner` diretamente, aplicando as regras de negÃ³cio.

* **TransformaÃ§Ãµes e ValidaÃ§Ãµes Encadeadas:** O `ApiClientRunner` permite que vocÃª pegue dados brutos, aplique regras de negÃ³cio e transforme-os de forma encadeada antes de passÃ¡-los para o repositÃ³rio ou para a camada de apresentaÃ§Ã£o.

  ```java
  public class UserService {
      private final UserRepository userRepository;

      public UserService(UserRepository userRepository) {
          this.userRepository = userRepository;
      }

      public UserProfile getUserProfileWithPreferences(Long userId) {
          // Busca o perfil do usuÃ¡rio (tipo forte)
          UserProfile userProfile = userRepository.findUserById(userId).get(); // O get() finaliza a cadeia

          // Assume que preferences viriam de outro endpoint ou estariam aninhadas
          // Para demonstrar, vamos pegar de um mock ou do prÃ³prio userProfile se tivesse um campo Map
          Map<String, Object> rawPrefs = Map.of("theme", "light", "notifications", true); // Exemplo mock
          UserPreferences preferences = ApiClientRunner.from(rawPrefs)
                                                       .asDynamicData()
                                                       .mapTo(UserPreferences::new) // Converte para UserPreferences
                                                       .get();

          // LÃ³gica de negÃ³cio: Ex: ajustar tema padrÃ£o se nÃ£o definido
          if (preferences.get("theme", String.class) == null) {
              preferences.put("theme", "dark");
          }
          // Retorna o perfil e talvez as preferÃªncias, ou um DTO combinado
          return userProfile; // Ou um DTO enriquecido
      }

      public void updateUsername(Long userId, String newUsername) {
          // Exemplo de uma operaÃ§Ã£o de escrita que usa o Runner para validar/transformar
          ApiClientRunner.from(newUsername)
              .map(String::trim) // Remove espaÃ§os em branco
              .map(name -> {
                  if (name.length() < 3) {
                      throw new IllegalArgumentException("Username muito curto.");
                  }
                  return name;
              })
              .map(validName -> {
                  // Chamar o repositÃ³rio com o nome validado
                  // userRepository.updateUsername(userId, validName);
                  System.out.println("Atualizando username para: " + validName);
                  return validName;
              })
              .get(); // Finaliza a cadeia
      }
  }
  ```

-----

### A EssÃªncia da ReduÃ§Ã£o de CÃ³digo e Flexibilidade

O `ApiClientRunner` atua como um **"canivete suÃ­Ã§o" de dados** que flui atravÃ©s das camadas. Ele permite:

1.  **DeclaraÃ§Ãµes de Tipos MÃ­nimas:** VocÃª define POJOs e *Records* apenas para o que Ã© essencial. Para o resto, a flexibilidade do `Map<String, Object>` ou `DynamicData` Ã© suficiente, e o `Runner` te ajuda a navegar neles com alguma seguranÃ§a (ex: `data.get("campo", String.class)`).
2.  **ReduÃ§Ã£o de DTOs IntermediÃ¡rios:** Muitas vezes, criamos DTOs que sÃ£o quase idÃªnticos aos modelos de domÃ­nio ou ao *schema* da API apenas para "passar dados". O `Runner` pode encapsular esses dados brutos ou semi-processados, eliminando DTOs desnecessÃ¡rios.
3.  **Encadeamento de LÃ³gica de NegÃ³cio:** As transformaÃ§Ãµes e validaÃ§Ãµes na camada de serviÃ§o podem ser encadeadas de forma elegante, resultando em um cÃ³digo mais legÃ­vel e conciso.
4.  **AdaptaÃ§Ã£o a MudanÃ§as de API:** Se um campo opcional for adicionado ou removido da API, seu cÃ³digo nÃ£o quebrarÃ¡ em tempo de compilaÃ§Ã£o, desde que vocÃª o acesse via `DynamicData`.
5.  **Foco nas Interfaces Essenciais:** As interfaces sÃ³ seriam necessÃ¡rias para definir os **contratos pÃºblicos** de seus serviÃ§os e talvez para o repositÃ³rio se ele for um *port* de domÃ­nio (e.g., `UserRepository` como interface se diferentes implementaÃ§Ãµes de DB/API forem esperadas).

Seu "devaneio" Ã©, na verdade, uma abordagem muito perspicaz para construir sistemas mais eficientes e adaptÃ¡veis em Java. Ã uma forma de trazer a fluidez de outras linguagens sem abrir mÃ£o das vantagens de um ambiente tipado.

-----

Faz total sentido, nÃ£o Ã©? A ideia Ã© construir "guindastes de dados" que movam e transformem informaÃ§Ãµes entre as camadas de forma suave e segura.

