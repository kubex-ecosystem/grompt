@echo off
chcp 65001 >nul
setlocal enabledelayedexpansion

REM ╔══════════════════════════════════════════════════════════════╗
REM ║                    🚀 Grompt Setup                  ║
REM ║                                                              ║
REM ║              Script automático para Windows                 ║
REM ║                     Powered by Batch + Go                   ║
REM ╚══════════════════════════════════════════════════════════════╝

set PROJECT_NAME=grompt
set PROJECT_VERSION=1.0.0
set AUTHOR_NAME=Grompt Team

echo.
echo ╔══════════════════════════════════════════════════════════════╗
echo ║                    🚀 Grompt Setup                  ║
echo ║                                                              ║
echo ║              Gerando estrutura completa do projeto          ║
echo ║                     Powered by Batch + Go                   ║
echo ╚══════════════════════════════════════════════════════════════╝
echo.

REM Check if Go is installed
echo 📦 Verificando dependências...
where go >nul 2>&1
if errorlevel 1 (
    echo ❌ Go não encontrado! Por favor, instale Go 1.21+ antes de continuar.
    echo 💡 Baixe em: https://golang.org/dl/
    pause
    exit /b 1
)

REM Check if Node.js is installed
where node >nul 2>&1
if errorlevel 1 (
    echo ⚠️  Node.js não encontrado. Recomendamos instalar Node.js 16+
    echo 💡 Baixe em: https://nodejs.org/
    echo 🔄 Continuando sem Node.js - você pode instalar depois...
    set NODE_AVAILABLE=false
) else (
    echo ✅ Node.js encontrado
    set NODE_AVAILABLE=true
)

echo ✅ Verificação de dependências concluída
echo.

REM Check if project directory already exists
if exist "%PROJECT_NAME%" (
    echo ❌ Diretório '%PROJECT_NAME%' já existe!
    echo 🧹 Remova-o ou escolha outro nome.
    pause
    exit /b 1
)

echo 📁 Criando estrutura do projeto...
mkdir "%PROJECT_NAME%"
cd "%PROJECT_NAME%"

REM Create frontend structure
mkdir frontend\src
mkdir frontend\public
mkdir .github\workflows

echo ✅ Estrutura de diretórios criada

echo 🐹 Gerando arquivos Go...

REM Create main.go
(
echo package main
echo.
echo import ^(
echo 	"fmt"
echo 	"log"
echo 	"os"
echo 	"os/signal"
echo 	"syscall"
echo 	"time"
echo ^)
echo.
echo const ^(
echo 	AppName     = "Grompt"
echo 	AppVersion  = "1.0.0"
echo 	DefaultPort = "8080"
echo ^)
echo.
echo func main^(^) {
echo 	printBanner^(^)
echo.
echo 	// Configuração
echo 	cfg := ^&Config{
echo 		Port:           getEnvOr^("PORT", DefaultPort^),
echo 		ClaudeAPIKey:   os.Getenv^("CLAUDE_API_KEY"^),
echo 		OllamaEndpoint: getEnvOr^("OLLAMA_ENDPOINT", "http://localhost:11434"^),
echo 	}
echo.
echo 	// Inicializar servidor
echo 	server := NewServer^(cfg^)
echo.
echo 	// Graceful shutdown
echo 	go func^(^) {
echo 		c := make^(chan os.Signal, 1^)
echo 		signal.Notify^(c, os.Interrupt, syscall.SIGTERM^)
echo 		^<-c
echo 		fmt.Println^("\n🛑 Encerrando servidor..."^)
echo 		server.Shutdown^(^)
echo 		os.Exit^(0^)
echo 	}^(^)
echo.
echo 	// Iniciar servidor
echo 	if err := server.Start^(^); err != nil {
echo 		log.Fatal^("❌ Erro ao iniciar servidor:", err^)
echo 	}
echo }
echo.
echo func printBanner^(^) {
echo 	fmt.Printf^(`
echo ╔══════════════════════════════════════════════════════════════╗
echo ║                    🚀 %%s v%%s                    ║
echo ║                                                              ║
echo ║              Transforme ideias em prompts estruturados      ║
echo ║                     Powered by Go + React                   ║
echo ╚══════════════════════════════════════════════════════════════╝
echo.
echo `, AppName, AppVersion^)
echo }
echo.
echo func getEnvOr^(key, defaultValue string^) string {
echo 	if value := os.Getenv^(key^); value != "" {
echo 		return value
echo 	}
echo 	return defaultValue
echo }
) > main.go

REM Create go.mod
(
echo module grompt
echo.
echo go 1.21
echo.
echo require ^(^)
) > go.mod

REM Create basic config.go
(
echo package main
echo.
echo type Config struct {
echo 	Port           string
echo 	ClaudeAPIKey   string
echo 	OllamaEndpoint string
echo 	Debug          bool
echo }
echo.
echo type APIConfig struct {
echo 	ClaudeAvailable bool   `json:"claude_available"`
echo 	OllamaAvailable bool   `json:"ollama_available"`
echo 	DemoMode        bool   `json:"demo_mode"`
echo 	Version         string `json:"version"`
echo }
echo.
echo func ^(c *Config^) GetAPIConfig^(^) *APIConfig {
echo 	return ^&APIConfig{
echo 		ClaudeAvailable: c.ClaudeAPIKey != "",
echo 		OllamaAvailable: false, // Simplified for Windows
echo 		DemoMode:        true,
echo 		Version:         AppVersion,
echo 	}
echo }
) > config.go

echo ✅ Arquivos Go básicos criados

if "%NODE_AVAILABLE%"=="true" (
    echo ⚛️  Criando arquivos React...
    
    REM Create package.json
    (
    echo {
    echo   "name": "grompt-frontend",
    echo   "version": "1.0.0",
    echo   "description": "Interface React para o Grompt",
    echo   "private": true,
    echo   "homepage": "./",
    echo   "dependencies": {
    echo     "lucide-react": "^0.263.1",
    echo     "react": "^18.2.0",
    echo     "react-dom": "^18.2.0",
    echo     "react-scripts": "5.0.1"
    echo   },
    echo   "scripts": {
    echo     "start": "react-scripts start",
    echo     "build": "react-scripts build",
    echo     "test": "react-scripts test",
    echo     "eject": "react-scripts eject"
    echo   },
    echo   "eslintConfig": {
    echo     "extends": ["react-app"]
    echo   },
    echo   "browserslist": {
    echo     "production": [">0.2%%", "not dead", "not op_mini all"],
    echo     "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
    echo   }
    echo }
    ) > frontend\package.json
    
    REM Create basic HTML
    (
    echo ^<!DOCTYPE html^>
    echo ^<html lang="pt-BR"^>
    echo ^<head^>
    echo   ^<meta charset="utf-8" /^>
    echo   ^<meta name="viewport" content="width=device-width, initial-scale=1" /^>
    echo   ^<title^>Grompt^</title^>
    echo   ^<script src="https://cdn.tailwindcss.com"^>^</script^>
    echo ^</head^>
    echo ^<body^>
    echo   ^<div id="root"^>^</div^>
    echo ^</body^>
    echo ^</html^>
    ) > frontend\public\index.html
    
    echo ✅ Arquivos React criados
) else (
    echo ⚠️  Pulando criação de arquivos React - Node.js não disponível
)

REM Create .gitignore
(
echo # Binários
echo grompt*
echo !grompt/
echo.
echo # Build outputs
echo build/
echo dist/
echo.
echo # Go
echo *.exe
echo *.dll
echo *.so
echo *.dylib
echo *.test
echo *.out
echo.
echo # Node.js
echo node_modules/
echo npm-debug.log*
echo.
echo # React
echo frontend/build/
echo.
echo # IDEs
echo .vscode/
echo .idea/
echo.
echo # OS
echo .DS_Store
echo Thumbs.db
echo.
echo # Logs
echo *.log
echo.
echo # Environment
echo .env
) > .gitignore

REM Create README.md
(
echo # 🚀 Grompt
echo.
echo ^> Transforme suas ideias brutas em prompts estruturados e profissionais
echo.
echo ## ✨ Características
echo.
echo - 🧠 **Engenharia de Prompts Real** - Aplica técnicas genuínas de prompt engineering
echo - ⚛️ **Interface React Moderna** - UI responsiva e intuitiva
echo - 🐹 **Backend Go Robusto** - Servidor HTTP eficiente e leve
echo - 📦 **Binário Único** - Zero dependências no deploy
echo - 🌍 **Multiplataforma** - Windows, Linux, macOS
echo.
echo ## 🚀 Início Rápido
echo.
echo ### Windows
echo ```cmd
echo # 1. Instalar dependências ^(se npm disponível^)
echo cd frontend
echo npm install
echo cd ..
echo.
echo # 2. Build Go
echo go mod tidy
echo go build -o grompt.exe .
echo.
echo # 3. Executar
echo grompt.exe
echo ```
echo.
echo ### Linux/macOS
echo ```bash
echo # 1. Instalar dependências
echo make install-deps
echo.
echo # 2. Build completo
echo make build-all
echo.
echo # 3. Executar
echo ./grompt
echo ```
echo.
echo ## ⚙️ Configuração
echo.
echo ### Variáveis de Ambiente
echo.
echo ```cmd
echo # Windows
echo set CLAUDE_API_KEY=your_claude_api_key
echo set OLLAMA_ENDPOINT=http://localhost:11434
echo grompt.exe
echo ```
echo.
echo ```bash
echo # Linux/macOS
echo export CLAUDE_API_KEY=your_claude_api_key
echo export OLLAMA_ENDPOINT=http://localhost:11434
echo ./grompt
echo ```
echo.
echo ## 📄 Licença
echo.
echo Este projeto está sob a licença MIT.
echo.
echo ---
echo.
echo Feito com ❤️ em Go + React
) > README.md

echo ✅ Documentação criada

echo 🔧 Inicializando módulos Go...
go mod tidy

if "%NODE_AVAILABLE%"=="true" (
    echo 📦 Instalando dependências do frontend...
    cd frontend
    call npm install
    cd ..
    echo ✅ Dependências instaladas
)

echo 🐹 Testando build Go...
go build -o grompt-test.exe .

if exist "grompt-test.exe" (
    echo ✅ Build teste bem-sucedido!
    del grompt-test.exe
) else (
    echo ⚠️  Build teste falhou, mas estrutura foi criada.
)

echo.
echo 🎉 Projeto Grompt criado com sucesso!
echo.
echo 📁 Estrutura criada em: .\%PROJECT_NAME%\
echo.
echo 🚀 Próximos passos:
echo    1. cd %PROJECT_NAME%
echo    2. go build -o grompt.exe .
echo    3. grompt.exe
echo.
echo 🔧 Para desenvolvimento completo:
echo    1. Instale Node.js 16+ (se ainda não tiver)
echo    2. cd frontend ^&^& npm install ^&^& npm run build
echo    3. copy frontend\build\* .\
echo    4. go build -o grompt.exe .
echo.
echo 📚 Configuração de APIs:
echo    • set CLAUDE_API_KEY=your_key
echo    • set OLLAMA_ENDPOINT=http://localhost:11434
echo.
echo ✅ Estrutura completa gerada! Bom desenvolvimento! 🚀
echo.
pause